
HAL_VALIDATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005438  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080055c8  080055c8  000155c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a8  080056a8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056b0  080056b0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080056b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  20000074  0800572c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  0800572c  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016455  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002744  00000000  00000000  000364f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00038c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001348  00000000  00000000  0003a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278ec  00000000  00000000  0003b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177f9  00000000  00000000  00062cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7405  00000000  00000000  0007a4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001718b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a88  00000000  00000000  00171908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055b0 	.word	0x080055b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080055b0 	.word	0x080055b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b092      	sub	sp, #72	; 0x48
 800057c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret; // status of I2C commands
	uint8_t text[50] = "Hello!\r\n";  // text array for outputting in UART
 800057e:	4a2d      	ldr	r2, [pc, #180]	; (8000634 <main+0xbc>)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	ca07      	ldmia	r2, {r0, r1, r2}
 8000584:	c303      	stmia	r3!, {r0, r1}
 8000586:	701a      	strb	r2, [r3, #0]
 8000588:	f107 030d 	add.w	r3, r7, #13
 800058c:	2229      	movs	r2, #41	; 0x29
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 fbd7 	bl	8004d44 <memset>
    ////

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f85b 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 fa33 	bl	8000a04 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800059e:	f000 f8e9 	bl	8000774 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005a2:	f000 f91f 	bl	80007e4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005a6:	f000 f9cd 	bl	8000944 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005aa:	f000 f9fb 	bl	80009a4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80005ae:	f000 f959 	bl	8000864 <MX_TIM6_Init>
  MX_TIM7_Init();
 80005b2:	f000 f98f 	bl	80008d4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //LSM6DSL_INIT();
  HAL_TIM_Base_Start(&htim6);
 80005b6:	4820      	ldr	r0, [pc, #128]	; (8000638 <main+0xc0>)
 80005b8:	f003 fbd6 	bl	8003d68 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 80005bc:	481f      	ldr	r0, [pc, #124]	; (800063c <main+0xc4>)
 80005be:	f003 fbd3 	bl	8003d68 <HAL_TIM_Base_Start>


  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fe26 	bl	8001212 <HAL_Init>

  /* USER CODE BEGIN Init */

  /// initialize IMU before interrupt
  // wait 15 ms for imu to wake up
    HAL_Delay(15);
 80005c6:	200f      	movs	r0, #15
 80005c8:	f000 fe98 	bl	80012fc <HAL_Delay>

    // print out start message for debugging
    HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fdfe 	bl	80001d0 <strlen>
 80005d4:	4603      	mov	r3, r0
 80005d6:	b29a      	uxth	r2, r3
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	4818      	ldr	r0, [pc, #96]	; (8000640 <main+0xc8>)
 80005e0:	f003 ff00 	bl	80043e4 <HAL_UART_Transmit>

    //// configure the I2C register for IMU
    ret = HAL_I2C_Mem_Write(&hi2c2, LSM6_ADDR, 0x10, 1, &config, 1, 50);
 80005e4:	23d4      	movs	r3, #212	; 0xd4
 80005e6:	b299      	uxth	r1, r3
 80005e8:	2332      	movs	r3, #50	; 0x32
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	2301      	movs	r3, #1
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <main+0xcc>)
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2301      	movs	r3, #1
 80005f6:	2210      	movs	r2, #16
 80005f8:	4813      	ldr	r0, [pc, #76]	; (8000648 <main+0xd0>)
 80005fa:	f001 fb4f 	bl	8001c9c <HAL_I2C_Mem_Write>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(ret != HAL_OK)
 8000604:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000608:	2b00      	cmp	r3, #0
 800060a:	d011      	beq.n	8000630 <main+0xb8>
    {
  		//return ret;
  		strcpy((char*)text,"I2C Error\r\n");
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0xd4>)
 8000610:	ca07      	ldmia	r2, {r0, r1, r2}
 8000612:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		while (1){HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);}
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdd9 	bl	80001d0 <strlen>
 800061e:	4603      	mov	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	1d39      	adds	r1, r7, #4
 8000624:	f04f 33ff 	mov.w	r3, #4294967295
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <main+0xc8>)
 800062a:	f003 fedb 	bl	80043e4 <HAL_UART_Transmit>
 800062e:	e7f2      	b.n	8000616 <main+0x9e>
	*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0xb8>
 8000632:	bf00      	nop
 8000634:	080055d4 	.word	0x080055d4
 8000638:	20000250 	.word	0x20000250
 800063c:	2000029c 	.word	0x2000029c
 8000640:	200001cc 	.word	0x200001cc
 8000644:	20000000 	.word	0x20000000
 8000648:	20000180 	.word	0x20000180
 800064c:	080055c8 	.word	0x080055c8

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0b8      	sub	sp, #224	; 0xe0
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fb70 	bl	8004d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2288      	movs	r2, #136	; 0x88
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f004 fb62 	bl	8004d44 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f001 ffee 	bl	8002660 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000684:	4b39      	ldr	r3, [pc, #228]	; (800076c <SystemClock_Config+0x11c>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	4a38      	ldr	r2, [pc, #224]	; (800076c <SystemClock_Config+0x11c>)
 800068c:	f023 0318 	bic.w	r3, r3, #24
 8000690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000694:	2314      	movs	r3, #20
 8000696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ac:	2360      	movs	r3, #96	; 0x60
 80006ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006c4:	2328      	movs	r3, #40	; 0x28
 80006c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 f831 	bl	8002748 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006ec:	f000 fb2e 	bl	8000d4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000712:	2104      	movs	r1, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f002 fbfd 	bl	8002f14 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000720:	f000 fb14 	bl	8000d4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <SystemClock_Config+0x120>)
 8000726:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800072c:	2300      	movs	r3, #0
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000730:	2300      	movs	r3, #0
 8000732:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000734:	2300      	movs	r3, #0
 8000736:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	4618      	mov	r0, r3
 800073e:	f002 fdef 	bl	8003320 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000748:	f000 fb00 	bl	8000d4c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800074c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000750:	f001 ffa4 	bl	800269c <HAL_PWREx_ControlVoltageScaling>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800075a:	f000 faf7 	bl	8000d4c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800075e:	f003 f8c9 	bl	80038f4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000762:	bf00      	nop
 8000764:	37e0      	adds	r7, #224	; 0xe0
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	00010085 	.word	0x00010085

08000774 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_DFSDM1_Init+0x68>)
 800077a:	4a19      	ldr	r2, [pc, #100]	; (80007e0 <MX_DFSDM1_Init+0x6c>)
 800077c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <MX_DFSDM1_Init+0x68>)
 8000780:	2201      	movs	r2, #1
 8000782:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_DFSDM1_Init+0x68>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <MX_DFSDM1_Init+0x68>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <MX_DFSDM1_Init+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <MX_DFSDM1_Init+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800079c:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <MX_DFSDM1_Init+0x68>)
 800079e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007a2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_DFSDM1_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <MX_DFSDM1_Init+0x68>)
 80007ac:	2204      	movs	r2, #4
 80007ae:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MX_DFSDM1_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <MX_DFSDM1_Init+0x68>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <MX_DFSDM1_Init+0x68>)
 80007be:	2200      	movs	r2, #0
 80007c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_DFSDM1_Init+0x68>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80007c8:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_DFSDM1_Init+0x68>)
 80007ca:	f000 fecd 	bl	8001568 <HAL_DFSDM_ChannelInit>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80007d4:	f000 faba 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200000c4 	.word	0x200000c4
 80007e0:	40016020 	.word	0x40016020

080007e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C2_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C2_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C2_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <MX_I2C2_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C2_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_I2C2_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C2_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_I2C2_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C2_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C2_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <MX_I2C2_Init+0x74>)
 8000820:	f001 f9ad 	bl	8001b7e <HAL_I2C_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 fa8f 	bl	8000d4c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_I2C2_Init+0x74>)
 8000832:	f001 fe7d 	bl	8002530 <HAL_I2CEx_ConfigAnalogFilter>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 fa86 	bl	8000d4c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_I2C2_Init+0x74>)
 8000844:	f001 febf 	bl	80025c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 fa7d 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000180 	.word	0x20000180
 800085c:	40005800 	.word	0x40005800
 8000860:	10909cec 	.word	0x10909cec

08000864 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000874:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_TIM6_Init+0x68>)
 8000876:	4a16      	ldr	r2, [pc, #88]	; (80008d0 <MX_TIM6_Init+0x6c>)
 8000878:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_TIM6_Init+0x68>)
 800087c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000880:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <MX_TIM6_Init+0x68>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 8000888:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_TIM6_Init+0x68>)
 800088a:	f242 720f 	movw	r2, #9999	; 0x270f
 800088e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_TIM6_Init+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000896:	480d      	ldr	r0, [pc, #52]	; (80008cc <MX_TIM6_Init+0x68>)
 8000898:	f003 fa0e 	bl	8003cb8 <HAL_TIM_Base_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80008a2:	f000 fa53 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4806      	ldr	r0, [pc, #24]	; (80008cc <MX_TIM6_Init+0x68>)
 80008b4:	f003 fca2 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80008be:	f000 fa45 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000250 	.word	0x20000250
 80008d0:	40001000 	.word	0x40001000

080008d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
 80008e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_TIM7_Init+0x68>)
 80008e6:	4a16      	ldr	r2, [pc, #88]	; (8000940 <MX_TIM7_Init+0x6c>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16000 - 1;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_TIM7_Init+0x68>)
 80008ec:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80008f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_TIM7_Init+0x68>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000 - 1;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_TIM7_Init+0x68>)
 80008fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80008fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_TIM7_Init+0x68>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_TIM7_Init+0x68>)
 8000908:	f003 f9d6 	bl	8003cb8 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000912:	f000 fa1b 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_TIM7_Init+0x68>)
 8000924:	f003 fc6a 	bl	80041fc <HAL_TIMEx_MasterConfigSynchronization>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800092e:	f000 fa0d 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3710      	adds	r7, #16
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000029c 	.word	0x2000029c
 8000940:	40001400 	.word	0x40001400

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USART1_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_USART1_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART1_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000988:	f003 fcde 	bl	8004348 <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f9db 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200001cc 	.word	0x200001cc
 80009a0:	40013800 	.word	0x40013800

080009a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b14      	ldr	r3, [pc, #80]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009aa:	4a15      	ldr	r2, [pc, #84]	; (8000a00 <MX_USART3_UART_Init+0x5c>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e6:	4805      	ldr	r0, [pc, #20]	; (80009fc <MX_USART3_UART_Init+0x58>)
 80009e8:	f003 fcae 	bl	8004348 <HAL_UART_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009f2:	f000 f9ab 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000fc 	.word	0x200000fc
 8000a00:	40004800 	.word	0x40004800

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a1a:	4b7b      	ldr	r3, [pc, #492]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a7a      	ldr	r2, [pc, #488]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a20:	f043 0310 	orr.w	r3, r3, #16
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b78      	ldr	r3, [pc, #480]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0310 	and.w	r3, r3, #16
 8000a2e:	613b      	str	r3, [r7, #16]
 8000a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a32:	4b75      	ldr	r3, [pc, #468]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a74      	ldr	r2, [pc, #464]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b72      	ldr	r3, [pc, #456]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b6f      	ldr	r3, [pc, #444]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a6e      	ldr	r2, [pc, #440]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b6c      	ldr	r3, [pc, #432]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b69      	ldr	r3, [pc, #420]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a68      	ldr	r2, [pc, #416]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b66      	ldr	r3, [pc, #408]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b63      	ldr	r3, [pc, #396]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a62      	ldr	r2, [pc, #392]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b60      	ldr	r3, [pc, #384]	; (8000c08 <MX_GPIO_Init+0x204>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a98:	485c      	ldr	r0, [pc, #368]	; (8000c0c <MX_GPIO_Init+0x208>)
 8000a9a:	f001 f81b 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f001 f814 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000aac:	2200      	movs	r2, #0
 8000aae:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000ab2:	4857      	ldr	r0, [pc, #348]	; (8000c10 <MX_GPIO_Init+0x20c>)
 8000ab4:	f001 f80e 	bl	8001ad4 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000abe:	4855      	ldr	r0, [pc, #340]	; (8000c14 <MX_GPIO_Init+0x210>)
 8000ac0:	f001 f808 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STSAFE_A100_RESET_GPIO_Port, STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	4853      	ldr	r0, [pc, #332]	; (8000c18 <MX_GPIO_Init+0x214>)
 8000aca:	f001 f803 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	484f      	ldr	r0, [pc, #316]	; (8000c10 <MX_GPIO_Init+0x20c>)
 8000ad4:	f000 fffe 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2101      	movs	r1, #1
 8000adc:	484b      	ldr	r0, [pc, #300]	; (8000c0c <MX_GPIO_Init+0x208>)
 8000ade:	f000 fff9 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ae2:	f240 1315 	movw	r3, #277	; 0x115
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4844      	ldr	r0, [pc, #272]	; (8000c0c <MX_GPIO_Init+0x208>)
 8000afc:	f000 fe40 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b00:	236a      	movs	r3, #106	; 0x6a
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <MX_GPIO_Init+0x218>)
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	483e      	ldr	r0, [pc, #248]	; (8000c0c <MX_GPIO_Init+0x208>)
 8000b14:	f000 fe34 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b1e:	4b40      	ldr	r3, [pc, #256]	; (8000c20 <MX_GPIO_Init+0x21c>)
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4839      	ldr	r0, [pc, #228]	; (8000c14 <MX_GPIO_Init+0x210>)
 8000b2e:	f000 fe27 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|SPBTLE_RF_RST_Pin;
 8000b32:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4e:	f000 fe17 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000b52:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000b56:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4829      	ldr	r0, [pc, #164]	; (8000c10 <MX_GPIO_Init+0x20c>)
 8000b6c:	f000 fe08 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin;
 8000b70:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_GPIO_Init+0x218>)
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4824      	ldr	r0, [pc, #144]	; (8000c18 <MX_GPIO_Init+0x214>)
 8000b86:	f000 fdfb 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b8a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481c      	ldr	r0, [pc, #112]	; (8000c14 <MX_GPIO_Init+0x210>)
 8000ba4:	f000 fdec 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000ba8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_GPIO_Init+0x218>)
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4815      	ldr	r0, [pc, #84]	; (8000c14 <MX_GPIO_Init+0x210>)
 8000bbe:	f000 fddf 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = STSAFE_A100_RESET_Pin;
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STSAFE_A100_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480f      	ldr	r0, [pc, #60]	; (8000c18 <MX_GPIO_Init+0x214>)
 8000bda:	f000 fdd1 	bl	8001780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	2017      	movs	r0, #23
 8000be4:	f000 fc89 	bl	80014fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000be8:	2017      	movs	r0, #23
 8000bea:	f000 fca2 	bl	8001532 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	2028      	movs	r0, #40	; 0x28
 8000bf4:	f000 fc81 	bl	80014fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bf8:	2028      	movs	r0, #40	; 0x28
 8000bfa:	f000 fc9a 	bl	8001532 <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3728      	adds	r7, #40	; 0x28
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000
 8000c0c:	48001000 	.word	0x48001000
 8000c10:	48000400 	.word	0x48000400
 8000c14:	48000800 	.word	0x48000800
 8000c18:	48000c00 	.word	0x48000c00
 8000c1c:	10110000 	.word	0x10110000
 8000c20:	10210000 	.word	0x10210000

08000c24 <HAL_TIM_PeriodElapsedCallback>:

	//HAL_I2C_Mem_Write(&hi2c2, LSM6_ADDR, 0x10, 1, &turnon, 1, HAL_MAX_DELAY); // should turn on the accelerometer
	//HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
}*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b087      	sub	sp, #28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (htim == &htim6){
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d117      	bne.n	8000c64 <HAL_TIM_PeriodElapsedCallback+0x40>
		uint8_t buff[] = "Hello World!!\r\n";
 8000c34:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c36:	f107 0408 	add.w	r4, r7, #8
 8000c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart1, buff, sizeof(buff), 1000);
 8000c40:	f107 0108 	add.w	r1, r7, #8
 8000c44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c48:	2210      	movs	r2, #16
 8000c4a:	480d      	ldr	r0, [pc, #52]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000c4c:	f003 fbca 	bl	80043e4 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000c56:	f000 ff55 	bl	8001b04 <HAL_GPIO_TogglePin>
	    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000c5a:	2120      	movs	r1, #32
 8000c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c60:	f000 ff50 	bl	8001b04 <HAL_GPIO_TogglePin>
	}
	if (htim == &htim7){
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d101      	bne.n	8000c70 <HAL_TIM_PeriodElapsedCallback+0x4c>
		readXval();
 8000c6c:	f000 f80e 	bl	8000c8c <readXval>
	}
}
 8000c70:	bf00      	nop
 8000c72:	371c      	adds	r7, #28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd90      	pop	{r4, r7, pc}
 8000c78:	20000250 	.word	0x20000250
 8000c7c:	08005608 	.word	0x08005608
 8000c80:	200001cc 	.word	0x200001cc
 8000c84:	48000400 	.word	0x48000400
 8000c88:	2000029c 	.word	0x2000029c

08000c8c <readXval>:
void readXval(){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b094      	sub	sp, #80	; 0x50
 8000c90:	af04      	add	r7, sp, #16
		HAL_StatusTypeDef ret; // status of I2C commands
		uint8_t text[50];  // text array for outputting in UART
		uint8_t buf[6];
		uint16_t val;
		// read values from I2C
		ret = HAL_I2C_Mem_Read(&hi2c2, LSM6_ADDR, XALL_ADDR, 1, &buf, 6, HAL_MAX_DELAY); //
 8000c92:	23d4      	movs	r3, #212	; 0xd4
 8000c94:	b299      	uxth	r1, r3
 8000c96:	2328      	movs	r3, #40	; 0x28
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	9302      	str	r3, [sp, #8]
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	463b      	mov	r3, r7
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2301      	movs	r3, #1
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <readXval+0xb0>)
 8000cac:	f001 f90a 	bl	8001ec4 <HAL_I2C_Mem_Read>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		if (ret != HAL_OK){  // if I2C fails
 8000cb6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d013      	beq.n	8000ce6 <readXval+0x5a>
		  strcpy((char*)text,"ERROR RX1\r\n");
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <readXval+0xb4>)
 8000cc4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cc6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fa7e 	bl	80001d0 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	f107 0108 	add.w	r1, r7, #8
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <readXval+0xb8>)
 8000ce2:	f003 fb7f 	bl	80043e4 <HAL_UART_Transmit>
		}

		// combing upper and lower values
		val = (((uint16_t)buf[1] << 8) | buf[0]);// / 0x4009;
 8000ce6:	787b      	ldrb	r3, [r7, #1]
 8000ce8:	021b      	lsls	r3, r3, #8
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	783b      	ldrb	r3, [r7, #0]
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	b21b      	sxth	r3, r3
 8000cf4:	87fb      	strh	r3, [r7, #62]	; 0x3e

		// dealing with the two's complement
		if ( val > 0x7FFF ) {  // why doesn't this work??
 8000cf6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	da05      	bge.n	8000d0a <readXval+0x7e>
		//if ((val & 0x8000) == 0x800){
		  //val |= 0xF000;
			val = ~val & 0x7FFF;
 8000cfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000d00:	43db      	mvns	r3, r3
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
		}
		//val = val/350;
		// create string value of combined accelerometer x value
		sprintf((char*)text,"%u \r\n",((unsigned int)(val)));
 8000d0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	490d      	ldr	r1, [pc, #52]	; (8000d48 <readXval+0xbc>)
 8000d12:	4618      	mov	r0, r3
 8000d14:	f004 f81e 	bl	8004d54 <siprintf>
		HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY); // prints
 8000d18:	f107 0308 	add.w	r3, r7, #8
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa57 	bl	80001d0 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f107 0108 	add.w	r1, r7, #8
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <readXval+0xb8>)
 8000d30:	f003 fb58 	bl	80043e4 <HAL_UART_Transmit>

}
 8000d34:	bf00      	nop
 8000d36:	3740      	adds	r7, #64	; 0x40
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000180 	.word	0x20000180
 8000d40:	08005618 	.word	0x08005618
 8000d44:	200001cc 	.word	0x200001cc
 8000d48:	08005624 	.word	0x08005624

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <Error_Handler+0x8>
	...

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <HAL_MspInit+0x44>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	4a08      	ldr	r2, [pc, #32]	; (8000d9c <HAL_MspInit+0x44>)
 8000d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d80:	6593      	str	r3, [r2, #88]	; 0x58
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000db8:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d12d      	bne.n	8000e1c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dca:	6613      	str	r3, [r2, #96]	; 0x60
 8000dcc:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000df0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e02:	2306      	movs	r3, #6
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4807      	ldr	r0, [pc, #28]	; (8000e2c <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000e0e:	f000 fcb7 	bl	8001780 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e12:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a02      	ldr	r2, [pc, #8]	; (8000e24 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e1a:	6013      	str	r3, [r2, #0]
  }

}
 8000e1c:	bf00      	nop
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000090 	.word	0x20000090
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48001000 	.word	0x48001000

08000e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a17      	ldr	r2, [pc, #92]	; (8000eac <HAL_I2C_MspInit+0x7c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d128      	bne.n	8000ea4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_I2C_MspInit+0x80>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <HAL_I2C_MspInit+0x80>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <HAL_I2C_MspInit+0x80>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e70:	2312      	movs	r3, #18
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e7c:	2304      	movs	r3, #4
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	480b      	ldr	r0, [pc, #44]	; (8000eb4 <HAL_I2C_MspInit+0x84>)
 8000e88:	f000 fc7a 	bl	8001780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_I2C_MspInit+0x80>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_I2C_MspInit+0x80>)
 8000e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e96:	6593      	str	r3, [r2, #88]	; 0x58
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_I2C_MspInit+0x80>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40005800 	.word	0x40005800
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_TIM_Base_MspInit+0x78>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d114      	bne.n	8000ef4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eca:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <HAL_TIM_Base_MspInit+0x7c>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a19      	ldr	r2, [pc, #100]	; (8000f34 <HAL_TIM_Base_MspInit+0x7c>)
 8000ed0:	f043 0310 	orr.w	r3, r3, #16
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_TIM_Base_MspInit+0x7c>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f003 0310 	and.w	r3, r3, #16
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2036      	movs	r0, #54	; 0x36
 8000ee8:	f000 fb07 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000eec:	2036      	movs	r0, #54	; 0x36
 8000eee:	f000 fb20 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000ef2:	e018      	b.n	8000f26 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <HAL_TIM_Base_MspInit+0x80>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d113      	bne.n	8000f26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x7c>)
 8000f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <HAL_TIM_Base_MspInit+0x7c>)
 8000f04:	f043 0320 	orr.w	r3, r3, #32
 8000f08:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x7c>)
 8000f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0e:	f003 0320 	and.w	r3, r3, #32
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2037      	movs	r0, #55	; 0x37
 8000f1c:	f000 faed 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000f20:	2037      	movs	r0, #55	; 0x37
 8000f22:	f000 fb06 	bl	8001532 <HAL_NVIC_EnableIRQ>
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40001000 	.word	0x40001000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40001400 	.word	0x40001400

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 031c 	add.w	r3, r7, #28
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a2e      	ldr	r2, [pc, #184]	; (8001014 <HAL_UART_MspInit+0xd8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d128      	bne.n	8000fb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a2d      	ldr	r2, [pc, #180]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	61bb      	str	r3, [r7, #24]
 8000f74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a27      	ldr	r2, [pc, #156]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f8e:	23c0      	movs	r3, #192	; 0xc0
 8000f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 031c 	add.w	r3, r7, #28
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	481c      	ldr	r0, [pc, #112]	; (800101c <HAL_UART_MspInit+0xe0>)
 8000faa:	f000 fbe9 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fae:	e02d      	b.n	800100c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	; (8001020 <HAL_UART_MspInit+0xe4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d128      	bne.n	800100c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fba:	4b17      	ldr	r3, [pc, #92]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	4a16      	ldr	r2, [pc, #88]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_MspInit+0xdc>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000fea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001000:	f107 031c 	add.w	r3, r7, #28
 8001004:	4619      	mov	r1, r3
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <HAL_UART_MspInit+0xe8>)
 8001008:	f000 fbba 	bl	8001780 <HAL_GPIO_Init>
}
 800100c:	bf00      	nop
 800100e:	3730      	adds	r7, #48	; 0x30
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40013800 	.word	0x40013800
 8001018:	40021000 	.word	0x40021000
 800101c:	48000400 	.word	0x48000400
 8001020:	40004800 	.word	0x40004800
 8001024:	48000c00 	.word	0x48000c00

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f922 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001080:	2020      	movs	r0, #32
 8001082:	f000 fd59 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001086:	2040      	movs	r0, #64	; 0x40
 8001088:	f000 fd56 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800108c:	2080      	movs	r0, #128	; 0x80
 800108e:	f000 fd53 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001092:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001096:	f000 fd4f 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}

0800109e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80010a2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010a6:	f000 fd47 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80010aa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010ae:	f000 fd43 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80010b2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b6:	f000 fd3f 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80010ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010be:	f000 fd3b 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <TIM6_DAC_IRQHandler+0x10>)
 80010ce:	f002 feb3 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000250 	.word	0x20000250

080010dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM7_IRQHandler+0x10>)
 80010e2:	f002 fea9 	bl	8003e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000029c 	.word	0x2000029c

080010f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f8:	4a14      	ldr	r2, [pc, #80]	; (800114c <_sbrk+0x5c>)
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <_sbrk+0x60>)
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <_sbrk+0x64>)
 800110e:	4a12      	ldr	r2, [pc, #72]	; (8001158 <_sbrk+0x68>)
 8001110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001112:	4b10      	ldr	r3, [pc, #64]	; (8001154 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	429a      	cmp	r2, r3
 800111e:	d207      	bcs.n	8001130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001120:	f003 fde6 	bl	8004cf0 <__errno>
 8001124:	4603      	mov	r3, r0
 8001126:	220c      	movs	r2, #12
 8001128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	e009      	b.n	8001144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <_sbrk+0x64>)
 8001140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20018000 	.word	0x20018000
 8001150:	00000400 	.word	0x00000400
 8001154:	20000094 	.word	0x20000094
 8001158:	20000300 	.word	0x20000300

0800115c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <SystemInit+0x5c>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001166:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <SystemInit+0x5c>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <SystemInit+0x60>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a11      	ldr	r2, [pc, #68]	; (80011bc <SystemInit+0x60>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800117c:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <SystemInit+0x60>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <SystemInit+0x60>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a0d      	ldr	r2, [pc, #52]	; (80011bc <SystemInit+0x60>)
 8001188:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800118c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001190:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001192:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <SystemInit+0x60>)
 8001194:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001198:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800119a:	4b08      	ldr	r3, [pc, #32]	; (80011bc <SystemInit+0x60>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a07      	ldr	r2, [pc, #28]	; (80011bc <SystemInit+0x60>)
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <SystemInit+0x60>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00
 80011bc:	40021000 	.word	0x40021000

080011c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff ffca 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011ca:	e003      	b.n	80011d4 <LoopCopyDataInit>

080011cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011d2:	3104      	adds	r1, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011d4:	480a      	ldr	r0, [pc, #40]	; (8001200 <LoopForever+0xa>)
	ldr	r3, =_edata
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011dc:	d3f6      	bcc.n	80011cc <CopyDataInit>
	ldr	r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011e0:	e002      	b.n	80011e8 <LoopFillZerobss>

080011e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011e4:	f842 3b04 	str.w	r3, [r2], #4

080011e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011e8:	4b08      	ldr	r3, [pc, #32]	; (800120c <LoopForever+0x16>)
	cmp	r2, r3
 80011ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011ec:	d3f9      	bcc.n	80011e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f003 fd85 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f7ff f9c1 	bl	8000578 <main>

080011f6 <LoopForever>:

LoopForever:
    b LoopForever
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011f8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011fc:	080056b8 	.word	0x080056b8
	ldr	r0, =_sdata
 8001200:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001204:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001208:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 800120c:	200002fc 	.word	0x200002fc

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>

08001212 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001218:	2300      	movs	r3, #0
 800121a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121c:	2003      	movs	r0, #3
 800121e:	f000 f961 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001222:	2000      	movs	r0, #0
 8001224:	f000 f80e 	bl	8001244 <HAL_InitTick>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d002      	beq.n	8001234 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e001      	b.n	8001238 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001234:	f7ff fd90 	bl	8000d58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001238:	79fb      	ldrb	r3, [r7, #7]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001250:	4b17      	ldr	r3, [pc, #92]	; (80012b0 <HAL_InitTick+0x6c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <HAL_InitTick+0x70>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <HAL_InitTick+0x6c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	4619      	mov	r1, r3
 8001262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001266:	fbb3 f3f1 	udiv	r3, r3, r1
 800126a:	fbb2 f3f3 	udiv	r3, r2, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f000 f96d 	bl	800154e <HAL_SYSTICK_Config>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10f      	bne.n	800129a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d809      	bhi.n	8001294 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f000 f937 	bl	80014fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128c:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <HAL_InitTick+0x74>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e007      	b.n	80012a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	73fb      	strb	r3, [r7, #15]
 8001298:	e004      	b.n	80012a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	73fb      	strb	r3, [r7, #15]
 800129e:	e001      	b.n	80012a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000000c 	.word	0x2000000c
 80012b4:	20000004 	.word	0x20000004
 80012b8:	20000008 	.word	0x20000008

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	2000000c 	.word	0x2000000c
 80012e0:	200002e8 	.word	0x200002e8

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200002e8 	.word	0x200002e8

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000000c 	.word	0x2000000c

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff29 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff3e 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff31 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e0ac      	b.n	80016d4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f8b2 	bl	80016e8 <DFSDM_GetChannelFromInstance>
 8001584:	4603      	mov	r3, r0
 8001586:	4a55      	ldr	r2, [pc, #340]	; (80016dc <HAL_DFSDM_ChannelInit+0x174>)
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e09f      	b.n	80016d4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fc03 	bl	8000da0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800159a:	4b51      	ldr	r3, [pc, #324]	; (80016e0 <HAL_DFSDM_ChannelInit+0x178>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	4a4f      	ldr	r2, [pc, #316]	; (80016e0 <HAL_DFSDM_ChannelInit+0x178>)
 80015a2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80015a4:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <HAL_DFSDM_ChannelInit+0x178>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d125      	bne.n	80015f8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80015b6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4948      	ldr	r1, [pc, #288]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a46      	ldr	r2, [pc, #280]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015cc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80015d0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	791b      	ldrb	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d108      	bne.n	80015ec <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	3b01      	subs	r3, #1
 80015e4:	041b      	lsls	r3, r3, #16
 80015e6:	493f      	ldr	r1, [pc, #252]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80015ec:	4b3d      	ldr	r3, [pc, #244]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a3c      	ldr	r2, [pc, #240]	; (80016e4 <HAL_DFSDM_ChannelInit+0x17c>)
 80015f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015f6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001606:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001616:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800161c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 020f 	bic.w	r2, r2, #15
 8001634:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6819      	ldr	r1, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800165c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	3b01      	subs	r3, #1
 800166e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f002 0207 	and.w	r2, r2, #7
 8001688:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001694:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f000 f810 	bl	80016e8 <DFSDM_GetChannelFromInstance>
 80016c8:	4602      	mov	r2, r0
 80016ca:	4904      	ldr	r1, [pc, #16]	; (80016dc <HAL_DFSDM_ChannelInit+0x174>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	2000009c 	.word	0x2000009c
 80016e0:	20000098 	.word	0x20000098
 80016e4:	40016000 	.word	0x40016000

080016e8 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <DFSDM_GetChannelFromInstance+0x7c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d102      	bne.n	80016fe <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	e02b      	b.n	8001756 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <DFSDM_GetChannelFromInstance+0x80>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d102      	bne.n	800170c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	e024      	b.n	8001756 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <DFSDM_GetChannelFromInstance+0x84>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d102      	bne.n	800171a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001714:	2302      	movs	r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e01d      	b.n	8001756 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <DFSDM_GetChannelFromInstance+0x88>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d102      	bne.n	8001728 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001722:	2304      	movs	r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e016      	b.n	8001756 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <DFSDM_GetChannelFromInstance+0x8c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d102      	bne.n	8001736 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001730:	2305      	movs	r3, #5
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e00f      	b.n	8001756 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a0f      	ldr	r2, [pc, #60]	; (8001778 <DFSDM_GetChannelFromInstance+0x90>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d102      	bne.n	8001744 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800173e:	2306      	movs	r3, #6
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e008      	b.n	8001756 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a0d      	ldr	r2, [pc, #52]	; (800177c <DFSDM_GetChannelFromInstance+0x94>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d102      	bne.n	8001752 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800174c:	2307      	movs	r3, #7
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	e001      	b.n	8001756 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001752:	2303      	movs	r3, #3
 8001754:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	40016000 	.word	0x40016000
 8001768:	40016020 	.word	0x40016020
 800176c:	40016040 	.word	0x40016040
 8001770:	40016080 	.word	0x40016080
 8001774:	400160a0 	.word	0x400160a0
 8001778:	400160c0 	.word	0x400160c0
 800177c:	400160e0 	.word	0x400160e0

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e17f      	b.n	8001a90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8171 	beq.w	8001a8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d00b      	beq.n	80017c8 <HAL_GPIO_Init+0x48>
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d007      	beq.n	80017c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017bc:	2b11      	cmp	r3, #17
 80017be:	d003      	beq.n	80017c8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d130      	bne.n	800182a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017fe:	2201      	movs	r2, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0201 	and.w	r2, r3, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d118      	bne.n	8001868 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800183c:	2201      	movs	r2, #1
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	08db      	lsrs	r3, r3, #3
 8001852:	f003 0201 	and.w	r2, r3, #1
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	4313      	orrs	r3, r2
 8001890:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b02      	cmp	r3, #2
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x128>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b12      	cmp	r3, #18
 80018a6:	d123      	bne.n	80018f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	6939      	ldr	r1, [r7, #16]
 80018ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0203 	and.w	r2, r3, #3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80ac 	beq.w	8001a8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6613      	str	r3, [r2, #96]	; 0x60
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x242>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_GPIO_Init+0x338>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x23e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <HAL_GPIO_Init+0x33c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x23a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <HAL_GPIO_Init+0x340>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x236>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x344>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x232>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x348>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x22e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4a      	ldr	r2, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x34c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x22a>
 80019a6:	2306      	movs	r3, #6
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019c2:	2300      	movs	r3, #0
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019d4:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a06:	4a32      	ldr	r2, [pc, #200]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f ae78 	bne.w	8001790 <HAL_GPIO_Init+0x10>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	48000c00 	.word	0x48000c00
 8001ac4:	48001000 	.word	0x48001000
 8001ac8:	48001400 	.word	0x48001400
 8001acc:	48001800 	.word	0x48001800
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43d9      	mvns	r1, r3
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	400b      	ands	r3, r1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f806 	bl	8001b68 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e081      	b.n	8001c94 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d106      	bne.n	8001baa <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff f943 	bl	8000e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2224      	movs	r2, #36	; 0x24
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bce:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bde:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d107      	bne.n	8001bf8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bf4:	609a      	str	r2, [r3, #8]
 8001bf6:	e006      	b.n	8001c06 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c04:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d104      	bne.n	8001c18 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c16:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	ea42 0103 	orr.w	r1, r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	021a      	lsls	r2, r3, #8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69d9      	ldr	r1, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1a      	ldr	r2, [r3, #32]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0201 	orr.w	r2, r2, #1
 8001c74:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	817b      	strh	r3, [r7, #10]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	813b      	strh	r3, [r7, #8]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b20      	cmp	r3, #32
 8001cc0:	f040 80f9 	bne.w	8001eb6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <HAL_I2C_Mem_Write+0x34>
 8001cca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0ed      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_I2C_Mem_Write+0x4e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e0e6      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001cf2:	f7ff faf7 	bl	80012e4 <HAL_GetTick>
 8001cf6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	2319      	movs	r3, #25
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fac3 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0d1      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2221      	movs	r2, #33	; 0x21
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a3a      	ldr	r2, [r7, #32]
 8001d2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d3c:	88f8      	ldrh	r0, [r7, #6]
 8001d3e:	893a      	ldrh	r2, [r7, #8]
 8001d40:	8979      	ldrh	r1, [r7, #10]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 f9d3 	bl	80020f8 <I2C_RequestMemoryWrite>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d005      	beq.n	8001d64 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0a9      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	2bff      	cmp	r3, #255	; 0xff
 8001d6c:	d90e      	bls.n	8001d8c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	22ff      	movs	r2, #255	; 0xff
 8001d72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	8979      	ldrh	r1, [r7, #10]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fba5 	bl	80024d4 <I2C_TransferConfig>
 8001d8a:	e00f      	b.n	8001dac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	8979      	ldrh	r1, [r7, #10]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fb94 	bl	80024d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 faad 	bl	8002310 <I2C_WaitOnTXISFlagUntilTimeout>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e07b      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	1c5a      	adds	r2, r3, #1
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d034      	beq.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d130      	bne.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2180      	movs	r1, #128	; 0x80
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fa3f 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e04d      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d90e      	bls.n	8001e44 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	8979      	ldrh	r1, [r7, #10]
 8001e34:	2300      	movs	r3, #0
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 fb49 	bl	80024d4 <I2C_TransferConfig>
 8001e42:	e00f      	b.n	8001e64 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	2300      	movs	r3, #0
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fb38 	bl	80024d4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d19e      	bne.n	8001dac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fa8c 	bl	8002390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e01a      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2220      	movs	r2, #32
 8001e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_I2C_Mem_Write+0x224>)
 8001e96:	400b      	ands	r3, r1
 8001e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e000      	b.n	8001eb8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001eb6:	2302      	movs	r3, #2
  }
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	fe00e800 	.word	0xfe00e800

08001ec4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af02      	add	r7, sp, #8
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	817b      	strh	r3, [r7, #10]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	813b      	strh	r3, [r7, #8]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	f040 80fd 	bne.w	80020e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <HAL_I2C_Mem_Read+0x34>
 8001ef2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0f1      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_I2C_Mem_Read+0x4e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	e0ea      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f1a:	f7ff f9e3 	bl	80012e4 <HAL_GetTick>
 8001f1e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2319      	movs	r3, #25
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 f9af 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0d5      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2222      	movs	r2, #34	; 0x22
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a3a      	ldr	r2, [r7, #32]
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f64:	88f8      	ldrh	r0, [r7, #6]
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4603      	mov	r3, r0
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f000 f913 	bl	80021a0 <I2C_RequestMemoryRead>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0ad      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	2bff      	cmp	r3, #255	; 0xff
 8001f94:	d90e      	bls.n	8001fb4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	4b52      	ldr	r3, [pc, #328]	; (80020f0 <HAL_I2C_Mem_Read+0x22c>)
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 fa91 	bl	80024d4 <I2C_TransferConfig>
 8001fb2:	e00f      	b.n	8001fd4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	8979      	ldrh	r1, [r7, #10]
 8001fc6:	4b4a      	ldr	r3, [pc, #296]	; (80020f0 <HAL_I2C_Mem_Read+0x22c>)
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fa80 	bl	80024d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2104      	movs	r1, #4
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 f956 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e07c      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800200a:	3b01      	subs	r3, #1
 800200c:	b29a      	uxth	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29a      	uxth	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002024:	b29b      	uxth	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d034      	beq.n	8002094 <HAL_I2C_Mem_Read+0x1d0>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d130      	bne.n	8002094 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	2200      	movs	r2, #0
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 f927 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e04d      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	2bff      	cmp	r3, #255	; 0xff
 8002054:	d90e      	bls.n	8002074 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	22ff      	movs	r2, #255	; 0xff
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002060:	b2da      	uxtb	r2, r3
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	2300      	movs	r3, #0
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 fa31 	bl	80024d4 <I2C_TransferConfig>
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fa20 	bl	80024d4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d19a      	bne.n	8001fd4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f974 	bl	8002390 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e01a      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <HAL_I2C_Mem_Read+0x230>)
 80020c6:	400b      	ands	r3, r1
 80020c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2220      	movs	r2, #32
 80020ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80020e6:	2302      	movs	r3, #2
  }
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	80002400 	.word	0x80002400
 80020f4:	fe00e800 	.word	0xfe00e800

080020f8 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af02      	add	r7, sp, #8
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	4608      	mov	r0, r1
 8002102:	4611      	mov	r1, r2
 8002104:	461a      	mov	r2, r3
 8002106:	4603      	mov	r3, r0
 8002108:	817b      	strh	r3, [r7, #10]
 800210a:	460b      	mov	r3, r1
 800210c:	813b      	strh	r3, [r7, #8]
 800210e:	4613      	mov	r3, r2
 8002110:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	8979      	ldrh	r1, [r7, #10]
 8002118:	4b20      	ldr	r3, [pc, #128]	; (800219c <I2C_RequestMemoryWrite+0xa4>)
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f9d7 	bl	80024d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002126:	69fa      	ldr	r2, [r7, #28]
 8002128:	69b9      	ldr	r1, [r7, #24]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f8f0 	bl	8002310 <I2C_WaitOnTXISFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e02c      	b.n	8002194 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002140:	893b      	ldrh	r3, [r7, #8]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	629a      	str	r2, [r3, #40]	; 0x28
 800214a:	e015      	b.n	8002178 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800214c:	893b      	ldrh	r3, [r7, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	b29b      	uxth	r3, r3
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800215a:	69fa      	ldr	r2, [r7, #28]
 800215c:	69b9      	ldr	r1, [r7, #24]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f8d6 	bl	8002310 <I2C_WaitOnTXISFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e012      	b.n	8002194 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800216e:	893b      	ldrh	r3, [r7, #8]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	2200      	movs	r2, #0
 8002180:	2180      	movs	r1, #128	; 0x80
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f884 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	80002000 	.word	0x80002000

080021a0 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	4608      	mov	r0, r1
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	4603      	mov	r3, r0
 80021b0:	817b      	strh	r3, [r7, #10]
 80021b2:	460b      	mov	r3, r1
 80021b4:	813b      	strh	r3, [r7, #8]
 80021b6:	4613      	mov	r3, r2
 80021b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	8979      	ldrh	r1, [r7, #10]
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <I2C_RequestMemoryRead+0xa4>)
 80021c2:	9300      	str	r3, [sp, #0]
 80021c4:	2300      	movs	r3, #0
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 f984 	bl	80024d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	69b9      	ldr	r1, [r7, #24]
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f000 f89d 	bl	8002310 <I2C_WaitOnTXISFlagUntilTimeout>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e02c      	b.n	800223a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021e0:	88fb      	ldrh	r3, [r7, #6]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d105      	bne.n	80021f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021e6:	893b      	ldrh	r3, [r7, #8]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
 80021f0:	e015      	b.n	800221e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021f2:	893b      	ldrh	r3, [r7, #8]
 80021f4:	0a1b      	lsrs	r3, r3, #8
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f883 	bl	8002310 <I2C_WaitOnTXISFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e012      	b.n	800223a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002214:	893b      	ldrh	r3, [r7, #8]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	2200      	movs	r2, #0
 8002226:	2140      	movs	r1, #64	; 0x40
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 f831 	bl	8002290 <I2C_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	80002000 	.word	0x80002000

08002248 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b02      	cmp	r3, #2
 800225c:	d103      	bne.n	8002266 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2200      	movs	r2, #0
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d007      	beq.n	8002284 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	619a      	str	r2, [r3, #24]
  }
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	603b      	str	r3, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022a0:	e022      	b.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d01e      	beq.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022aa:	f7ff f81b 	bl	80012e4 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d302      	bcc.n	80022c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d113      	bne.n	80022e8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f043 0220 	orr.w	r2, r3, #32
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e00f      	b.n	8002308 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	4013      	ands	r3, r2
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	bf0c      	ite	eq
 80022f8:	2301      	moveq	r3, #1
 80022fa:	2300      	movne	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	461a      	mov	r2, r3
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	429a      	cmp	r2, r3
 8002304:	d0cd      	beq.n	80022a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800231c:	e02c      	b.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f870 	bl	8002408 <I2C_IsAcknowledgeFailed>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e02a      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d01e      	beq.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233a:	f7fe ffd3 	bl	80012e4 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	429a      	cmp	r2, r3
 8002348:	d302      	bcc.n	8002350 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d113      	bne.n	8002378 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d1cb      	bne.n	800231e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239c:	e028      	b.n	80023f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	68b9      	ldr	r1, [r7, #8]
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f830 	bl	8002408 <I2C_IsAcknowledgeFailed>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e026      	b.n	8002400 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b2:	f7fe ff97 	bl	80012e4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d113      	bne.n	80023f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023cc:	f043 0220 	orr.w	r2, r3, #32
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e007      	b.n	8002400 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	f003 0320 	and.w	r3, r3, #32
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d1cf      	bne.n	800239e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f003 0310 	and.w	r3, r3, #16
 800241e:	2b10      	cmp	r3, #16
 8002420:	d151      	bne.n	80024c6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002422:	e022      	b.n	800246a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242a:	d01e      	beq.n	800246a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242c:	f7fe ff5a 	bl	80012e4 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d302      	bcc.n	8002442 <I2C_IsAcknowledgeFailed+0x3a>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d113      	bne.n	800246a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	f043 0220 	orr.w	r2, r3, #32
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e02e      	b.n	80024c8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b20      	cmp	r3, #32
 8002476:	d1d5      	bne.n	8002424 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2210      	movs	r2, #16
 800247e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2220      	movs	r2, #32
 8002486:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fedd 	bl	8002248 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6859      	ldr	r1, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <I2C_IsAcknowledgeFailed+0xc8>)
 800249a:	400b      	ands	r3, r1
 800249c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a2:	f043 0204 	orr.w	r2, r3, #4
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	fe00e800 	.word	0xfe00e800

080024d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	460b      	mov	r3, r1
 80024e0:	817b      	strh	r3, [r7, #10]
 80024e2:	4613      	mov	r3, r2
 80024e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	0d5b      	lsrs	r3, r3, #21
 80024f0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <I2C_TransferConfig+0x58>)
 80024f6:	430b      	orrs	r3, r1
 80024f8:	43db      	mvns	r3, r3
 80024fa:	ea02 0103 	and.w	r1, r2, r3
 80024fe:	897b      	ldrh	r3, [r7, #10]
 8002500:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002504:	7a7b      	ldrb	r3, [r7, #9]
 8002506:	041b      	lsls	r3, r3, #16
 8002508:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800250c:	431a      	orrs	r2, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	431a      	orrs	r2, r3
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	431a      	orrs	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	03ff63ff 	.word	0x03ff63ff

08002530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	d138      	bne.n	80025b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002550:	2302      	movs	r3, #2
 8002552:	e032      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2224      	movs	r2, #36	; 0x24
 8002560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0201 	bic.w	r2, r2, #1
 8002572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	683a      	ldr	r2, [r7, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b085      	sub	sp, #20
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d139      	bne.n	8002650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e033      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2224      	movs	r2, #36	; 0x24
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4313      	orrs	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a04      	ldr	r2, [pc, #16]	; (800267c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266e:	6013      	str	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40007000 	.word	0x40007000

08002680 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <HAL_PWREx_GetVoltageRange+0x18>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000

0800269c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026aa:	d130      	bne.n	800270e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026ac:	4b23      	ldr	r3, [pc, #140]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026b8:	d038      	beq.n	800272c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026c2:	4a1e      	ldr	r2, [pc, #120]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2232      	movs	r2, #50	; 0x32
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026d6:	fba2 2303 	umull	r2, r3, r2, r3
 80026da:	0c9b      	lsrs	r3, r3, #18
 80026dc:	3301      	adds	r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e0:	e002      	b.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	3b01      	subs	r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026f4:	d102      	bne.n	80026fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1f2      	bne.n	80026e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002708:	d110      	bne.n	800272c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e00f      	b.n	800272e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d007      	beq.n	800272c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40007000 	.word	0x40007000
 8002740:	20000004 	.word	0x20000004
 8002744:	431bde83 	.word	0x431bde83

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e3d4      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800275a:	4ba1      	ldr	r3, [pc, #644]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002764:	4b9e      	ldr	r3, [pc, #632]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80e4 	beq.w	8002944 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_RCC_OscConfig+0x4a>
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	2b0c      	cmp	r3, #12
 8002786:	f040 808b 	bne.w	80028a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b01      	cmp	r3, #1
 800278e:	f040 8087 	bne.w	80028a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002792:	4b93      	ldr	r3, [pc, #588]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <HAL_RCC_OscConfig+0x62>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e3ac      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1a      	ldr	r2, [r3, #32]
 80027ae:	4b8c      	ldr	r3, [pc, #560]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_RCC_OscConfig+0x7c>
 80027ba:	4b89      	ldr	r3, [pc, #548]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027c2:	e005      	b.n	80027d0 <HAL_RCC_OscConfig+0x88>
 80027c4:	4b86      	ldr	r3, [pc, #536]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d223      	bcs.n	800281c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fd41 	bl	8003260 <RCC_SetFlashLatencyFromMSIRange>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e38d      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e8:	4b7d      	ldr	r3, [pc, #500]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a7c      	ldr	r2, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	4977      	ldr	r1, [pc, #476]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	4972      	ldr	r1, [pc, #456]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002816:	4313      	orrs	r3, r2
 8002818:	604b      	str	r3, [r1, #4]
 800281a:	e025      	b.n	8002868 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800281c:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a6f      	ldr	r2, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002822:	f043 0308 	orr.w	r3, r3, #8
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	496a      	ldr	r1, [pc, #424]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800283a:	4b69      	ldr	r3, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	4965      	ldr	r1, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d109      	bne.n	8002868 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fd01 	bl	8003260 <RCC_SetFlashLatencyFromMSIRange>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e34d      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002868:	f000 fc36 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b5c      	ldr	r3, [pc, #368]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	091b      	lsrs	r3, r3, #4
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	495a      	ldr	r1, [pc, #360]	; (80029e4 <HAL_RCC_OscConfig+0x29c>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <HAL_RCC_OscConfig+0x2a0>)
 8002886:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002888:	4b58      	ldr	r3, [pc, #352]	; (80029ec <HAL_RCC_OscConfig+0x2a4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fcd9 	bl	8001244 <HAL_InitTick>
 8002892:	4603      	mov	r3, r0
 8002894:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d052      	beq.n	8002942 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	e331      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d032      	beq.n	800290e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028a8:	4b4d      	ldr	r3, [pc, #308]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4c      	ldr	r2, [pc, #304]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028b4:	f7fe fd16 	bl	80012e4 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028bc:	f7fe fd12 	bl	80012e4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e31a      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0f0      	beq.n	80028bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a40      	ldr	r2, [pc, #256]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028e0:	f043 0308 	orr.w	r3, r3, #8
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	493b      	ldr	r1, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028f8:	4b39      	ldr	r3, [pc, #228]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	021b      	lsls	r3, r3, #8
 8002906:	4936      	ldr	r1, [pc, #216]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
 800290c:	e01a      	b.n	8002944 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800290e:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a33      	ldr	r2, [pc, #204]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800291a:	f7fe fce3 	bl	80012e4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002922:	f7fe fcdf 	bl	80012e4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e2e7      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002934:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x1da>
 8002940:	e000      	b.n	8002944 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002942:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d074      	beq.n	8002a3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2b08      	cmp	r3, #8
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x21a>
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2b0c      	cmp	r3, #12
 800295a:	d10e      	bne.n	800297a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d10b      	bne.n	800297a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002962:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d064      	beq.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d160      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e2c4      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x24a>
 8002984:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a15      	ldr	r2, [pc, #84]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	e01d      	b.n	80029ce <HAL_RCC_OscConfig+0x286>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800299a:	d10c      	bne.n	80029b6 <HAL_RCC_OscConfig+0x26e>
 800299c:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0f      	ldr	r2, [pc, #60]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0c      	ldr	r2, [pc, #48]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e00b      	b.n	80029ce <HAL_RCC_OscConfig+0x286>
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a09      	ldr	r2, [pc, #36]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x298>)
 80029c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fc85 	bl	80012e4 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029dc:	e011      	b.n	8002a02 <HAL_RCC_OscConfig+0x2ba>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	0800562c 	.word	0x0800562c
 80029e8:	20000004 	.word	0x20000004
 80029ec:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7fe fc78 	bl	80012e4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	; 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e280      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a02:	4baf      	ldr	r3, [pc, #700]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x2a8>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a10:	f7fe fc68 	bl	80012e4 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7fe fc64 	bl	80012e4 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e26c      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a2a:	4ba5      	ldr	r3, [pc, #660]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0x2d0>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d060      	beq.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_OscConfig+0x310>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	d119      	bne.n	8002a86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d116      	bne.n	8002a86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a58:	4b99      	ldr	r3, [pc, #612]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_OscConfig+0x328>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e249      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a70:	4b93      	ldr	r3, [pc, #588]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	061b      	lsls	r3, r3, #24
 8002a7e:	4990      	ldr	r1, [pc, #576]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a84:	e040      	b.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d023      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8e:	4b8c      	ldr	r3, [pc, #560]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a8b      	ldr	r2, [pc, #556]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fe fc23 	bl	80012e4 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fc1f 	bl	80012e4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e227      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab4:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	497c      	ldr	r1, [pc, #496]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
 8002ad4:	e018      	b.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b7a      	ldr	r3, [pc, #488]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a79      	ldr	r2, [pc, #484]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fbff 	bl	80012e4 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aea:	f7fe fbfb 	bl	80012e4 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e203      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002afc:	4b70      	ldr	r3, [pc, #448]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f0      	bne.n	8002aea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d03c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b22:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7fe fbda 	bl	80012e4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7fe fbd6 	bl	80012e4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e1de      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b46:	4b5e      	ldr	r3, [pc, #376]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ef      	beq.n	8002b34 <HAL_RCC_OscConfig+0x3ec>
 8002b54:	e01b      	b.n	8002b8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b56:	4b5a      	ldr	r3, [pc, #360]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5c:	4a58      	ldr	r2, [pc, #352]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f023 0301 	bic.w	r3, r3, #1
 8002b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b66:	f7fe fbbd 	bl	80012e4 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b6e:	f7fe fbb9 	bl	80012e4 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e1c1      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b80:	4b4f      	ldr	r3, [pc, #316]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1ef      	bne.n	8002b6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 80a6 	beq.w	8002ce8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10d      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bac:	4b44      	ldr	r3, [pc, #272]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb0:	4a43      	ldr	r2, [pc, #268]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bb8:	4b41      	ldr	r3, [pc, #260]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d118      	bne.n	8002c06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd4:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a3a      	ldr	r2, [pc, #232]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be0:	f7fe fb80 	bl	80012e4 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7fe fb7c 	bl	80012e4 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e184      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bfa:	4b32      	ldr	r3, [pc, #200]	; (8002cc4 <HAL_RCC_OscConfig+0x57c>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d108      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4d8>
 8002c0e:	4b2c      	ldr	r3, [pc, #176]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	4a2a      	ldr	r2, [pc, #168]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c1e:	e024      	b.n	8002c6a <HAL_RCC_OscConfig+0x522>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b05      	cmp	r3, #5
 8002c26:	d110      	bne.n	8002c4a <HAL_RCC_OscConfig+0x502>
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2e:	4a24      	ldr	r2, [pc, #144]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c30:	f043 0304 	orr.w	r3, r3, #4
 8002c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c38:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c48:	e00f      	b.n	8002c6a <HAL_RCC_OscConfig+0x522>
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c50:	4a1b      	ldr	r2, [pc, #108]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c60:	4a17      	ldr	r2, [pc, #92]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c72:	f7fe fb37 	bl	80012e4 <HAL_GetTick>
 8002c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c78:	e00a      	b.n	8002c90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fb33 	bl	80012e4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e139      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c90:	4b0b      	ldr	r3, [pc, #44]	; (8002cc0 <HAL_RCC_OscConfig+0x578>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ed      	beq.n	8002c7a <HAL_RCC_OscConfig+0x532>
 8002c9e:	e01a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fb20 	bl	80012e4 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca6:	e00f      	b.n	8002cc8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fb1c 	bl	80012e4 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d906      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e122      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
 8002cbe:	bf00      	nop
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cc8:	4b90      	ldr	r3, [pc, #576]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e8      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd6:	7ffb      	ldrb	r3, [r7, #31]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d105      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cdc:	4b8b      	ldr	r3, [pc, #556]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a8a      	ldr	r2, [pc, #552]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8108 	beq.w	8002f02 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	f040 80d0 	bne.w	8002e9c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cfc:	4b83      	ldr	r3, [pc, #524]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d130      	bne.n	8002d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d127      	bne.n	8002d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d11f      	bne.n	8002d72 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d3c:	2a07      	cmp	r2, #7
 8002d3e:	bf14      	ite	ne
 8002d40:	2201      	movne	r2, #1
 8002d42:	2200      	moveq	r2, #0
 8002d44:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d113      	bne.n	8002d72 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d06e      	beq.n	8002e50 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	d069      	beq.n	8002e4c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d78:	4b64      	ldr	r3, [pc, #400]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d84:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0b7      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d94:	4b5d      	ldr	r3, [pc, #372]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a5c      	ldr	r2, [pc, #368]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002d9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002da0:	f7fe faa0 	bl	80012e4 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002da8:	f7fe fa9c 	bl	80012e4 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0a4      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dba:	4b54      	ldr	r3, [pc, #336]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc6:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	4b51      	ldr	r3, [pc, #324]	; (8002f10 <HAL_RCC_OscConfig+0x7c8>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dd6:	3a01      	subs	r2, #1
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	4311      	orrs	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de0:	0212      	lsls	r2, r2, #8
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002de8:	0852      	lsrs	r2, r2, #1
 8002dea:	3a01      	subs	r2, #1
 8002dec:	0552      	lsls	r2, r2, #21
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002df4:	0852      	lsrs	r2, r2, #1
 8002df6:	3a01      	subs	r2, #1
 8002df8:	0652      	lsls	r2, r2, #25
 8002dfa:	4311      	orrs	r1, r2
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e00:	0912      	lsrs	r2, r2, #4
 8002e02:	0452      	lsls	r2, r2, #17
 8002e04:	430a      	orrs	r2, r1
 8002e06:	4941      	ldr	r1, [pc, #260]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3e      	ldr	r2, [pc, #248]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e18:	4b3c      	ldr	r3, [pc, #240]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a3b      	ldr	r2, [pc, #236]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e24:	f7fe fa5e 	bl	80012e4 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fa5a 	bl	80012e4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e062      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4a:	e05a      	b.n	8002f02 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e059      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e50:	4b2e      	ldr	r3, [pc, #184]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d152      	bne.n	8002f02 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e5c:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2a      	ldr	r2, [pc, #168]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	4a27      	ldr	r2, [pc, #156]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e74:	f7fe fa36 	bl	80012e4 <HAL_GetTick>
 8002e78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7c:	f7fe fa32 	bl	80012e4 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e03a      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e8e:	4b1f      	ldr	r3, [pc, #124]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCC_OscConfig+0x734>
 8002e9a:	e032      	b.n	8002f02 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	2b0c      	cmp	r3, #12
 8002ea0:	d02d      	beq.n	8002efe <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea2:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a19      	ldr	r2, [pc, #100]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ea8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eac:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002eae:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d105      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eba:	4b14      	ldr	r3, [pc, #80]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ec0:	f023 0303 	bic.w	r3, r3, #3
 8002ec4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ecc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7fe fa05 	bl	80012e4 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ede:	f7fe fa01 	bl	80012e4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e009      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_OscConfig+0x7c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f0      	bne.n	8002ede <HAL_RCC_OscConfig+0x796>
 8002efc:	e001      	b.n	8002f02 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3720      	adds	r7, #32
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	f99d808c 	.word	0xf99d808c

08002f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0c8      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b66      	ldr	r3, [pc, #408]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4961      	ldr	r1, [pc, #388]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b0      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d04c      	beq.n	8002ffe <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f6c:	4b56      	ldr	r3, [pc, #344]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d121      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e09e      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d107      	bne.n	8002f94 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f84:	4b50      	ldr	r3, [pc, #320]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d115      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e092      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f9c:	4b4a      	ldr	r3, [pc, #296]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d109      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e086      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fac:	4b46      	ldr	r3, [pc, #280]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e07e      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fbc:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 0203 	bic.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	493f      	ldr	r1, [pc, #252]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fce:	f7fe f989 	bl	80012e4 <HAL_GetTick>
 8002fd2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd4:	e00a      	b.n	8002fec <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd6:	f7fe f985 	bl	80012e4 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e066      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fec:	4b36      	ldr	r3, [pc, #216]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	f003 020c 	and.w	r2, r3, #12
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d1eb      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	492c      	ldr	r1, [pc, #176]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800301c:	4b29      	ldr	r3, [pc, #164]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	429a      	cmp	r2, r3
 8003028:	d210      	bcs.n	800304c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302a:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0207 	bic.w	r2, r3, #7
 8003032:	4924      	ldr	r1, [pc, #144]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <HAL_RCC_ClockConfig+0x1b0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e036      	b.n	80030ba <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4918      	ldr	r1, [pc, #96]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4910      	ldr	r1, [pc, #64]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308a:	f000 f825 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCC_ClockConfig+0x1b4>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490c      	ldr	r1, [pc, #48]	; (80030cc <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030aa:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe f8c8 	bl	8001244 <HAL_InitTick>
 80030b4:	4603      	mov	r3, r0
 80030b6:	72fb      	strb	r3, [r7, #11]

  return status;
 80030b8:	7afb      	ldrb	r3, [r7, #11]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40022000 	.word	0x40022000
 80030c8:	40021000 	.word	0x40021000
 80030cc:	0800562c 	.word	0x0800562c
 80030d0:	20000004 	.word	0x20000004
 80030d4:	20000008 	.word	0x20000008

080030d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	; 0x24
 80030dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61fb      	str	r3, [r7, #28]
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e6:	4b3e      	ldr	r3, [pc, #248]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f0:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x34>
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d121      	bne.n	800314a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d11e      	bne.n	800314a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800310c:	4b34      	ldr	r3, [pc, #208]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0308 	and.w	r3, r3, #8
 8003114:	2b00      	cmp	r3, #0
 8003116:	d107      	bne.n	8003128 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e005      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	f003 030f 	and.w	r3, r3, #15
 8003132:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003134:	4a2b      	ldr	r2, [pc, #172]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003148:	e00a      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d102      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	e004      	b.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	2b08      	cmp	r3, #8
 800315a:	d101      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800315c:	4b23      	ldr	r3, [pc, #140]	; (80031ec <HAL_RCC_GetSysClockFreq+0x114>)
 800315e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	2b0c      	cmp	r3, #12
 8003164:	d134      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003166:	4b1e      	ldr	r3, [pc, #120]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f003 0303 	and.w	r3, r3, #3
 800316e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d003      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0xa6>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b03      	cmp	r3, #3
 800317a:	d003      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0xac>
 800317c:	e005      	b.n	800318a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003180:	617b      	str	r3, [r7, #20]
      break;
 8003182:	e005      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003184:	4b19      	ldr	r3, [pc, #100]	; (80031ec <HAL_RCC_GetSysClockFreq+0x114>)
 8003186:	617b      	str	r3, [r7, #20]
      break;
 8003188:	e002      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	617b      	str	r3, [r7, #20]
      break;
 800318e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	3301      	adds	r3, #1
 800319c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	fb02 f203 	mul.w	r2, r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	0e5b      	lsrs	r3, r3, #25
 80031bc:	f003 0303 	and.w	r3, r3, #3
 80031c0:	3301      	adds	r3, #1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031d0:	69bb      	ldr	r3, [r7, #24]
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08005644 	.word	0x08005644
 80031e8:	00f42400 	.word	0x00f42400
 80031ec:	007a1200 	.word	0x007a1200

080031f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_GetHCLKFreq+0x14>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000004 	.word	0x20000004

08003208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800320c:	f7ff fff0 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 8003210:	4602      	mov	r2, r0
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4904      	ldr	r1, [pc, #16]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x28>)
 800321e:	5ccb      	ldrb	r3, [r1, r3]
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003228:	4618      	mov	r0, r3
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40021000 	.word	0x40021000
 8003230:	0800563c 	.word	0x0800563c

08003234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003238:	f7ff ffda 	bl	80031f0 <HAL_RCC_GetHCLKFreq>
 800323c:	4602      	mov	r2, r0
 800323e:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	0adb      	lsrs	r3, r3, #11
 8003244:	f003 0307 	and.w	r3, r3, #7
 8003248:	4904      	ldr	r1, [pc, #16]	; (800325c <HAL_RCC_GetPCLK2Freq+0x28>)
 800324a:	5ccb      	ldrb	r3, [r1, r3]
 800324c:	f003 031f 	and.w	r3, r3, #31
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40021000 	.word	0x40021000
 800325c:	0800563c 	.word	0x0800563c

08003260 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003268:	2300      	movs	r3, #0
 800326a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800326c:	4b2a      	ldr	r3, [pc, #168]	; (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003278:	f7ff fa02 	bl	8002680 <HAL_PWREx_GetVoltageRange>
 800327c:	6178      	str	r0, [r7, #20]
 800327e:	e014      	b.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003284:	4a24      	ldr	r2, [pc, #144]	; (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328a:	6593      	str	r3, [r2, #88]	; 0x58
 800328c:	4b22      	ldr	r3, [pc, #136]	; (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003298:	f7ff f9f2 	bl	8002680 <HAL_PWREx_GetVoltageRange>
 800329c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a2:	4a1d      	ldr	r2, [pc, #116]	; (8003318 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b0:	d10b      	bne.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b80      	cmp	r3, #128	; 0x80
 80032b6:	d919      	bls.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2ba0      	cmp	r3, #160	; 0xa0
 80032bc:	d902      	bls.n	80032c4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032be:	2302      	movs	r3, #2
 80032c0:	613b      	str	r3, [r7, #16]
 80032c2:	e013      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c4:	2301      	movs	r3, #1
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	e010      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b80      	cmp	r3, #128	; 0x80
 80032ce:	d902      	bls.n	80032d6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032d0:	2303      	movs	r3, #3
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e00a      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d102      	bne.n	80032e2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032dc:	2302      	movs	r3, #2
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	e004      	b.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b70      	cmp	r3, #112	; 0x70
 80032e6:	d101      	bne.n	80032ec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e8:	2301      	movs	r3, #1
 80032ea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032ec:	4b0b      	ldr	r3, [pc, #44]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f023 0207 	bic.w	r2, r3, #7
 80032f4:	4909      	ldr	r1, [pc, #36]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032fc:	4b07      	ldr	r3, [pc, #28]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	40022000 	.word	0x40022000

08003320 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003328:	2300      	movs	r3, #0
 800332a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800332c:	2300      	movs	r3, #0
 800332e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003338:	2b00      	cmp	r3, #0
 800333a:	d041      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003340:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003344:	d02a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003346:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800334a:	d824      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800334c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003350:	d008      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003352:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003356:	d81e      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800335c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003360:	d010      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003362:	e018      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003364:	4b86      	ldr	r3, [pc, #536]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a85      	ldr	r2, [pc, #532]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800336e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003370:	e015      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f000 facb 	bl	8003914 <RCCEx_PLLSAI1_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003382:	e00c      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3320      	adds	r3, #32
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fbb6 	bl	8003afc <RCCEx_PLLSAI2_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	74fb      	strb	r3, [r7, #19]
      break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800339c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a4:	4b76      	ldr	r3, [pc, #472]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b2:	4973      	ldr	r1, [pc, #460]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ba:	e001      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d041      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033d4:	d02a      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80033d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033da:	d824      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033e0:	d008      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80033e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033e6:	d81e      	bhi.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00a      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80033ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033f0:	d010      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033f2:	e018      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033f4:	4b62      	ldr	r3, [pc, #392]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a61      	ldr	r2, [pc, #388]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003400:	e015      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3304      	adds	r3, #4
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fa83 	bl	8003914 <RCCEx_PLLSAI1_Config>
 800340e:	4603      	mov	r3, r0
 8003410:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003412:	e00c      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3320      	adds	r3, #32
 8003418:	2100      	movs	r1, #0
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fb6e 	bl	8003afc <RCCEx_PLLSAI2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003424:	e003      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	74fb      	strb	r3, [r7, #19]
      break;
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800342c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800342e:	7cfb      	ldrb	r3, [r7, #19]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10b      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003434:	4b52      	ldr	r3, [pc, #328]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003442:	494f      	ldr	r1, [pc, #316]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800344a:	e001      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	7cfb      	ldrb	r3, [r7, #19]
 800344e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a0 	beq.w	800359e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003462:	4b47      	ldr	r3, [pc, #284]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003472:	2300      	movs	r3, #0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00d      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003478:	4b41      	ldr	r3, [pc, #260]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4a40      	ldr	r2, [pc, #256]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
 8003484:	4b3e      	ldr	r3, [pc, #248]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003490:	2301      	movs	r3, #1
 8003492:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003494:	4b3b      	ldr	r3, [pc, #236]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a3a      	ldr	r2, [pc, #232]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800349a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800349e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034a0:	f7fd ff20 	bl	80012e4 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034a6:	e009      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034a8:	f7fd ff1c 	bl	80012e4 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d902      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	74fb      	strb	r3, [r7, #19]
        break;
 80034ba:	e005      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034bc:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ef      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d15c      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80034ce:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034d8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01f      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d019      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	4a20      	ldr	r2, [pc, #128]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003518:	4a19      	ldr	r2, [pc, #100]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d016      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fd fedb 	bl	80012e4 <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003530:	e00b      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fd fed7 	bl	80012e4 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003540:	4293      	cmp	r3, r2
 8003542:	d902      	bls.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	74fb      	strb	r3, [r7, #19]
            break;
 8003548:	e006      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800354a:	4b0d      	ldr	r3, [pc, #52]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0ec      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003564:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356e:	4904      	ldr	r1, [pc, #16]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003576:	e009      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	74bb      	strb	r3, [r7, #18]
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
 800358a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358c:	7c7b      	ldrb	r3, [r7, #17]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b9e      	ldr	r3, [pc, #632]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a9d      	ldr	r2, [pc, #628]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035aa:	4b98      	ldr	r3, [pc, #608]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	f023 0203 	bic.w	r2, r3, #3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	4994      	ldr	r1, [pc, #592]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035cc:	4b8f      	ldr	r3, [pc, #572]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 020c 	bic.w	r2, r3, #12
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	498c      	ldr	r1, [pc, #560]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035ee:	4b87      	ldr	r3, [pc, #540]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fc:	4983      	ldr	r1, [pc, #524]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003610:	4b7e      	ldr	r3, [pc, #504]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	497b      	ldr	r1, [pc, #492]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0310 	and.w	r3, r3, #16
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003632:	4b76      	ldr	r3, [pc, #472]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003640:	4972      	ldr	r1, [pc, #456]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003654:	4b6d      	ldr	r3, [pc, #436]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003662:	496a      	ldr	r1, [pc, #424]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003676:	4b65      	ldr	r3, [pc, #404]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003684:	4961      	ldr	r1, [pc, #388]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003698:	4b5c      	ldr	r3, [pc, #368]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	4959      	ldr	r1, [pc, #356]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036ba:	4b54      	ldr	r3, [pc, #336]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c8:	4950      	ldr	r1, [pc, #320]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036dc:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ea:	4948      	ldr	r1, [pc, #288]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036fe:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370c:	493f      	ldr	r1, [pc, #252]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	4313      	orrs	r3, r2
 8003710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d028      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372e:	4937      	ldr	r1, [pc, #220]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800373e:	d106      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003740:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	4a31      	ldr	r2, [pc, #196]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800374a:	60d3      	str	r3, [r2, #12]
 800374c:	e011      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003756:	d10c      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2101      	movs	r1, #1
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f8d8 	bl	8003914 <RCCEx_PLLSAI1_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d028      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800377e:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003784:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	491f      	ldr	r1, [pc, #124]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800379c:	d106      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800379e:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4a1a      	ldr	r2, [pc, #104]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a8:	60d3      	str	r3, [r2, #12]
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b4:	d10c      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	3304      	adds	r3, #4
 80037ba:	2101      	movs	r1, #1
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f8a9 	bl	8003914 <RCCEx_PLLSAI1_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80037cc:	7cfb      	ldrb	r3, [r7, #19]
 80037ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d02b      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037dc:	4b0b      	ldr	r3, [pc, #44]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	4908      	ldr	r1, [pc, #32]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037fa:	d109      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a02      	ldr	r2, [pc, #8]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	e014      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003818:	d10c      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3304      	adds	r3, #4
 800381e:	2101      	movs	r1, #1
 8003820:	4618      	mov	r0, r3
 8003822:	f000 f877 	bl	8003914 <RCCEx_PLLSAI1_Config>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d02f      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003840:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800384e:	4928      	ldr	r1, [pc, #160]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800385a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800385e:	d10d      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	2102      	movs	r1, #2
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f854 	bl	8003914 <RCCEx_PLLSAI1_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d014      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	74bb      	strb	r3, [r7, #18]
 800387a:	e011      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003880:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003884:	d10c      	bne.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3320      	adds	r3, #32
 800388a:	2102      	movs	r1, #2
 800388c:	4618      	mov	r0, r3
 800388e:	f000 f935 	bl	8003afc <RCCEx_PLLSAI2_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003896:	7cfb      	ldrb	r3, [r7, #19]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800389c:	7cfb      	ldrb	r3, [r7, #19]
 800389e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ba:	490d      	ldr	r1, [pc, #52]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00b      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038de:	4904      	ldr	r1, [pc, #16]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40021000 	.word	0x40021000

080038f4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038fe:	f043 0304 	orr.w	r3, r3, #4
 8003902:	6013      	str	r3, [r2, #0]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000

08003914 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003922:	4b75      	ldr	r3, [pc, #468]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d018      	beq.n	8003960 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800392e:	4b72      	ldr	r3, [pc, #456]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0203 	and.w	r2, r3, #3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d10d      	bne.n	800395a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
       ||
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003946:	4b6c      	ldr	r3, [pc, #432]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
       ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d047      	beq.n	80039ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	e044      	b.n	80039ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d018      	beq.n	800399a <RCCEx_PLLSAI1_Config+0x86>
 8003968:	2b03      	cmp	r3, #3
 800396a:	d825      	bhi.n	80039b8 <RCCEx_PLLSAI1_Config+0xa4>
 800396c:	2b01      	cmp	r3, #1
 800396e:	d002      	beq.n	8003976 <RCCEx_PLLSAI1_Config+0x62>
 8003970:	2b02      	cmp	r3, #2
 8003972:	d009      	beq.n	8003988 <RCCEx_PLLSAI1_Config+0x74>
 8003974:	e020      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003976:	4b60      	ldr	r3, [pc, #384]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d11d      	bne.n	80039be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003986:	e01a      	b.n	80039be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003988:	4b5b      	ldr	r3, [pc, #364]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d116      	bne.n	80039c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003998:	e013      	b.n	80039c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800399a:	4b57      	ldr	r3, [pc, #348]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10f      	bne.n	80039c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039a6:	4b54      	ldr	r3, [pc, #336]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d109      	bne.n	80039c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039b6:	e006      	b.n	80039c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e004      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039be:	bf00      	nop
 80039c0:	e002      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039c2:	bf00      	nop
 80039c4:	e000      	b.n	80039c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10d      	bne.n	80039ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ce:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	430b      	orrs	r3, r1
 80039e4:	4944      	ldr	r1, [pc, #272]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d17d      	bne.n	8003aec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039f0:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a40      	ldr	r2, [pc, #256]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fc:	f7fd fc72 	bl	80012e4 <HAL_GetTick>
 8003a00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a02:	e009      	b.n	8003a18 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a04:	f7fd fc6e 	bl	80012e4 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d902      	bls.n	8003a18 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	73fb      	strb	r3, [r7, #15]
        break;
 8003a16:	e005      	b.n	8003a24 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1ef      	bne.n	8003a04 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a24:	7bfb      	ldrb	r3, [r7, #15]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d160      	bne.n	8003aec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d111      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a30:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6892      	ldr	r2, [r2, #8]
 8003a40:	0211      	lsls	r1, r2, #8
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68d2      	ldr	r2, [r2, #12]
 8003a46:	0912      	lsrs	r2, r2, #4
 8003a48:	0452      	lsls	r2, r2, #17
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	492a      	ldr	r1, [pc, #168]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	610b      	str	r3, [r1, #16]
 8003a52:	e027      	b.n	8003aa4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d112      	bne.n	8003a80 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a5a:	4b27      	ldr	r3, [pc, #156]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003a62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6892      	ldr	r2, [r2, #8]
 8003a6a:	0211      	lsls	r1, r2, #8
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6912      	ldr	r2, [r2, #16]
 8003a70:	0852      	lsrs	r2, r2, #1
 8003a72:	3a01      	subs	r2, #1
 8003a74:	0552      	lsls	r2, r2, #21
 8003a76:	430a      	orrs	r2, r1
 8003a78:	491f      	ldr	r1, [pc, #124]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	610b      	str	r3, [r1, #16]
 8003a7e:	e011      	b.n	8003aa4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6892      	ldr	r2, [r2, #8]
 8003a90:	0211      	lsls	r1, r2, #8
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6952      	ldr	r2, [r2, #20]
 8003a96:	0852      	lsrs	r2, r2, #1
 8003a98:	3a01      	subs	r2, #1
 8003a9a:	0652      	lsls	r2, r2, #25
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	4916      	ldr	r1, [pc, #88]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aaa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003aae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fd fc18 	bl	80012e4 <HAL_GetTick>
 8003ab4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab6:	e009      	b.n	8003acc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ab8:	f7fd fc14 	bl	80012e4 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d902      	bls.n	8003acc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aca:	e005      	b.n	8003ad8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ef      	beq.n	8003ab8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ade:	4b06      	ldr	r3, [pc, #24]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	4904      	ldr	r1, [pc, #16]	; (8003af8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000

08003afc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b0a:	4b6a      	ldr	r3, [pc, #424]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d018      	beq.n	8003b48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b16:	4b67      	ldr	r3, [pc, #412]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0203 	and.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d10d      	bne.n	8003b42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
       ||
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b2e:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
       ||
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d047      	beq.n	8003bd2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
 8003b46:	e044      	b.n	8003bd2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b03      	cmp	r3, #3
 8003b4e:	d018      	beq.n	8003b82 <RCCEx_PLLSAI2_Config+0x86>
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d825      	bhi.n	8003ba0 <RCCEx_PLLSAI2_Config+0xa4>
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d002      	beq.n	8003b5e <RCCEx_PLLSAI2_Config+0x62>
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d009      	beq.n	8003b70 <RCCEx_PLLSAI2_Config+0x74>
 8003b5c:	e020      	b.n	8003ba0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003b5e:	4b55      	ldr	r3, [pc, #340]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d11d      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b6e:	e01a      	b.n	8003ba6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b70:	4b50      	ldr	r3, [pc, #320]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d116      	bne.n	8003baa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b80:	e013      	b.n	8003baa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b82:	4b4c      	ldr	r3, [pc, #304]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b8e:	4b49      	ldr	r3, [pc, #292]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b9e:	e006      	b.n	8003bae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	e004      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e002      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003baa:	bf00      	nop
 8003bac:	e000      	b.n	8003bb0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003bae:	bf00      	nop
    }

    if(status == HAL_OK)
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10d      	bne.n	8003bd2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003bb6:	4b3f      	ldr	r3, [pc, #252]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	4939      	ldr	r1, [pc, #228]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d167      	bne.n	8003ca8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003bd8:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a35      	ldr	r2, [pc, #212]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fd fb7e 	bl	80012e4 <HAL_GetTick>
 8003be8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003bea:	e009      	b.n	8003c00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003bec:	f7fd fb7a 	bl	80012e4 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	73fb      	strb	r3, [r7, #15]
        break;
 8003bfe:	e005      	b.n	8003c0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c00:	4b2c      	ldr	r3, [pc, #176]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1ef      	bne.n	8003bec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d14a      	bne.n	8003ca8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d111      	bne.n	8003c3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c18:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	6892      	ldr	r2, [r2, #8]
 8003c28:	0211      	lsls	r1, r2, #8
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68d2      	ldr	r2, [r2, #12]
 8003c2e:	0912      	lsrs	r2, r2, #4
 8003c30:	0452      	lsls	r2, r2, #17
 8003c32:	430a      	orrs	r2, r1
 8003c34:	491f      	ldr	r1, [pc, #124]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	614b      	str	r3, [r1, #20]
 8003c3a:	e011      	b.n	8003c60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003c44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6892      	ldr	r2, [r2, #8]
 8003c4c:	0211      	lsls	r1, r2, #8
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6912      	ldr	r2, [r2, #16]
 8003c52:	0852      	lsrs	r2, r2, #1
 8003c54:	3a01      	subs	r2, #1
 8003c56:	0652      	lsls	r2, r2, #25
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	4916      	ldr	r1, [pc, #88]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c60:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a13      	ldr	r2, [pc, #76]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6c:	f7fd fb3a 	bl	80012e4 <HAL_GetTick>
 8003c70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c72:	e009      	b.n	8003c88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c74:	f7fd fb36 	bl	80012e4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d902      	bls.n	8003c88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	73fb      	strb	r3, [r7, #15]
          break;
 8003c86:	e005      	b.n	8003c94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c88:	4b0a      	ldr	r3, [pc, #40]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ef      	beq.n	8003c74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c9a:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	4904      	ldr	r1, [pc, #16]	; (8003cb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000

08003cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e049      	b.n	8003d5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd f8ea 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 f9e6 	bl	80040c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e047      	b.n	8003e10 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a23      	ldr	r2, [pc, #140]	; (8003e1c <HAL_TIM_Base_Start+0xb4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01d      	beq.n	8003dce <HAL_TIM_Base_Start+0x66>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d9a:	d018      	beq.n	8003dce <HAL_TIM_Base_Start+0x66>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1f      	ldr	r2, [pc, #124]	; (8003e20 <HAL_TIM_Base_Start+0xb8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d013      	beq.n	8003dce <HAL_TIM_Base_Start+0x66>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a1e      	ldr	r2, [pc, #120]	; (8003e24 <HAL_TIM_Base_Start+0xbc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00e      	beq.n	8003dce <HAL_TIM_Base_Start+0x66>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <HAL_TIM_Base_Start+0xc0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_TIM_Base_Start+0x66>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <HAL_TIM_Base_Start+0xc4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d004      	beq.n	8003dce <HAL_TIM_Base_Start+0x66>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <HAL_TIM_Base_Start+0xc8>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d115      	bne.n	8003dfa <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_TIM_Base_Start+0xcc>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b06      	cmp	r3, #6
 8003dde:	d015      	beq.n	8003e0c <HAL_TIM_Base_Start+0xa4>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003de6:	d011      	beq.n	8003e0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df8:	e008      	b.n	8003e0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e000      	b.n	8003e0e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	40012c00 	.word	0x40012c00
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40013400 	.word	0x40013400
 8003e30:	40014000 	.word	0x40014000
 8003e34:	00010007 	.word	0x00010007

08003e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d122      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d11b      	bne.n	8003e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f06f 0202 	mvn.w	r2, #2
 8003e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f905 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003e80:	e005      	b.n	8003e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8f7 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f908 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b04      	cmp	r3, #4
 8003ea0:	d122      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d11b      	bne.n	8003ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0204 	mvn.w	r2, #4
 8003eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8db 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003ed4:	e005      	b.n	8003ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8cd 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f8de 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d122      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d11b      	bne.n	8003f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f06f 0208 	mvn.w	r2, #8
 8003f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2204      	movs	r2, #4
 8003f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8b1 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003f28:	e005      	b.n	8003f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f8a3 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f8b4 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d122      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d11b      	bne.n	8003f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0210 	mvn.w	r2, #16
 8003f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2208      	movs	r2, #8
 8003f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 f887 	bl	800408a <HAL_TIM_IC_CaptureCallback>
 8003f7c:	e005      	b.n	8003f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f879 	bl	8004076 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f88a 	bl	800409e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d10e      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d107      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f06f 0201 	mvn.w	r2, #1
 8003fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc fe34 	bl	8000c24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd4:	2b80      	cmp	r3, #128	; 0x80
 8003fd6:	d107      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f99c 	bl	8004320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff6:	d10e      	bne.n	8004016 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d107      	bne.n	8004016 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800400e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f98f 	bl	8004334 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d10e      	bne.n	8004042 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b40      	cmp	r3, #64	; 0x40
 8004030:	d107      	bne.n	8004042 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800403a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f838 	bl	80040b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d10e      	bne.n	800406e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b20      	cmp	r3, #32
 800405c:	d107      	bne.n	800406e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f06f 0220 	mvn.w	r2, #32
 8004066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f94f 	bl	800430c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004076:	b480      	push	{r7}
 8004078:	b083      	sub	sp, #12
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a40      	ldr	r2, [pc, #256]	; (80041dc <TIM_Base_SetConfig+0x114>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d013      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e6:	d00f      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a3d      	ldr	r2, [pc, #244]	; (80041e0 <TIM_Base_SetConfig+0x118>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00b      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a3c      	ldr	r2, [pc, #240]	; (80041e4 <TIM_Base_SetConfig+0x11c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d007      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a3b      	ldr	r2, [pc, #236]	; (80041e8 <TIM_Base_SetConfig+0x120>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d003      	beq.n	8004108 <TIM_Base_SetConfig+0x40>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a3a      	ldr	r2, [pc, #232]	; (80041ec <TIM_Base_SetConfig+0x124>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d108      	bne.n	800411a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a2f      	ldr	r2, [pc, #188]	; (80041dc <TIM_Base_SetConfig+0x114>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01f      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004128:	d01b      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a2c      	ldr	r2, [pc, #176]	; (80041e0 <TIM_Base_SetConfig+0x118>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d017      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a2b      	ldr	r2, [pc, #172]	; (80041e4 <TIM_Base_SetConfig+0x11c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a2a      	ldr	r2, [pc, #168]	; (80041e8 <TIM_Base_SetConfig+0x120>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a29      	ldr	r2, [pc, #164]	; (80041ec <TIM_Base_SetConfig+0x124>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a28      	ldr	r2, [pc, #160]	; (80041f0 <TIM_Base_SetConfig+0x128>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a27      	ldr	r2, [pc, #156]	; (80041f4 <TIM_Base_SetConfig+0x12c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0x9a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a26      	ldr	r2, [pc, #152]	; (80041f8 <TIM_Base_SetConfig+0x130>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a10      	ldr	r2, [pc, #64]	; (80041dc <TIM_Base_SetConfig+0x114>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00f      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <TIM_Base_SetConfig+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00b      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <TIM_Base_SetConfig+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d007      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <TIM_Base_SetConfig+0x12c>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_Base_SetConfig+0xf8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0f      	ldr	r2, [pc, #60]	; (80041f8 <TIM_Base_SetConfig+0x130>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d103      	bne.n	80041c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	615a      	str	r2, [r3, #20]
}
 80041ce:	bf00      	nop
 80041d0:	3714      	adds	r7, #20
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40012c00 	.word	0x40012c00
 80041e0:	40000400 	.word	0x40000400
 80041e4:	40000800 	.word	0x40000800
 80041e8:	40000c00 	.word	0x40000c00
 80041ec:	40013400 	.word	0x40013400
 80041f0:	40014000 	.word	0x40014000
 80041f4:	40014400 	.word	0x40014400
 80041f8:	40014800 	.word	0x40014800

080041fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004210:	2302      	movs	r3, #2
 8004212:	e068      	b.n	80042e6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a2e      	ldr	r2, [pc, #184]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a2d      	ldr	r2, [pc, #180]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d108      	bne.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800424e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d01d      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004286:	d018      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d013      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a1a      	ldr	r2, [pc, #104]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00e      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a18      	ldr	r2, [pc, #96]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d009      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d004      	beq.n	80042ba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10c      	bne.n	80042d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40012c00 	.word	0x40012c00
 80042f8:	40013400 	.word	0x40013400
 80042fc:	40000400 	.word	0x40000400
 8004300:	40000800 	.word	0x40000800
 8004304:	40000c00 	.word	0x40000c00
 8004308:	40014000 	.word	0x40014000

0800430c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d101      	bne.n	800435a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e040      	b.n	80043dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fc fde6 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0201 	bic.w	r2, r2, #1
 8004384:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 f8c0 	bl	800450c <UART_SetConfig>
 800438c:	4603      	mov	r3, r0
 800438e:	2b01      	cmp	r3, #1
 8004390:	d101      	bne.n	8004396 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e022      	b.n	80043dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fb3e 	bl	8004a20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fbc5 	bl	8004b64 <UART_CheckIdleState>
 80043da:	4603      	mov	r3, r0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	603b      	str	r3, [r7, #0]
 80043f0:	4613      	mov	r3, r2
 80043f2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	f040 8082 	bne.w	8004502 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_Transmit+0x26>
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e07a      	b.n	8004504 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x38>
 8004418:	2302      	movs	r3, #2
 800441a:	e073      	b.n	8004504 <HAL_UART_Transmit+0x120>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2221      	movs	r2, #33	; 0x21
 8004430:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004432:	f7fc ff57 	bl	80012e4 <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004450:	d108      	bne.n	8004464 <HAL_UART_Transmit+0x80>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e003      	b.n	800446c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004474:	e02d      	b.n	80044d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2200      	movs	r2, #0
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fbb8 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e039      	b.n	8004504 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10b      	bne.n	80044ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a2:	b292      	uxth	r2, r2
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	3302      	adds	r3, #2
 80044aa:	61bb      	str	r3, [r7, #24]
 80044ac:	e008      	b.n	80044c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	b292      	uxth	r2, r2
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3301      	adds	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1cb      	bne.n	8004476 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2140      	movs	r1, #64	; 0x40
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fb84 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e005      	b.n	8004504 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3720      	adds	r7, #32
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800450c:	b5b0      	push	{r4, r5, r7, lr}
 800450e:	b088      	sub	sp, #32
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4313      	orrs	r3, r2
 800452e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4bad      	ldr	r3, [pc, #692]	; (80047ec <UART_SetConfig+0x2e0>)
 8004538:	4013      	ands	r3, r2
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6812      	ldr	r2, [r2, #0]
 800453e:	69f9      	ldr	r1, [r7, #28]
 8004540:	430b      	orrs	r3, r1
 8004542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68da      	ldr	r2, [r3, #12]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4aa2      	ldr	r2, [pc, #648]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	4313      	orrs	r3, r2
 8004572:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69fa      	ldr	r2, [r7, #28]
 8004584:	430a      	orrs	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a99      	ldr	r2, [pc, #612]	; (80047f4 <UART_SetConfig+0x2e8>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d121      	bne.n	80045d6 <UART_SetConfig+0xca>
 8004592:	4b99      	ldr	r3, [pc, #612]	; (80047f8 <UART_SetConfig+0x2ec>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f003 0303 	and.w	r3, r3, #3
 800459c:	2b03      	cmp	r3, #3
 800459e:	d817      	bhi.n	80045d0 <UART_SetConfig+0xc4>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <UART_SetConfig+0x9c>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045c5 	.word	0x080045c5
 80045b0:	080045bf 	.word	0x080045bf
 80045b4:	080045cb 	.word	0x080045cb
 80045b8:	2301      	movs	r3, #1
 80045ba:	76fb      	strb	r3, [r7, #27]
 80045bc:	e0e7      	b.n	800478e <UART_SetConfig+0x282>
 80045be:	2302      	movs	r3, #2
 80045c0:	76fb      	strb	r3, [r7, #27]
 80045c2:	e0e4      	b.n	800478e <UART_SetConfig+0x282>
 80045c4:	2304      	movs	r3, #4
 80045c6:	76fb      	strb	r3, [r7, #27]
 80045c8:	e0e1      	b.n	800478e <UART_SetConfig+0x282>
 80045ca:	2308      	movs	r3, #8
 80045cc:	76fb      	strb	r3, [r7, #27]
 80045ce:	e0de      	b.n	800478e <UART_SetConfig+0x282>
 80045d0:	2310      	movs	r3, #16
 80045d2:	76fb      	strb	r3, [r7, #27]
 80045d4:	e0db      	b.n	800478e <UART_SetConfig+0x282>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a88      	ldr	r2, [pc, #544]	; (80047fc <UART_SetConfig+0x2f0>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d132      	bne.n	8004646 <UART_SetConfig+0x13a>
 80045e0:	4b85      	ldr	r3, [pc, #532]	; (80047f8 <UART_SetConfig+0x2ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d828      	bhi.n	8004640 <UART_SetConfig+0x134>
 80045ee:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <UART_SetConfig+0xe8>)
 80045f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f4:	08004629 	.word	0x08004629
 80045f8:	08004641 	.word	0x08004641
 80045fc:	08004641 	.word	0x08004641
 8004600:	08004641 	.word	0x08004641
 8004604:	08004635 	.word	0x08004635
 8004608:	08004641 	.word	0x08004641
 800460c:	08004641 	.word	0x08004641
 8004610:	08004641 	.word	0x08004641
 8004614:	0800462f 	.word	0x0800462f
 8004618:	08004641 	.word	0x08004641
 800461c:	08004641 	.word	0x08004641
 8004620:	08004641 	.word	0x08004641
 8004624:	0800463b 	.word	0x0800463b
 8004628:	2300      	movs	r3, #0
 800462a:	76fb      	strb	r3, [r7, #27]
 800462c:	e0af      	b.n	800478e <UART_SetConfig+0x282>
 800462e:	2302      	movs	r3, #2
 8004630:	76fb      	strb	r3, [r7, #27]
 8004632:	e0ac      	b.n	800478e <UART_SetConfig+0x282>
 8004634:	2304      	movs	r3, #4
 8004636:	76fb      	strb	r3, [r7, #27]
 8004638:	e0a9      	b.n	800478e <UART_SetConfig+0x282>
 800463a:	2308      	movs	r3, #8
 800463c:	76fb      	strb	r3, [r7, #27]
 800463e:	e0a6      	b.n	800478e <UART_SetConfig+0x282>
 8004640:	2310      	movs	r3, #16
 8004642:	76fb      	strb	r3, [r7, #27]
 8004644:	e0a3      	b.n	800478e <UART_SetConfig+0x282>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a6d      	ldr	r2, [pc, #436]	; (8004800 <UART_SetConfig+0x2f4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d120      	bne.n	8004692 <UART_SetConfig+0x186>
 8004650:	4b69      	ldr	r3, [pc, #420]	; (80047f8 <UART_SetConfig+0x2ec>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800465a:	2b30      	cmp	r3, #48	; 0x30
 800465c:	d013      	beq.n	8004686 <UART_SetConfig+0x17a>
 800465e:	2b30      	cmp	r3, #48	; 0x30
 8004660:	d814      	bhi.n	800468c <UART_SetConfig+0x180>
 8004662:	2b20      	cmp	r3, #32
 8004664:	d009      	beq.n	800467a <UART_SetConfig+0x16e>
 8004666:	2b20      	cmp	r3, #32
 8004668:	d810      	bhi.n	800468c <UART_SetConfig+0x180>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <UART_SetConfig+0x168>
 800466e:	2b10      	cmp	r3, #16
 8004670:	d006      	beq.n	8004680 <UART_SetConfig+0x174>
 8004672:	e00b      	b.n	800468c <UART_SetConfig+0x180>
 8004674:	2300      	movs	r3, #0
 8004676:	76fb      	strb	r3, [r7, #27]
 8004678:	e089      	b.n	800478e <UART_SetConfig+0x282>
 800467a:	2302      	movs	r3, #2
 800467c:	76fb      	strb	r3, [r7, #27]
 800467e:	e086      	b.n	800478e <UART_SetConfig+0x282>
 8004680:	2304      	movs	r3, #4
 8004682:	76fb      	strb	r3, [r7, #27]
 8004684:	e083      	b.n	800478e <UART_SetConfig+0x282>
 8004686:	2308      	movs	r3, #8
 8004688:	76fb      	strb	r3, [r7, #27]
 800468a:	e080      	b.n	800478e <UART_SetConfig+0x282>
 800468c:	2310      	movs	r3, #16
 800468e:	76fb      	strb	r3, [r7, #27]
 8004690:	e07d      	b.n	800478e <UART_SetConfig+0x282>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a5b      	ldr	r2, [pc, #364]	; (8004804 <UART_SetConfig+0x2f8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d120      	bne.n	80046de <UART_SetConfig+0x1d2>
 800469c:	4b56      	ldr	r3, [pc, #344]	; (80047f8 <UART_SetConfig+0x2ec>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046a6:	2bc0      	cmp	r3, #192	; 0xc0
 80046a8:	d013      	beq.n	80046d2 <UART_SetConfig+0x1c6>
 80046aa:	2bc0      	cmp	r3, #192	; 0xc0
 80046ac:	d814      	bhi.n	80046d8 <UART_SetConfig+0x1cc>
 80046ae:	2b80      	cmp	r3, #128	; 0x80
 80046b0:	d009      	beq.n	80046c6 <UART_SetConfig+0x1ba>
 80046b2:	2b80      	cmp	r3, #128	; 0x80
 80046b4:	d810      	bhi.n	80046d8 <UART_SetConfig+0x1cc>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <UART_SetConfig+0x1b4>
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d006      	beq.n	80046cc <UART_SetConfig+0x1c0>
 80046be:	e00b      	b.n	80046d8 <UART_SetConfig+0x1cc>
 80046c0:	2300      	movs	r3, #0
 80046c2:	76fb      	strb	r3, [r7, #27]
 80046c4:	e063      	b.n	800478e <UART_SetConfig+0x282>
 80046c6:	2302      	movs	r3, #2
 80046c8:	76fb      	strb	r3, [r7, #27]
 80046ca:	e060      	b.n	800478e <UART_SetConfig+0x282>
 80046cc:	2304      	movs	r3, #4
 80046ce:	76fb      	strb	r3, [r7, #27]
 80046d0:	e05d      	b.n	800478e <UART_SetConfig+0x282>
 80046d2:	2308      	movs	r3, #8
 80046d4:	76fb      	strb	r3, [r7, #27]
 80046d6:	e05a      	b.n	800478e <UART_SetConfig+0x282>
 80046d8:	2310      	movs	r3, #16
 80046da:	76fb      	strb	r3, [r7, #27]
 80046dc:	e057      	b.n	800478e <UART_SetConfig+0x282>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a49      	ldr	r2, [pc, #292]	; (8004808 <UART_SetConfig+0x2fc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d125      	bne.n	8004734 <UART_SetConfig+0x228>
 80046e8:	4b43      	ldr	r3, [pc, #268]	; (80047f8 <UART_SetConfig+0x2ec>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046f6:	d017      	beq.n	8004728 <UART_SetConfig+0x21c>
 80046f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046fc:	d817      	bhi.n	800472e <UART_SetConfig+0x222>
 80046fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004702:	d00b      	beq.n	800471c <UART_SetConfig+0x210>
 8004704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004708:	d811      	bhi.n	800472e <UART_SetConfig+0x222>
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <UART_SetConfig+0x20a>
 800470e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004712:	d006      	beq.n	8004722 <UART_SetConfig+0x216>
 8004714:	e00b      	b.n	800472e <UART_SetConfig+0x222>
 8004716:	2300      	movs	r3, #0
 8004718:	76fb      	strb	r3, [r7, #27]
 800471a:	e038      	b.n	800478e <UART_SetConfig+0x282>
 800471c:	2302      	movs	r3, #2
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e035      	b.n	800478e <UART_SetConfig+0x282>
 8004722:	2304      	movs	r3, #4
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e032      	b.n	800478e <UART_SetConfig+0x282>
 8004728:	2308      	movs	r3, #8
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e02f      	b.n	800478e <UART_SetConfig+0x282>
 800472e:	2310      	movs	r3, #16
 8004730:	76fb      	strb	r3, [r7, #27]
 8004732:	e02c      	b.n	800478e <UART_SetConfig+0x282>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2d      	ldr	r2, [pc, #180]	; (80047f0 <UART_SetConfig+0x2e4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d125      	bne.n	800478a <UART_SetConfig+0x27e>
 800473e:	4b2e      	ldr	r3, [pc, #184]	; (80047f8 <UART_SetConfig+0x2ec>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004744:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800474c:	d017      	beq.n	800477e <UART_SetConfig+0x272>
 800474e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004752:	d817      	bhi.n	8004784 <UART_SetConfig+0x278>
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004758:	d00b      	beq.n	8004772 <UART_SetConfig+0x266>
 800475a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475e:	d811      	bhi.n	8004784 <UART_SetConfig+0x278>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <UART_SetConfig+0x260>
 8004764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004768:	d006      	beq.n	8004778 <UART_SetConfig+0x26c>
 800476a:	e00b      	b.n	8004784 <UART_SetConfig+0x278>
 800476c:	2300      	movs	r3, #0
 800476e:	76fb      	strb	r3, [r7, #27]
 8004770:	e00d      	b.n	800478e <UART_SetConfig+0x282>
 8004772:	2302      	movs	r3, #2
 8004774:	76fb      	strb	r3, [r7, #27]
 8004776:	e00a      	b.n	800478e <UART_SetConfig+0x282>
 8004778:	2304      	movs	r3, #4
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e007      	b.n	800478e <UART_SetConfig+0x282>
 800477e:	2308      	movs	r3, #8
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e004      	b.n	800478e <UART_SetConfig+0x282>
 8004784:	2310      	movs	r3, #16
 8004786:	76fb      	strb	r3, [r7, #27]
 8004788:	e001      	b.n	800478e <UART_SetConfig+0x282>
 800478a:	2310      	movs	r3, #16
 800478c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <UART_SetConfig+0x2e4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	f040 8087 	bne.w	80048a8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800479a:	7efb      	ldrb	r3, [r7, #27]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d837      	bhi.n	8004810 <UART_SetConfig+0x304>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x29c>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	08004811 	.word	0x08004811
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	08004811 	.word	0x08004811
 80047b8:	080047db 	.word	0x080047db
 80047bc:	08004811 	.word	0x08004811
 80047c0:	08004811 	.word	0x08004811
 80047c4:	08004811 	.word	0x08004811
 80047c8:	080047e3 	.word	0x080047e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047cc:	f7fe fd1c 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80047d0:	6178      	str	r0, [r7, #20]
        break;
 80047d2:	e022      	b.n	800481a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d4:	4b0d      	ldr	r3, [pc, #52]	; (800480c <UART_SetConfig+0x300>)
 80047d6:	617b      	str	r3, [r7, #20]
        break;
 80047d8:	e01f      	b.n	800481a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047da:	f7fe fc7d 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 80047de:	6178      	str	r0, [r7, #20]
        break;
 80047e0:	e01b      	b.n	800481a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e6:	617b      	str	r3, [r7, #20]
        break;
 80047e8:	e017      	b.n	800481a <UART_SetConfig+0x30e>
 80047ea:	bf00      	nop
 80047ec:	efff69f3 	.word	0xefff69f3
 80047f0:	40008000 	.word	0x40008000
 80047f4:	40013800 	.word	0x40013800
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40004400 	.word	0x40004400
 8004800:	40004800 	.word	0x40004800
 8004804:	40004c00 	.word	0x40004c00
 8004808:	40005000 	.word	0x40005000
 800480c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	76bb      	strb	r3, [r7, #26]
        break;
 8004818:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80f1 	beq.w	8004a04 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	429a      	cmp	r2, r3
 8004830:	d305      	bcc.n	800483e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	429a      	cmp	r2, r3
 800483c:	d902      	bls.n	8004844 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	76bb      	strb	r3, [r7, #26]
 8004842:	e0df      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	4618      	mov	r0, r3
 8004848:	f04f 0100 	mov.w	r1, #0
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	020b      	lsls	r3, r1, #8
 8004856:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800485a:	0202      	lsls	r2, r0, #8
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	6849      	ldr	r1, [r1, #4]
 8004860:	0849      	lsrs	r1, r1, #1
 8004862:	4608      	mov	r0, r1
 8004864:	f04f 0100 	mov.w	r1, #0
 8004868:	1814      	adds	r4, r2, r0
 800486a:	eb43 0501 	adc.w	r5, r3, r1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	461a      	mov	r2, r3
 8004874:	f04f 0300 	mov.w	r3, #0
 8004878:	4620      	mov	r0, r4
 800487a:	4629      	mov	r1, r5
 800487c:	f7fb fd00 	bl	8000280 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800488e:	d308      	bcc.n	80048a2 <UART_SetConfig+0x396>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004896:	d204      	bcs.n	80048a2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	60da      	str	r2, [r3, #12]
 80048a0:	e0b0      	b.n	8004a04 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	76bb      	strb	r3, [r7, #26]
 80048a6:	e0ad      	b.n	8004a04 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
 80048ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b0:	d15c      	bne.n	800496c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80048b2:	7efb      	ldrb	r3, [r7, #27]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d828      	bhi.n	800490a <UART_SetConfig+0x3fe>
 80048b8:	a201      	add	r2, pc, #4	; (adr r2, 80048c0 <UART_SetConfig+0x3b4>)
 80048ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048be:	bf00      	nop
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048ed 	.word	0x080048ed
 80048c8:	080048f5 	.word	0x080048f5
 80048cc:	0800490b 	.word	0x0800490b
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	0800490b 	.word	0x0800490b
 80048d8:	0800490b 	.word	0x0800490b
 80048dc:	0800490b 	.word	0x0800490b
 80048e0:	08004903 	.word	0x08004903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048e4:	f7fe fc90 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80048e8:	6178      	str	r0, [r7, #20]
        break;
 80048ea:	e013      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048ec:	f7fe fca2 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 80048f0:	6178      	str	r0, [r7, #20]
        break;
 80048f2:	e00f      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f4:	4b49      	ldr	r3, [pc, #292]	; (8004a1c <UART_SetConfig+0x510>)
 80048f6:	617b      	str	r3, [r7, #20]
        break;
 80048f8:	e00c      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fa:	f7fe fbed 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 80048fe:	6178      	str	r0, [r7, #20]
        break;
 8004900:	e008      	b.n	8004914 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004906:	617b      	str	r3, [r7, #20]
        break;
 8004908:	e004      	b.n	8004914 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	76bb      	strb	r3, [r7, #26]
        break;
 8004912:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d074      	beq.n	8004a04 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	005a      	lsls	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	441a      	add	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	b29b      	uxth	r3, r3
 8004930:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b0f      	cmp	r3, #15
 8004936:	d916      	bls.n	8004966 <UART_SetConfig+0x45a>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800493e:	d212      	bcs.n	8004966 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	b29b      	uxth	r3, r3
 8004944:	f023 030f 	bic.w	r3, r3, #15
 8004948:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	b29b      	uxth	r3, r3
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	b29a      	uxth	r2, r3
 8004956:	89fb      	ldrh	r3, [r7, #14]
 8004958:	4313      	orrs	r3, r2
 800495a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	89fa      	ldrh	r2, [r7, #14]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	e04e      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	76bb      	strb	r3, [r7, #26]
 800496a:	e04b      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800496c:	7efb      	ldrb	r3, [r7, #27]
 800496e:	2b08      	cmp	r3, #8
 8004970:	d827      	bhi.n	80049c2 <UART_SetConfig+0x4b6>
 8004972:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <UART_SetConfig+0x46c>)
 8004974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004978:	0800499d 	.word	0x0800499d
 800497c:	080049a5 	.word	0x080049a5
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049c3 	.word	0x080049c3
 8004988:	080049b3 	.word	0x080049b3
 800498c:	080049c3 	.word	0x080049c3
 8004990:	080049c3 	.word	0x080049c3
 8004994:	080049c3 	.word	0x080049c3
 8004998:	080049bb 	.word	0x080049bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800499c:	f7fe fc34 	bl	8003208 <HAL_RCC_GetPCLK1Freq>
 80049a0:	6178      	str	r0, [r7, #20]
        break;
 80049a2:	e013      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049a4:	f7fe fc46 	bl	8003234 <HAL_RCC_GetPCLK2Freq>
 80049a8:	6178      	str	r0, [r7, #20]
        break;
 80049aa:	e00f      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <UART_SetConfig+0x510>)
 80049ae:	617b      	str	r3, [r7, #20]
        break;
 80049b0:	e00c      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b2:	f7fe fb91 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 80049b6:	6178      	str	r0, [r7, #20]
        break;
 80049b8:	e008      	b.n	80049cc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049be:	617b      	str	r3, [r7, #20]
        break;
 80049c0:	e004      	b.n	80049cc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	76bb      	strb	r3, [r7, #26]
        break;
 80049ca:	bf00      	nop
    }

    if (pclk != 0U)
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d018      	beq.n	8004a04 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	085a      	lsrs	r2, r3, #1
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	441a      	add	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b0f      	cmp	r3, #15
 80049ec:	d908      	bls.n	8004a00 <UART_SetConfig+0x4f4>
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f4:	d204      	bcs.n	8004a00 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	e001      	b.n	8004a04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a10:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bdb0      	pop	{r4, r5, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	00f42400 	.word	0x00f42400

08004a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d00a      	beq.n	8004a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00a      	beq.n	8004a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00a      	beq.n	8004ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01a      	beq.n	8004b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1e:	d10a      	bne.n	8004b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	605a      	str	r2, [r3, #4]
  }
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b74:	f7fc fbb6 	bl	80012e4 <HAL_GetTick>
 8004b78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d10e      	bne.n	8004ba6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f82d 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e023      	b.n	8004bee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0304 	and.w	r3, r3, #4
 8004bb0:	2b04      	cmp	r3, #4
 8004bb2:	d10e      	bne.n	8004bd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f817 	bl	8004bf6 <UART_WaitOnFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e00d      	b.n	8004bee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	603b      	str	r3, [r7, #0]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c06:	e05e      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d05a      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c10:	f7fc fb68 	bl	80012e4 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d302      	bcc.n	8004c26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d11b      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c34:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e043      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d02c      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c7a:	d124      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c84:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c94:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e00f      	b.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	bf0c      	ite	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	2300      	movne	r3, #0
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	461a      	mov	r2, r3
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d091      	beq.n	8004c08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <__errno>:
 8004cf0:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <__errno+0x8>)
 8004cf2:	6818      	ldr	r0, [r3, #0]
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000010 	.word	0x20000010

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	; (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	; (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	; (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 fc4e 	bl	80055b0 <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	080056b0 	.word	0x080056b0
 8004d38:	080056b0 	.word	0x080056b0
 8004d3c:	080056b0 	.word	0x080056b0
 8004d40:	080056b4 	.word	0x080056b4

08004d44 <memset>:
 8004d44:	4402      	add	r2, r0
 8004d46:	4603      	mov	r3, r0
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d100      	bne.n	8004d4e <memset+0xa>
 8004d4c:	4770      	bx	lr
 8004d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d52:	e7f9      	b.n	8004d48 <memset+0x4>

08004d54 <siprintf>:
 8004d54:	b40e      	push	{r1, r2, r3}
 8004d56:	b500      	push	{lr}
 8004d58:	b09c      	sub	sp, #112	; 0x70
 8004d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d5c:	9002      	str	r0, [sp, #8]
 8004d5e:	9006      	str	r0, [sp, #24]
 8004d60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d64:	4809      	ldr	r0, [pc, #36]	; (8004d8c <siprintf+0x38>)
 8004d66:	9107      	str	r1, [sp, #28]
 8004d68:	9104      	str	r1, [sp, #16]
 8004d6a:	4909      	ldr	r1, [pc, #36]	; (8004d90 <siprintf+0x3c>)
 8004d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d70:	9105      	str	r1, [sp, #20]
 8004d72:	6800      	ldr	r0, [r0, #0]
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	a902      	add	r1, sp, #8
 8004d78:	f000 f868 	bl	8004e4c <_svfiprintf_r>
 8004d7c:	9b02      	ldr	r3, [sp, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
 8004d82:	b01c      	add	sp, #112	; 0x70
 8004d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d88:	b003      	add	sp, #12
 8004d8a:	4770      	bx	lr
 8004d8c:	20000010 	.word	0x20000010
 8004d90:	ffff0208 	.word	0xffff0208

08004d94 <__ssputs_r>:
 8004d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d98:	688e      	ldr	r6, [r1, #8]
 8004d9a:	429e      	cmp	r6, r3
 8004d9c:	4682      	mov	sl, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	4690      	mov	r8, r2
 8004da2:	461f      	mov	r7, r3
 8004da4:	d838      	bhi.n	8004e18 <__ssputs_r+0x84>
 8004da6:	898a      	ldrh	r2, [r1, #12]
 8004da8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004dac:	d032      	beq.n	8004e14 <__ssputs_r+0x80>
 8004dae:	6825      	ldr	r5, [r4, #0]
 8004db0:	6909      	ldr	r1, [r1, #16]
 8004db2:	eba5 0901 	sub.w	r9, r5, r1
 8004db6:	6965      	ldr	r5, [r4, #20]
 8004db8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004dbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	444b      	add	r3, r9
 8004dc4:	106d      	asrs	r5, r5, #1
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	bf38      	it	cc
 8004dca:	461d      	movcc	r5, r3
 8004dcc:	0553      	lsls	r3, r2, #21
 8004dce:	d531      	bpl.n	8004e34 <__ssputs_r+0xa0>
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	f000 fb47 	bl	8005464 <_malloc_r>
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	b950      	cbnz	r0, 8004df0 <__ssputs_r+0x5c>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	f8ca 3000 	str.w	r3, [sl]
 8004de0:	89a3      	ldrh	r3, [r4, #12]
 8004de2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df0:	6921      	ldr	r1, [r4, #16]
 8004df2:	464a      	mov	r2, r9
 8004df4:	f000 fabe 	bl	8005374 <memcpy>
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e02:	81a3      	strh	r3, [r4, #12]
 8004e04:	6126      	str	r6, [r4, #16]
 8004e06:	6165      	str	r5, [r4, #20]
 8004e08:	444e      	add	r6, r9
 8004e0a:	eba5 0509 	sub.w	r5, r5, r9
 8004e0e:	6026      	str	r6, [r4, #0]
 8004e10:	60a5      	str	r5, [r4, #8]
 8004e12:	463e      	mov	r6, r7
 8004e14:	42be      	cmp	r6, r7
 8004e16:	d900      	bls.n	8004e1a <__ssputs_r+0x86>
 8004e18:	463e      	mov	r6, r7
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	4641      	mov	r1, r8
 8004e20:	f000 fab6 	bl	8005390 <memmove>
 8004e24:	68a3      	ldr	r3, [r4, #8]
 8004e26:	6822      	ldr	r2, [r4, #0]
 8004e28:	1b9b      	subs	r3, r3, r6
 8004e2a:	4432      	add	r2, r6
 8004e2c:	60a3      	str	r3, [r4, #8]
 8004e2e:	6022      	str	r2, [r4, #0]
 8004e30:	2000      	movs	r0, #0
 8004e32:	e7db      	b.n	8004dec <__ssputs_r+0x58>
 8004e34:	462a      	mov	r2, r5
 8004e36:	f000 fb6f 	bl	8005518 <_realloc_r>
 8004e3a:	4606      	mov	r6, r0
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	d1e1      	bne.n	8004e04 <__ssputs_r+0x70>
 8004e40:	6921      	ldr	r1, [r4, #16]
 8004e42:	4650      	mov	r0, sl
 8004e44:	f000 fabe 	bl	80053c4 <_free_r>
 8004e48:	e7c7      	b.n	8004dda <__ssputs_r+0x46>
	...

08004e4c <_svfiprintf_r>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	4698      	mov	r8, r3
 8004e52:	898b      	ldrh	r3, [r1, #12]
 8004e54:	061b      	lsls	r3, r3, #24
 8004e56:	b09d      	sub	sp, #116	; 0x74
 8004e58:	4607      	mov	r7, r0
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	d50e      	bpl.n	8004e7e <_svfiprintf_r+0x32>
 8004e60:	690b      	ldr	r3, [r1, #16]
 8004e62:	b963      	cbnz	r3, 8004e7e <_svfiprintf_r+0x32>
 8004e64:	2140      	movs	r1, #64	; 0x40
 8004e66:	f000 fafd 	bl	8005464 <_malloc_r>
 8004e6a:	6028      	str	r0, [r5, #0]
 8004e6c:	6128      	str	r0, [r5, #16]
 8004e6e:	b920      	cbnz	r0, 8004e7a <_svfiprintf_r+0x2e>
 8004e70:	230c      	movs	r3, #12
 8004e72:	603b      	str	r3, [r7, #0]
 8004e74:	f04f 30ff 	mov.w	r0, #4294967295
 8004e78:	e0d1      	b.n	800501e <_svfiprintf_r+0x1d2>
 8004e7a:	2340      	movs	r3, #64	; 0x40
 8004e7c:	616b      	str	r3, [r5, #20]
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9309      	str	r3, [sp, #36]	; 0x24
 8004e82:	2320      	movs	r3, #32
 8004e84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e88:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e8c:	2330      	movs	r3, #48	; 0x30
 8004e8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005038 <_svfiprintf_r+0x1ec>
 8004e92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e96:	f04f 0901 	mov.w	r9, #1
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	469a      	mov	sl, r3
 8004e9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea2:	b10a      	cbz	r2, 8004ea8 <_svfiprintf_r+0x5c>
 8004ea4:	2a25      	cmp	r2, #37	; 0x25
 8004ea6:	d1f9      	bne.n	8004e9c <_svfiprintf_r+0x50>
 8004ea8:	ebba 0b04 	subs.w	fp, sl, r4
 8004eac:	d00b      	beq.n	8004ec6 <_svfiprintf_r+0x7a>
 8004eae:	465b      	mov	r3, fp
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	f7ff ff6d 	bl	8004d94 <__ssputs_r>
 8004eba:	3001      	adds	r0, #1
 8004ebc:	f000 80aa 	beq.w	8005014 <_svfiprintf_r+0x1c8>
 8004ec0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ec2:	445a      	add	r2, fp
 8004ec4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f000 80a2 	beq.w	8005014 <_svfiprintf_r+0x1c8>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eda:	f10a 0a01 	add.w	sl, sl, #1
 8004ede:	9304      	str	r3, [sp, #16]
 8004ee0:	9307      	str	r3, [sp, #28]
 8004ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ee8:	4654      	mov	r4, sl
 8004eea:	2205      	movs	r2, #5
 8004eec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef0:	4851      	ldr	r0, [pc, #324]	; (8005038 <_svfiprintf_r+0x1ec>)
 8004ef2:	f7fb f975 	bl	80001e0 <memchr>
 8004ef6:	9a04      	ldr	r2, [sp, #16]
 8004ef8:	b9d8      	cbnz	r0, 8004f32 <_svfiprintf_r+0xe6>
 8004efa:	06d0      	lsls	r0, r2, #27
 8004efc:	bf44      	itt	mi
 8004efe:	2320      	movmi	r3, #32
 8004f00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f04:	0711      	lsls	r1, r2, #28
 8004f06:	bf44      	itt	mi
 8004f08:	232b      	movmi	r3, #43	; 0x2b
 8004f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f12:	2b2a      	cmp	r3, #42	; 0x2a
 8004f14:	d015      	beq.n	8004f42 <_svfiprintf_r+0xf6>
 8004f16:	9a07      	ldr	r2, [sp, #28]
 8004f18:	4654      	mov	r4, sl
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	f04f 0c0a 	mov.w	ip, #10
 8004f20:	4621      	mov	r1, r4
 8004f22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f26:	3b30      	subs	r3, #48	; 0x30
 8004f28:	2b09      	cmp	r3, #9
 8004f2a:	d94e      	bls.n	8004fca <_svfiprintf_r+0x17e>
 8004f2c:	b1b0      	cbz	r0, 8004f5c <_svfiprintf_r+0x110>
 8004f2e:	9207      	str	r2, [sp, #28]
 8004f30:	e014      	b.n	8004f5c <_svfiprintf_r+0x110>
 8004f32:	eba0 0308 	sub.w	r3, r0, r8
 8004f36:	fa09 f303 	lsl.w	r3, r9, r3
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	9304      	str	r3, [sp, #16]
 8004f3e:	46a2      	mov	sl, r4
 8004f40:	e7d2      	b.n	8004ee8 <_svfiprintf_r+0x9c>
 8004f42:	9b03      	ldr	r3, [sp, #12]
 8004f44:	1d19      	adds	r1, r3, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	9103      	str	r1, [sp, #12]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	bfbb      	ittet	lt
 8004f4e:	425b      	neglt	r3, r3
 8004f50:	f042 0202 	orrlt.w	r2, r2, #2
 8004f54:	9307      	strge	r3, [sp, #28]
 8004f56:	9307      	strlt	r3, [sp, #28]
 8004f58:	bfb8      	it	lt
 8004f5a:	9204      	strlt	r2, [sp, #16]
 8004f5c:	7823      	ldrb	r3, [r4, #0]
 8004f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8004f60:	d10c      	bne.n	8004f7c <_svfiprintf_r+0x130>
 8004f62:	7863      	ldrb	r3, [r4, #1]
 8004f64:	2b2a      	cmp	r3, #42	; 0x2a
 8004f66:	d135      	bne.n	8004fd4 <_svfiprintf_r+0x188>
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	1d1a      	adds	r2, r3, #4
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	9203      	str	r2, [sp, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bfb8      	it	lt
 8004f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f78:	3402      	adds	r4, #2
 8004f7a:	9305      	str	r3, [sp, #20]
 8004f7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005048 <_svfiprintf_r+0x1fc>
 8004f80:	7821      	ldrb	r1, [r4, #0]
 8004f82:	2203      	movs	r2, #3
 8004f84:	4650      	mov	r0, sl
 8004f86:	f7fb f92b 	bl	80001e0 <memchr>
 8004f8a:	b140      	cbz	r0, 8004f9e <_svfiprintf_r+0x152>
 8004f8c:	2340      	movs	r3, #64	; 0x40
 8004f8e:	eba0 000a 	sub.w	r0, r0, sl
 8004f92:	fa03 f000 	lsl.w	r0, r3, r0
 8004f96:	9b04      	ldr	r3, [sp, #16]
 8004f98:	4303      	orrs	r3, r0
 8004f9a:	3401      	adds	r4, #1
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa2:	4826      	ldr	r0, [pc, #152]	; (800503c <_svfiprintf_r+0x1f0>)
 8004fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fa8:	2206      	movs	r2, #6
 8004faa:	f7fb f919 	bl	80001e0 <memchr>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d038      	beq.n	8005024 <_svfiprintf_r+0x1d8>
 8004fb2:	4b23      	ldr	r3, [pc, #140]	; (8005040 <_svfiprintf_r+0x1f4>)
 8004fb4:	bb1b      	cbnz	r3, 8004ffe <_svfiprintf_r+0x1b2>
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	3307      	adds	r3, #7
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	9303      	str	r3, [sp, #12]
 8004fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc4:	4433      	add	r3, r6
 8004fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc8:	e767      	b.n	8004e9a <_svfiprintf_r+0x4e>
 8004fca:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fce:	460c      	mov	r4, r1
 8004fd0:	2001      	movs	r0, #1
 8004fd2:	e7a5      	b.n	8004f20 <_svfiprintf_r+0xd4>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	3401      	adds	r4, #1
 8004fd8:	9305      	str	r3, [sp, #20]
 8004fda:	4619      	mov	r1, r3
 8004fdc:	f04f 0c0a 	mov.w	ip, #10
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe6:	3a30      	subs	r2, #48	; 0x30
 8004fe8:	2a09      	cmp	r2, #9
 8004fea:	d903      	bls.n	8004ff4 <_svfiprintf_r+0x1a8>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0c5      	beq.n	8004f7c <_svfiprintf_r+0x130>
 8004ff0:	9105      	str	r1, [sp, #20]
 8004ff2:	e7c3      	b.n	8004f7c <_svfiprintf_r+0x130>
 8004ff4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e7f0      	b.n	8004fe0 <_svfiprintf_r+0x194>
 8004ffe:	ab03      	add	r3, sp, #12
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	462a      	mov	r2, r5
 8005004:	4b0f      	ldr	r3, [pc, #60]	; (8005044 <_svfiprintf_r+0x1f8>)
 8005006:	a904      	add	r1, sp, #16
 8005008:	4638      	mov	r0, r7
 800500a:	f3af 8000 	nop.w
 800500e:	1c42      	adds	r2, r0, #1
 8005010:	4606      	mov	r6, r0
 8005012:	d1d6      	bne.n	8004fc2 <_svfiprintf_r+0x176>
 8005014:	89ab      	ldrh	r3, [r5, #12]
 8005016:	065b      	lsls	r3, r3, #25
 8005018:	f53f af2c 	bmi.w	8004e74 <_svfiprintf_r+0x28>
 800501c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800501e:	b01d      	add	sp, #116	; 0x74
 8005020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005024:	ab03      	add	r3, sp, #12
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	462a      	mov	r2, r5
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <_svfiprintf_r+0x1f8>)
 800502c:	a904      	add	r1, sp, #16
 800502e:	4638      	mov	r0, r7
 8005030:	f000 f87a 	bl	8005128 <_printf_i>
 8005034:	e7eb      	b.n	800500e <_svfiprintf_r+0x1c2>
 8005036:	bf00      	nop
 8005038:	08005674 	.word	0x08005674
 800503c:	0800567e 	.word	0x0800567e
 8005040:	00000000 	.word	0x00000000
 8005044:	08004d95 	.word	0x08004d95
 8005048:	0800567a 	.word	0x0800567a

0800504c <_printf_common>:
 800504c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	4616      	mov	r6, r2
 8005052:	4699      	mov	r9, r3
 8005054:	688a      	ldr	r2, [r1, #8]
 8005056:	690b      	ldr	r3, [r1, #16]
 8005058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800505c:	4293      	cmp	r3, r2
 800505e:	bfb8      	it	lt
 8005060:	4613      	movlt	r3, r2
 8005062:	6033      	str	r3, [r6, #0]
 8005064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005068:	4607      	mov	r7, r0
 800506a:	460c      	mov	r4, r1
 800506c:	b10a      	cbz	r2, 8005072 <_printf_common+0x26>
 800506e:	3301      	adds	r3, #1
 8005070:	6033      	str	r3, [r6, #0]
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	0699      	lsls	r1, r3, #26
 8005076:	bf42      	ittt	mi
 8005078:	6833      	ldrmi	r3, [r6, #0]
 800507a:	3302      	addmi	r3, #2
 800507c:	6033      	strmi	r3, [r6, #0]
 800507e:	6825      	ldr	r5, [r4, #0]
 8005080:	f015 0506 	ands.w	r5, r5, #6
 8005084:	d106      	bne.n	8005094 <_printf_common+0x48>
 8005086:	f104 0a19 	add.w	sl, r4, #25
 800508a:	68e3      	ldr	r3, [r4, #12]
 800508c:	6832      	ldr	r2, [r6, #0]
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	42ab      	cmp	r3, r5
 8005092:	dc26      	bgt.n	80050e2 <_printf_common+0x96>
 8005094:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005098:	1e13      	subs	r3, r2, #0
 800509a:	6822      	ldr	r2, [r4, #0]
 800509c:	bf18      	it	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	0692      	lsls	r2, r2, #26
 80050a2:	d42b      	bmi.n	80050fc <_printf_common+0xb0>
 80050a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050a8:	4649      	mov	r1, r9
 80050aa:	4638      	mov	r0, r7
 80050ac:	47c0      	blx	r8
 80050ae:	3001      	adds	r0, #1
 80050b0:	d01e      	beq.n	80050f0 <_printf_common+0xa4>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	68e5      	ldr	r5, [r4, #12]
 80050b6:	6832      	ldr	r2, [r6, #0]
 80050b8:	f003 0306 	and.w	r3, r3, #6
 80050bc:	2b04      	cmp	r3, #4
 80050be:	bf08      	it	eq
 80050c0:	1aad      	subeq	r5, r5, r2
 80050c2:	68a3      	ldr	r3, [r4, #8]
 80050c4:	6922      	ldr	r2, [r4, #16]
 80050c6:	bf0c      	ite	eq
 80050c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050cc:	2500      	movne	r5, #0
 80050ce:	4293      	cmp	r3, r2
 80050d0:	bfc4      	itt	gt
 80050d2:	1a9b      	subgt	r3, r3, r2
 80050d4:	18ed      	addgt	r5, r5, r3
 80050d6:	2600      	movs	r6, #0
 80050d8:	341a      	adds	r4, #26
 80050da:	42b5      	cmp	r5, r6
 80050dc:	d11a      	bne.n	8005114 <_printf_common+0xc8>
 80050de:	2000      	movs	r0, #0
 80050e0:	e008      	b.n	80050f4 <_printf_common+0xa8>
 80050e2:	2301      	movs	r3, #1
 80050e4:	4652      	mov	r2, sl
 80050e6:	4649      	mov	r1, r9
 80050e8:	4638      	mov	r0, r7
 80050ea:	47c0      	blx	r8
 80050ec:	3001      	adds	r0, #1
 80050ee:	d103      	bne.n	80050f8 <_printf_common+0xac>
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f8:	3501      	adds	r5, #1
 80050fa:	e7c6      	b.n	800508a <_printf_common+0x3e>
 80050fc:	18e1      	adds	r1, r4, r3
 80050fe:	1c5a      	adds	r2, r3, #1
 8005100:	2030      	movs	r0, #48	; 0x30
 8005102:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005106:	4422      	add	r2, r4
 8005108:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800510c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005110:	3302      	adds	r3, #2
 8005112:	e7c7      	b.n	80050a4 <_printf_common+0x58>
 8005114:	2301      	movs	r3, #1
 8005116:	4622      	mov	r2, r4
 8005118:	4649      	mov	r1, r9
 800511a:	4638      	mov	r0, r7
 800511c:	47c0      	blx	r8
 800511e:	3001      	adds	r0, #1
 8005120:	d0e6      	beq.n	80050f0 <_printf_common+0xa4>
 8005122:	3601      	adds	r6, #1
 8005124:	e7d9      	b.n	80050da <_printf_common+0x8e>
	...

08005128 <_printf_i>:
 8005128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800512c:	460c      	mov	r4, r1
 800512e:	4691      	mov	r9, r2
 8005130:	7e27      	ldrb	r7, [r4, #24]
 8005132:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005134:	2f78      	cmp	r7, #120	; 0x78
 8005136:	4680      	mov	r8, r0
 8005138:	469a      	mov	sl, r3
 800513a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800513e:	d807      	bhi.n	8005150 <_printf_i+0x28>
 8005140:	2f62      	cmp	r7, #98	; 0x62
 8005142:	d80a      	bhi.n	800515a <_printf_i+0x32>
 8005144:	2f00      	cmp	r7, #0
 8005146:	f000 80d8 	beq.w	80052fa <_printf_i+0x1d2>
 800514a:	2f58      	cmp	r7, #88	; 0x58
 800514c:	f000 80a3 	beq.w	8005296 <_printf_i+0x16e>
 8005150:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005154:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005158:	e03a      	b.n	80051d0 <_printf_i+0xa8>
 800515a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800515e:	2b15      	cmp	r3, #21
 8005160:	d8f6      	bhi.n	8005150 <_printf_i+0x28>
 8005162:	a001      	add	r0, pc, #4	; (adr r0, 8005168 <_printf_i+0x40>)
 8005164:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005168:	080051c1 	.word	0x080051c1
 800516c:	080051d5 	.word	0x080051d5
 8005170:	08005151 	.word	0x08005151
 8005174:	08005151 	.word	0x08005151
 8005178:	08005151 	.word	0x08005151
 800517c:	08005151 	.word	0x08005151
 8005180:	080051d5 	.word	0x080051d5
 8005184:	08005151 	.word	0x08005151
 8005188:	08005151 	.word	0x08005151
 800518c:	08005151 	.word	0x08005151
 8005190:	08005151 	.word	0x08005151
 8005194:	080052e1 	.word	0x080052e1
 8005198:	08005205 	.word	0x08005205
 800519c:	080052c3 	.word	0x080052c3
 80051a0:	08005151 	.word	0x08005151
 80051a4:	08005151 	.word	0x08005151
 80051a8:	08005303 	.word	0x08005303
 80051ac:	08005151 	.word	0x08005151
 80051b0:	08005205 	.word	0x08005205
 80051b4:	08005151 	.word	0x08005151
 80051b8:	08005151 	.word	0x08005151
 80051bc:	080052cb 	.word	0x080052cb
 80051c0:	680b      	ldr	r3, [r1, #0]
 80051c2:	1d1a      	adds	r2, r3, #4
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	600a      	str	r2, [r1, #0]
 80051c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0a3      	b.n	800531c <_printf_i+0x1f4>
 80051d4:	6825      	ldr	r5, [r4, #0]
 80051d6:	6808      	ldr	r0, [r1, #0]
 80051d8:	062e      	lsls	r6, r5, #24
 80051da:	f100 0304 	add.w	r3, r0, #4
 80051de:	d50a      	bpl.n	80051f6 <_printf_i+0xce>
 80051e0:	6805      	ldr	r5, [r0, #0]
 80051e2:	600b      	str	r3, [r1, #0]
 80051e4:	2d00      	cmp	r5, #0
 80051e6:	da03      	bge.n	80051f0 <_printf_i+0xc8>
 80051e8:	232d      	movs	r3, #45	; 0x2d
 80051ea:	426d      	negs	r5, r5
 80051ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051f0:	485e      	ldr	r0, [pc, #376]	; (800536c <_printf_i+0x244>)
 80051f2:	230a      	movs	r3, #10
 80051f4:	e019      	b.n	800522a <_printf_i+0x102>
 80051f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051fa:	6805      	ldr	r5, [r0, #0]
 80051fc:	600b      	str	r3, [r1, #0]
 80051fe:	bf18      	it	ne
 8005200:	b22d      	sxthne	r5, r5
 8005202:	e7ef      	b.n	80051e4 <_printf_i+0xbc>
 8005204:	680b      	ldr	r3, [r1, #0]
 8005206:	6825      	ldr	r5, [r4, #0]
 8005208:	1d18      	adds	r0, r3, #4
 800520a:	6008      	str	r0, [r1, #0]
 800520c:	0628      	lsls	r0, r5, #24
 800520e:	d501      	bpl.n	8005214 <_printf_i+0xec>
 8005210:	681d      	ldr	r5, [r3, #0]
 8005212:	e002      	b.n	800521a <_printf_i+0xf2>
 8005214:	0669      	lsls	r1, r5, #25
 8005216:	d5fb      	bpl.n	8005210 <_printf_i+0xe8>
 8005218:	881d      	ldrh	r5, [r3, #0]
 800521a:	4854      	ldr	r0, [pc, #336]	; (800536c <_printf_i+0x244>)
 800521c:	2f6f      	cmp	r7, #111	; 0x6f
 800521e:	bf0c      	ite	eq
 8005220:	2308      	moveq	r3, #8
 8005222:	230a      	movne	r3, #10
 8005224:	2100      	movs	r1, #0
 8005226:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800522a:	6866      	ldr	r6, [r4, #4]
 800522c:	60a6      	str	r6, [r4, #8]
 800522e:	2e00      	cmp	r6, #0
 8005230:	bfa2      	ittt	ge
 8005232:	6821      	ldrge	r1, [r4, #0]
 8005234:	f021 0104 	bicge.w	r1, r1, #4
 8005238:	6021      	strge	r1, [r4, #0]
 800523a:	b90d      	cbnz	r5, 8005240 <_printf_i+0x118>
 800523c:	2e00      	cmp	r6, #0
 800523e:	d04d      	beq.n	80052dc <_printf_i+0x1b4>
 8005240:	4616      	mov	r6, r2
 8005242:	fbb5 f1f3 	udiv	r1, r5, r3
 8005246:	fb03 5711 	mls	r7, r3, r1, r5
 800524a:	5dc7      	ldrb	r7, [r0, r7]
 800524c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005250:	462f      	mov	r7, r5
 8005252:	42bb      	cmp	r3, r7
 8005254:	460d      	mov	r5, r1
 8005256:	d9f4      	bls.n	8005242 <_printf_i+0x11a>
 8005258:	2b08      	cmp	r3, #8
 800525a:	d10b      	bne.n	8005274 <_printf_i+0x14c>
 800525c:	6823      	ldr	r3, [r4, #0]
 800525e:	07df      	lsls	r7, r3, #31
 8005260:	d508      	bpl.n	8005274 <_printf_i+0x14c>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	6861      	ldr	r1, [r4, #4]
 8005266:	4299      	cmp	r1, r3
 8005268:	bfde      	ittt	le
 800526a:	2330      	movle	r3, #48	; 0x30
 800526c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005274:	1b92      	subs	r2, r2, r6
 8005276:	6122      	str	r2, [r4, #16]
 8005278:	f8cd a000 	str.w	sl, [sp]
 800527c:	464b      	mov	r3, r9
 800527e:	aa03      	add	r2, sp, #12
 8005280:	4621      	mov	r1, r4
 8005282:	4640      	mov	r0, r8
 8005284:	f7ff fee2 	bl	800504c <_printf_common>
 8005288:	3001      	adds	r0, #1
 800528a:	d14c      	bne.n	8005326 <_printf_i+0x1fe>
 800528c:	f04f 30ff 	mov.w	r0, #4294967295
 8005290:	b004      	add	sp, #16
 8005292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005296:	4835      	ldr	r0, [pc, #212]	; (800536c <_printf_i+0x244>)
 8005298:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800529c:	6823      	ldr	r3, [r4, #0]
 800529e:	680e      	ldr	r6, [r1, #0]
 80052a0:	061f      	lsls	r7, r3, #24
 80052a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80052a6:	600e      	str	r6, [r1, #0]
 80052a8:	d514      	bpl.n	80052d4 <_printf_i+0x1ac>
 80052aa:	07d9      	lsls	r1, r3, #31
 80052ac:	bf44      	itt	mi
 80052ae:	f043 0320 	orrmi.w	r3, r3, #32
 80052b2:	6023      	strmi	r3, [r4, #0]
 80052b4:	b91d      	cbnz	r5, 80052be <_printf_i+0x196>
 80052b6:	6823      	ldr	r3, [r4, #0]
 80052b8:	f023 0320 	bic.w	r3, r3, #32
 80052bc:	6023      	str	r3, [r4, #0]
 80052be:	2310      	movs	r3, #16
 80052c0:	e7b0      	b.n	8005224 <_printf_i+0xfc>
 80052c2:	6823      	ldr	r3, [r4, #0]
 80052c4:	f043 0320 	orr.w	r3, r3, #32
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	2378      	movs	r3, #120	; 0x78
 80052cc:	4828      	ldr	r0, [pc, #160]	; (8005370 <_printf_i+0x248>)
 80052ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052d2:	e7e3      	b.n	800529c <_printf_i+0x174>
 80052d4:	065e      	lsls	r6, r3, #25
 80052d6:	bf48      	it	mi
 80052d8:	b2ad      	uxthmi	r5, r5
 80052da:	e7e6      	b.n	80052aa <_printf_i+0x182>
 80052dc:	4616      	mov	r6, r2
 80052de:	e7bb      	b.n	8005258 <_printf_i+0x130>
 80052e0:	680b      	ldr	r3, [r1, #0]
 80052e2:	6826      	ldr	r6, [r4, #0]
 80052e4:	6960      	ldr	r0, [r4, #20]
 80052e6:	1d1d      	adds	r5, r3, #4
 80052e8:	600d      	str	r5, [r1, #0]
 80052ea:	0635      	lsls	r5, r6, #24
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	d501      	bpl.n	80052f4 <_printf_i+0x1cc>
 80052f0:	6018      	str	r0, [r3, #0]
 80052f2:	e002      	b.n	80052fa <_printf_i+0x1d2>
 80052f4:	0671      	lsls	r1, r6, #25
 80052f6:	d5fb      	bpl.n	80052f0 <_printf_i+0x1c8>
 80052f8:	8018      	strh	r0, [r3, #0]
 80052fa:	2300      	movs	r3, #0
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	4616      	mov	r6, r2
 8005300:	e7ba      	b.n	8005278 <_printf_i+0x150>
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	1d1a      	adds	r2, r3, #4
 8005306:	600a      	str	r2, [r1, #0]
 8005308:	681e      	ldr	r6, [r3, #0]
 800530a:	6862      	ldr	r2, [r4, #4]
 800530c:	2100      	movs	r1, #0
 800530e:	4630      	mov	r0, r6
 8005310:	f7fa ff66 	bl	80001e0 <memchr>
 8005314:	b108      	cbz	r0, 800531a <_printf_i+0x1f2>
 8005316:	1b80      	subs	r0, r0, r6
 8005318:	6060      	str	r0, [r4, #4]
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	6123      	str	r3, [r4, #16]
 800531e:	2300      	movs	r3, #0
 8005320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005324:	e7a8      	b.n	8005278 <_printf_i+0x150>
 8005326:	6923      	ldr	r3, [r4, #16]
 8005328:	4632      	mov	r2, r6
 800532a:	4649      	mov	r1, r9
 800532c:	4640      	mov	r0, r8
 800532e:	47d0      	blx	sl
 8005330:	3001      	adds	r0, #1
 8005332:	d0ab      	beq.n	800528c <_printf_i+0x164>
 8005334:	6823      	ldr	r3, [r4, #0]
 8005336:	079b      	lsls	r3, r3, #30
 8005338:	d413      	bmi.n	8005362 <_printf_i+0x23a>
 800533a:	68e0      	ldr	r0, [r4, #12]
 800533c:	9b03      	ldr	r3, [sp, #12]
 800533e:	4298      	cmp	r0, r3
 8005340:	bfb8      	it	lt
 8005342:	4618      	movlt	r0, r3
 8005344:	e7a4      	b.n	8005290 <_printf_i+0x168>
 8005346:	2301      	movs	r3, #1
 8005348:	4632      	mov	r2, r6
 800534a:	4649      	mov	r1, r9
 800534c:	4640      	mov	r0, r8
 800534e:	47d0      	blx	sl
 8005350:	3001      	adds	r0, #1
 8005352:	d09b      	beq.n	800528c <_printf_i+0x164>
 8005354:	3501      	adds	r5, #1
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	9903      	ldr	r1, [sp, #12]
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	42ab      	cmp	r3, r5
 800535e:	dcf2      	bgt.n	8005346 <_printf_i+0x21e>
 8005360:	e7eb      	b.n	800533a <_printf_i+0x212>
 8005362:	2500      	movs	r5, #0
 8005364:	f104 0619 	add.w	r6, r4, #25
 8005368:	e7f5      	b.n	8005356 <_printf_i+0x22e>
 800536a:	bf00      	nop
 800536c:	08005685 	.word	0x08005685
 8005370:	08005696 	.word	0x08005696

08005374 <memcpy>:
 8005374:	440a      	add	r2, r1
 8005376:	4291      	cmp	r1, r2
 8005378:	f100 33ff 	add.w	r3, r0, #4294967295
 800537c:	d100      	bne.n	8005380 <memcpy+0xc>
 800537e:	4770      	bx	lr
 8005380:	b510      	push	{r4, lr}
 8005382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800538a:	4291      	cmp	r1, r2
 800538c:	d1f9      	bne.n	8005382 <memcpy+0xe>
 800538e:	bd10      	pop	{r4, pc}

08005390 <memmove>:
 8005390:	4288      	cmp	r0, r1
 8005392:	b510      	push	{r4, lr}
 8005394:	eb01 0402 	add.w	r4, r1, r2
 8005398:	d902      	bls.n	80053a0 <memmove+0x10>
 800539a:	4284      	cmp	r4, r0
 800539c:	4623      	mov	r3, r4
 800539e:	d807      	bhi.n	80053b0 <memmove+0x20>
 80053a0:	1e43      	subs	r3, r0, #1
 80053a2:	42a1      	cmp	r1, r4
 80053a4:	d008      	beq.n	80053b8 <memmove+0x28>
 80053a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ae:	e7f8      	b.n	80053a2 <memmove+0x12>
 80053b0:	4402      	add	r2, r0
 80053b2:	4601      	mov	r1, r0
 80053b4:	428a      	cmp	r2, r1
 80053b6:	d100      	bne.n	80053ba <memmove+0x2a>
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053c2:	e7f7      	b.n	80053b4 <memmove+0x24>

080053c4 <_free_r>:
 80053c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053c6:	2900      	cmp	r1, #0
 80053c8:	d048      	beq.n	800545c <_free_r+0x98>
 80053ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053ce:	9001      	str	r0, [sp, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f1a1 0404 	sub.w	r4, r1, #4
 80053d6:	bfb8      	it	lt
 80053d8:	18e4      	addlt	r4, r4, r3
 80053da:	f000 f8d3 	bl	8005584 <__malloc_lock>
 80053de:	4a20      	ldr	r2, [pc, #128]	; (8005460 <_free_r+0x9c>)
 80053e0:	9801      	ldr	r0, [sp, #4]
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	4615      	mov	r5, r2
 80053e6:	b933      	cbnz	r3, 80053f6 <_free_r+0x32>
 80053e8:	6063      	str	r3, [r4, #4]
 80053ea:	6014      	str	r4, [r2, #0]
 80053ec:	b003      	add	sp, #12
 80053ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053f2:	f000 b8cd 	b.w	8005590 <__malloc_unlock>
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	d90b      	bls.n	8005412 <_free_r+0x4e>
 80053fa:	6821      	ldr	r1, [r4, #0]
 80053fc:	1862      	adds	r2, r4, r1
 80053fe:	4293      	cmp	r3, r2
 8005400:	bf04      	itt	eq
 8005402:	681a      	ldreq	r2, [r3, #0]
 8005404:	685b      	ldreq	r3, [r3, #4]
 8005406:	6063      	str	r3, [r4, #4]
 8005408:	bf04      	itt	eq
 800540a:	1852      	addeq	r2, r2, r1
 800540c:	6022      	streq	r2, [r4, #0]
 800540e:	602c      	str	r4, [r5, #0]
 8005410:	e7ec      	b.n	80053ec <_free_r+0x28>
 8005412:	461a      	mov	r2, r3
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	b10b      	cbz	r3, 800541c <_free_r+0x58>
 8005418:	42a3      	cmp	r3, r4
 800541a:	d9fa      	bls.n	8005412 <_free_r+0x4e>
 800541c:	6811      	ldr	r1, [r2, #0]
 800541e:	1855      	adds	r5, r2, r1
 8005420:	42a5      	cmp	r5, r4
 8005422:	d10b      	bne.n	800543c <_free_r+0x78>
 8005424:	6824      	ldr	r4, [r4, #0]
 8005426:	4421      	add	r1, r4
 8005428:	1854      	adds	r4, r2, r1
 800542a:	42a3      	cmp	r3, r4
 800542c:	6011      	str	r1, [r2, #0]
 800542e:	d1dd      	bne.n	80053ec <_free_r+0x28>
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	6053      	str	r3, [r2, #4]
 8005436:	4421      	add	r1, r4
 8005438:	6011      	str	r1, [r2, #0]
 800543a:	e7d7      	b.n	80053ec <_free_r+0x28>
 800543c:	d902      	bls.n	8005444 <_free_r+0x80>
 800543e:	230c      	movs	r3, #12
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	e7d3      	b.n	80053ec <_free_r+0x28>
 8005444:	6825      	ldr	r5, [r4, #0]
 8005446:	1961      	adds	r1, r4, r5
 8005448:	428b      	cmp	r3, r1
 800544a:	bf04      	itt	eq
 800544c:	6819      	ldreq	r1, [r3, #0]
 800544e:	685b      	ldreq	r3, [r3, #4]
 8005450:	6063      	str	r3, [r4, #4]
 8005452:	bf04      	itt	eq
 8005454:	1949      	addeq	r1, r1, r5
 8005456:	6021      	streq	r1, [r4, #0]
 8005458:	6054      	str	r4, [r2, #4]
 800545a:	e7c7      	b.n	80053ec <_free_r+0x28>
 800545c:	b003      	add	sp, #12
 800545e:	bd30      	pop	{r4, r5, pc}
 8005460:	200000bc 	.word	0x200000bc

08005464 <_malloc_r>:
 8005464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005466:	1ccd      	adds	r5, r1, #3
 8005468:	f025 0503 	bic.w	r5, r5, #3
 800546c:	3508      	adds	r5, #8
 800546e:	2d0c      	cmp	r5, #12
 8005470:	bf38      	it	cc
 8005472:	250c      	movcc	r5, #12
 8005474:	2d00      	cmp	r5, #0
 8005476:	4606      	mov	r6, r0
 8005478:	db01      	blt.n	800547e <_malloc_r+0x1a>
 800547a:	42a9      	cmp	r1, r5
 800547c:	d903      	bls.n	8005486 <_malloc_r+0x22>
 800547e:	230c      	movs	r3, #12
 8005480:	6033      	str	r3, [r6, #0]
 8005482:	2000      	movs	r0, #0
 8005484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005486:	f000 f87d 	bl	8005584 <__malloc_lock>
 800548a:	4921      	ldr	r1, [pc, #132]	; (8005510 <_malloc_r+0xac>)
 800548c:	680a      	ldr	r2, [r1, #0]
 800548e:	4614      	mov	r4, r2
 8005490:	b99c      	cbnz	r4, 80054ba <_malloc_r+0x56>
 8005492:	4f20      	ldr	r7, [pc, #128]	; (8005514 <_malloc_r+0xb0>)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	b923      	cbnz	r3, 80054a2 <_malloc_r+0x3e>
 8005498:	4621      	mov	r1, r4
 800549a:	4630      	mov	r0, r6
 800549c:	f000 f862 	bl	8005564 <_sbrk_r>
 80054a0:	6038      	str	r0, [r7, #0]
 80054a2:	4629      	mov	r1, r5
 80054a4:	4630      	mov	r0, r6
 80054a6:	f000 f85d 	bl	8005564 <_sbrk_r>
 80054aa:	1c43      	adds	r3, r0, #1
 80054ac:	d123      	bne.n	80054f6 <_malloc_r+0x92>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	4630      	mov	r0, r6
 80054b4:	f000 f86c 	bl	8005590 <__malloc_unlock>
 80054b8:	e7e3      	b.n	8005482 <_malloc_r+0x1e>
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	1b5b      	subs	r3, r3, r5
 80054be:	d417      	bmi.n	80054f0 <_malloc_r+0x8c>
 80054c0:	2b0b      	cmp	r3, #11
 80054c2:	d903      	bls.n	80054cc <_malloc_r+0x68>
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	441c      	add	r4, r3
 80054c8:	6025      	str	r5, [r4, #0]
 80054ca:	e004      	b.n	80054d6 <_malloc_r+0x72>
 80054cc:	6863      	ldr	r3, [r4, #4]
 80054ce:	42a2      	cmp	r2, r4
 80054d0:	bf0c      	ite	eq
 80054d2:	600b      	streq	r3, [r1, #0]
 80054d4:	6053      	strne	r3, [r2, #4]
 80054d6:	4630      	mov	r0, r6
 80054d8:	f000 f85a 	bl	8005590 <__malloc_unlock>
 80054dc:	f104 000b 	add.w	r0, r4, #11
 80054e0:	1d23      	adds	r3, r4, #4
 80054e2:	f020 0007 	bic.w	r0, r0, #7
 80054e6:	1ac2      	subs	r2, r0, r3
 80054e8:	d0cc      	beq.n	8005484 <_malloc_r+0x20>
 80054ea:	1a1b      	subs	r3, r3, r0
 80054ec:	50a3      	str	r3, [r4, r2]
 80054ee:	e7c9      	b.n	8005484 <_malloc_r+0x20>
 80054f0:	4622      	mov	r2, r4
 80054f2:	6864      	ldr	r4, [r4, #4]
 80054f4:	e7cc      	b.n	8005490 <_malloc_r+0x2c>
 80054f6:	1cc4      	adds	r4, r0, #3
 80054f8:	f024 0403 	bic.w	r4, r4, #3
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	d0e3      	beq.n	80054c8 <_malloc_r+0x64>
 8005500:	1a21      	subs	r1, r4, r0
 8005502:	4630      	mov	r0, r6
 8005504:	f000 f82e 	bl	8005564 <_sbrk_r>
 8005508:	3001      	adds	r0, #1
 800550a:	d1dd      	bne.n	80054c8 <_malloc_r+0x64>
 800550c:	e7cf      	b.n	80054ae <_malloc_r+0x4a>
 800550e:	bf00      	nop
 8005510:	200000bc 	.word	0x200000bc
 8005514:	200000c0 	.word	0x200000c0

08005518 <_realloc_r>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	4607      	mov	r7, r0
 800551c:	4614      	mov	r4, r2
 800551e:	460e      	mov	r6, r1
 8005520:	b921      	cbnz	r1, 800552c <_realloc_r+0x14>
 8005522:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005526:	4611      	mov	r1, r2
 8005528:	f7ff bf9c 	b.w	8005464 <_malloc_r>
 800552c:	b922      	cbnz	r2, 8005538 <_realloc_r+0x20>
 800552e:	f7ff ff49 	bl	80053c4 <_free_r>
 8005532:	4625      	mov	r5, r4
 8005534:	4628      	mov	r0, r5
 8005536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005538:	f000 f830 	bl	800559c <_malloc_usable_size_r>
 800553c:	42a0      	cmp	r0, r4
 800553e:	d20f      	bcs.n	8005560 <_realloc_r+0x48>
 8005540:	4621      	mov	r1, r4
 8005542:	4638      	mov	r0, r7
 8005544:	f7ff ff8e 	bl	8005464 <_malloc_r>
 8005548:	4605      	mov	r5, r0
 800554a:	2800      	cmp	r0, #0
 800554c:	d0f2      	beq.n	8005534 <_realloc_r+0x1c>
 800554e:	4631      	mov	r1, r6
 8005550:	4622      	mov	r2, r4
 8005552:	f7ff ff0f 	bl	8005374 <memcpy>
 8005556:	4631      	mov	r1, r6
 8005558:	4638      	mov	r0, r7
 800555a:	f7ff ff33 	bl	80053c4 <_free_r>
 800555e:	e7e9      	b.n	8005534 <_realloc_r+0x1c>
 8005560:	4635      	mov	r5, r6
 8005562:	e7e7      	b.n	8005534 <_realloc_r+0x1c>

08005564 <_sbrk_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	4d06      	ldr	r5, [pc, #24]	; (8005580 <_sbrk_r+0x1c>)
 8005568:	2300      	movs	r3, #0
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	f7fb fdbe 	bl	80010f0 <_sbrk>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_sbrk_r+0x1a>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_sbrk_r+0x1a>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	200002ec 	.word	0x200002ec

08005584 <__malloc_lock>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__malloc_lock+0x8>)
 8005586:	f000 b811 	b.w	80055ac <__retarget_lock_acquire_recursive>
 800558a:	bf00      	nop
 800558c:	200002f4 	.word	0x200002f4

08005590 <__malloc_unlock>:
 8005590:	4801      	ldr	r0, [pc, #4]	; (8005598 <__malloc_unlock+0x8>)
 8005592:	f000 b80c 	b.w	80055ae <__retarget_lock_release_recursive>
 8005596:	bf00      	nop
 8005598:	200002f4 	.word	0x200002f4

0800559c <_malloc_usable_size_r>:
 800559c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a0:	1f18      	subs	r0, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfbc      	itt	lt
 80055a6:	580b      	ldrlt	r3, [r1, r0]
 80055a8:	18c0      	addlt	r0, r0, r3
 80055aa:	4770      	bx	lr

080055ac <__retarget_lock_acquire_recursive>:
 80055ac:	4770      	bx	lr

080055ae <__retarget_lock_release_recursive>:
 80055ae:	4770      	bx	lr

080055b0 <_init>:
 80055b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055b2:	bf00      	nop
 80055b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b6:	bc08      	pop	{r3}
 80055b8:	469e      	mov	lr, r3
 80055ba:	4770      	bx	lr

080055bc <_fini>:
 80055bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055be:	bf00      	nop
 80055c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055c2:	bc08      	pop	{r3}
 80055c4:	469e      	mov	lr, r3
 80055c6:	4770      	bx	lr
