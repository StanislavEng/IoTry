
HAL_VALIDATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004558  08004558  00014558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004604  08004604  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800460c  0800460c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800460c  0800460c  0001460c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000010  08004624  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004624  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015206  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002514  00000000  00000000  00035246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001410  00000000  00000000  00037760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001328  00000000  00000000  00038b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027622  00000000  00000000  00039e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001710a  00000000  00000000  000614ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7111  00000000  00000000  000785c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016f6d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005630  00000000  00000000  0016f728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004540 	.word	0x08004540

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004540 	.word	0x08004540

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b092      	sub	sp, #72	; 0x48
 80004d4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef ret; // status of I2C commands
	uint8_t text[50] = "Hello!\r\n";  // text array for outputting in UART
 80004d6:	4a2d      	ldr	r2, [pc, #180]	; (800058c <main+0xbc>)
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	ca07      	ldmia	r2, {r0, r1, r2}
 80004dc:	c303      	stmia	r3!, {r0, r1}
 80004de:	701a      	strb	r2, [r3, #0]
 80004e0:	f107 030d 	add.w	r3, r7, #13
 80004e4:	2229      	movs	r2, #41	; 0x29
 80004e6:	2100      	movs	r1, #0
 80004e8:	4618      	mov	r0, r3
 80004ea:	f004 f821 	bl	8004530 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fd7a 	bl	8000fe6 <HAL_Init>

  /* USER CODE BEGIN Init */

  /// initialize IMU before interrupt
  // wait 15 ms for imu to wake up
    HAL_Delay(15);
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 fdec 	bl	80010d0 <HAL_Delay>

    // print out start message for debugging
    HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	4618      	mov	r0, r3
 80004fc:	f7ff fe64 	bl	80001c8 <strlen>
 8000500:	4603      	mov	r3, r0
 8000502:	b29a      	uxth	r2, r3
 8000504:	1d39      	adds	r1, r7, #4
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	4821      	ldr	r0, [pc, #132]	; (8000590 <main+0xc0>)
 800050c:	f003 fb66 	bl	8003bdc <HAL_UART_Transmit>

    //// configure the I2C register for IMU
    ret = HAL_I2C_Mem_Write(&hi2c2, LSM6_ADDR, 0x10, 1, &config, 1, 50);
 8000510:	23d4      	movs	r3, #212	; 0xd4
 8000512:	b299      	uxth	r1, r3
 8000514:	2332      	movs	r3, #50	; 0x32
 8000516:	9302      	str	r3, [sp, #8]
 8000518:	2301      	movs	r3, #1
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <main+0xc4>)
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	2301      	movs	r3, #1
 8000522:	2210      	movs	r2, #16
 8000524:	481c      	ldr	r0, [pc, #112]	; (8000598 <main+0xc8>)
 8000526:	f001 fa89 	bl	8001a3c <HAL_I2C_Mem_Write>
 800052a:	4603      	mov	r3, r0
 800052c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if(ret != HAL_OK)
 8000530:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000534:	2b00      	cmp	r3, #0
 8000536:	d011      	beq.n	800055c <main+0x8c>
    {
  		//return ret;
  		strcpy((char*)text,"I2C Error\r\n");
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	4a18      	ldr	r2, [pc, #96]	; (800059c <main+0xcc>)
 800053c:	ca07      	ldmia	r2, {r0, r1, r2}
 800053e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		while (1){HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);}
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe3f 	bl	80001c8 <strlen>
 800054a:	4603      	mov	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	1d39      	adds	r1, r7, #4
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
 8000554:	480e      	ldr	r0, [pc, #56]	; (8000590 <main+0xc0>)
 8000556:	f003 fb41 	bl	8003bdc <HAL_UART_Transmit>
 800055a:	e7f2      	b.n	8000542 <main+0x72>
    ////

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055c:	f000 f824 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000560:	f000 f9fc 	bl	800095c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000564:	f000 f8b2 	bl	80006cc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8000568:	f000 f8e8 	bl	800073c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800056c:	f000 f996 	bl	800089c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000570:	f000 f9c4 	bl	80008fc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000574:	f000 f922 	bl	80007bc <MX_TIM6_Init>
  MX_TIM7_Init();
 8000578:	f000 f958 	bl	800082c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  //LSM6DSL_INIT();
  HAL_TIM_Base_Start(&htim6);
 800057c:	4808      	ldr	r0, [pc, #32]	; (80005a0 <main+0xd0>)
 800057e:	f003 f955 	bl	800382c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim7);
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <main+0xd4>)
 8000584:	f003 f952 	bl	800382c <HAL_TIM_Base_Start>
	*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0xb8>
 800058a:	bf00      	nop
 800058c:	08004564 	.word	0x08004564
 8000590:	2000015c 	.word	0x2000015c
 8000594:	20000000 	.word	0x20000000
 8000598:	20000110 	.word	0x20000110
 800059c:	08004558 	.word	0x08004558
 80005a0:	200001e0 	.word	0x200001e0
 80005a4:	2000022c 	.word	0x2000022c

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b0b8      	sub	sp, #224	; 0xe0
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f003 ffba 	bl	8004530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005cc:	463b      	mov	r3, r7
 80005ce:	2288      	movs	r2, #136	; 0x88
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f003 ffac 	bl	8004530 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f001 fda4 	bl	8002124 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005dc:	4b39      	ldr	r3, [pc, #228]	; (80006c4 <SystemClock_Config+0x11c>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e2:	4a38      	ldr	r2, [pc, #224]	; (80006c4 <SystemClock_Config+0x11c>)
 80005e4:	f023 0318 	bic.w	r3, r3, #24
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005ec:	2314      	movs	r3, #20
 80005ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fe:	2300      	movs	r3, #0
 8000600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000604:	2360      	movs	r3, #96	; 0x60
 8000606:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060a:	2302      	movs	r3, #2
 800060c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 800061c:	2328      	movs	r3, #40	; 0x28
 800061e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000622:	2307      	movs	r3, #7
 8000624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000638:	4618      	mov	r0, r3
 800063a:	f001 fde7 	bl	800220c <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000644:	f000 fac4 	bl	8000bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2303      	movs	r3, #3
 8000650:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000666:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800066a:	2104      	movs	r1, #4
 800066c:	4618      	mov	r0, r3
 800066e:	f002 f9b3 	bl	80029d8 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000678:	f000 faaa 	bl	8000bd0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <SystemClock_Config+0x120>)
 800067e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000684:	2300      	movs	r3, #0
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000688:	2300      	movs	r3, #0
 800068a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fba5 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80006a0:	f000 fa96 	bl	8000bd0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a8:	f001 fd5a 	bl	8002160 <HAL_PWREx_ControlVoltageScaling>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x10e>
  {
    Error_Handler();
 80006b2:	f000 fa8d 	bl	8000bd0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006b6:	f002 fe7f 	bl	80033b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006ba:	bf00      	nop
 80006bc:	37e0      	adds	r7, #224	; 0xe0
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	00010085 	.word	0x00010085

080006cc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80006d0:	4b18      	ldr	r3, [pc, #96]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006d2:	4a19      	ldr	r2, [pc, #100]	; (8000738 <MX_DFSDM1_Init+0x6c>)
 80006d4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006d8:	2201      	movs	r2, #1
 80006da:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80006e2:	4b14      	ldr	r3, [pc, #80]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006e4:	2202      	movs	r2, #2
 80006e6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80006f4:	4b0f      	ldr	r3, [pc, #60]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fa:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	; (8000734 <MX_DFSDM1_Init+0x68>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000702:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_DFSDM1_Init+0x68>)
 8000704:	2204      	movs	r2, #4
 8000706:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <MX_DFSDM1_Init+0x68>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_DFSDM1_Init+0x68>)
 8000710:	2201      	movs	r2, #1
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <MX_DFSDM1_Init+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800071a:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_DFSDM1_Init+0x68>)
 800071c:	2200      	movs	r2, #0
 800071e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_DFSDM1_Init+0x68>)
 8000722:	f000 fe0b 	bl	800133c <HAL_DFSDM_ChannelInit>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800072c:	f000 fa50 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000054 	.word	0x20000054
 8000738:	40016020 	.word	0x40016020

0800073c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_I2C2_Init+0x78>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000746:	4b1a      	ldr	r3, [pc, #104]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000748:	4a1b      	ldr	r2, [pc, #108]	; (80007b8 <MX_I2C2_Init+0x7c>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <MX_I2C2_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000754:	2201      	movs	r2, #1
 8000756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800075e:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_I2C2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000776:	480e      	ldr	r0, [pc, #56]	; (80007b0 <MX_I2C2_Init+0x74>)
 8000778:	f001 f8d1 	bl	800191e <HAL_I2C_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000782:	f000 fa25 	bl	8000bd0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4809      	ldr	r0, [pc, #36]	; (80007b0 <MX_I2C2_Init+0x74>)
 800078a:	f001 fc33 	bl	8001ff4 <HAL_I2CEx_ConfigAnalogFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000794:	f000 fa1c 	bl	8000bd0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000798:	2100      	movs	r1, #0
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_I2C2_Init+0x74>)
 800079c:	f001 fc75 	bl	800208a <HAL_I2CEx_ConfigDigitalFilter>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007a6:	f000 fa13 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000110 	.word	0x20000110
 80007b4:	40005800 	.word	0x40005800
 80007b8:	10909cec 	.word	0x10909cec

080007bc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_TIM6_Init+0x68>)
 80007ce:	4a16      	ldr	r2, [pc, #88]	; (8000828 <MX_TIM6_Init+0x6c>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <MX_TIM6_Init+0x68>)
 80007d4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007d8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_TIM6_Init+0x68>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000 - 1;
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <MX_TIM6_Init+0x68>)
 80007e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80007e6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM6_Init+0x68>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007ee:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_TIM6_Init+0x68>)
 80007f0:	f002 ffc4 	bl	800377c <HAL_TIM_Base_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007fa:	f000 f9e9 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	; (8000824 <MX_TIM6_Init+0x68>)
 800080c:	f003 f910 	bl	8003a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000816:	f000 f9db 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	200001e0 	.word	0x200001e0
 8000828:	40001000 	.word	0x40001000

0800082c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM7_Init+0x68>)
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <MX_TIM7_Init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 16000 - 1;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_TIM7_Init+0x68>)
 8000844:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000848:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_TIM7_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000 - 1;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_TIM7_Init+0x68>)
 8000852:	f242 720f 	movw	r2, #9999	; 0x270f
 8000856:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_TIM7_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_TIM7_Init+0x68>)
 8000860:	f002 ff8c 	bl	800377c <HAL_TIM_Base_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800086a:	f000 f9b1 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <MX_TIM7_Init+0x68>)
 800087c:	f003 f8d8 	bl	8003a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000886:	f000 f9a3 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000022c 	.word	0x2000022c
 8000898:	40001400 	.word	0x40001400

0800089c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_USART1_UART_Init+0x5c>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0f      	ldr	r3, [pc, #60]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_USART1_UART_Init+0x58>)
 80008e0:	f003 f92e 	bl	8003b40 <HAL_UART_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ea:	f000 f971 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000015c 	.word	0x2000015c
 80008f8:	40013800 	.word	0x40013800

080008fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <MX_USART3_UART_Init+0x5c>)
 8000904:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000908:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART3_UART_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000922:	220c      	movs	r2, #12
 8000924:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART3_UART_Init+0x58>)
 800092e:	2200      	movs	r2, #0
 8000930:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART3_UART_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART3_UART_Init+0x58>)
 8000940:	f003 f8fe 	bl	8003b40 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800094a:	f000 f941 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000008c 	.word	0x2000008c
 8000958:	40004800 	.word	0x40004800

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000972:	4b90      	ldr	r3, [pc, #576]	; (8000bb4 <MX_GPIO_Init+0x258>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a8f      	ldr	r2, [pc, #572]	; (8000bb4 <MX_GPIO_Init+0x258>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b8d      	ldr	r3, [pc, #564]	; (8000bb4 <MX_GPIO_Init+0x258>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	4b8a      	ldr	r3, [pc, #552]	; (8000bb4 <MX_GPIO_Init+0x258>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a89      	ldr	r2, [pc, #548]	; (8000bb4 <MX_GPIO_Init+0x258>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b87      	ldr	r3, [pc, #540]	; (8000bb4 <MX_GPIO_Init+0x258>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b84      	ldr	r3, [pc, #528]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a83      	ldr	r2, [pc, #524]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b81      	ldr	r3, [pc, #516]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	4b7e      	ldr	r3, [pc, #504]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	4a7d      	ldr	r2, [pc, #500]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c6:	4b7b      	ldr	r3, [pc, #492]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d2:	4b78      	ldr	r3, [pc, #480]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	4a77      	ldr	r2, [pc, #476]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009d8:	f043 0308 	orr.w	r3, r3, #8
 80009dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009de:	4b75      	ldr	r3, [pc, #468]	; (8000bb4 <MX_GPIO_Init+0x258>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	f003 0308 	and.w	r3, r3, #8
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 80009f0:	4871      	ldr	r0, [pc, #452]	; (8000bb8 <MX_GPIO_Init+0x25c>)
 80009f2:	f000 ff59 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 7190 	mov.w	r1, #288	; 0x120
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 ff52 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000a04:	2200      	movs	r2, #0
 8000a06:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a0a:	486c      	ldr	r0, [pc, #432]	; (8000bbc <MX_GPIO_Init+0x260>)
 8000a0c:	f000 ff4c 	bl	80018a8 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 8000a16:	486a      	ldr	r0, [pc, #424]	; (8000bc0 <MX_GPIO_Init+0x264>)
 8000a18:	f000 ff46 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a22:	4867      	ldr	r0, [pc, #412]	; (8000bc0 <MX_GPIO_Init+0x264>)
 8000a24:	f000 ff40 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000a2e:	4865      	ldr	r0, [pc, #404]	; (8000bc4 <MX_GPIO_Init+0x268>)
 8000a30:	f000 ff3a 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2120      	movs	r1, #32
 8000a38:	4860      	ldr	r0, [pc, #384]	; (8000bbc <MX_GPIO_Init+0x260>)
 8000a3a:	f000 ff35 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2101      	movs	r1, #1
 8000a42:	485d      	ldr	r0, [pc, #372]	; (8000bb8 <MX_GPIO_Init+0x25c>)
 8000a44:	f000 ff30 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000a48:	f240 1315 	movw	r3, #277	; 0x115
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4855      	ldr	r0, [pc, #340]	; (8000bb8 <MX_GPIO_Init+0x25c>)
 8000a62:	f000 fd77 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000a66:	236a      	movs	r3, #106	; 0x6a
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6a:	4b57      	ldr	r3, [pc, #348]	; (8000bc8 <MX_GPIO_Init+0x26c>)
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	484f      	ldr	r0, [pc, #316]	; (8000bb8 <MX_GPIO_Init+0x25c>)
 8000a7a:	f000 fd6b 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a84:	4b51      	ldr	r3, [pc, #324]	; (8000bcc <MX_GPIO_Init+0x270>)
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	484c      	ldr	r0, [pc, #304]	; (8000bc4 <MX_GPIO_Init+0x268>)
 8000a94:	f000 fd5e 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|SPBTLE_RF_RST_Pin;
 8000a98:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f000 fd4e 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin|SPSGRF_915_SDN_Pin
 8000ab8:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000abc:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	483a      	ldr	r0, [pc, #232]	; (8000bbc <MX_GPIO_Init+0x260>)
 8000ad2:	f000 fd3f 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin;
 8000ad6:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000adc:	4b3a      	ldr	r3, [pc, #232]	; (8000bc8 <MX_GPIO_Init+0x26c>)
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4835      	ldr	r0, [pc, #212]	; (8000bc0 <MX_GPIO_Init+0x264>)
 8000aec:	f000 fd32 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|STSAFE_A100_RESET_Pin;
 8000af0:	f44f 5342 	mov.w	r3, #12416	; 0x3080
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	482d      	ldr	r0, [pc, #180]	; (8000bc0 <MX_GPIO_Init+0x264>)
 8000b0a:	f000 fd23 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b0e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	4827      	ldr	r0, [pc, #156]	; (8000bc4 <MX_GPIO_Init+0x268>)
 8000b28:	f000 fd14 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b2c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b32:	4b25      	ldr	r3, [pc, #148]	; (8000bc8 <MX_GPIO_Init+0x26c>)
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4820      	ldr	r0, [pc, #128]	; (8000bc4 <MX_GPIO_Init+0x268>)
 8000b42:	f000 fd07 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000b46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b58:	230a      	movs	r3, #10
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 fcf5 	bl	8001554 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000b6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b7c:	2306      	movs	r3, #6
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <MX_GPIO_Init+0x268>)
 8000b88:	f000 fce4 	bl	8001554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2100      	movs	r1, #0
 8000b90:	2017      	movs	r0, #23
 8000b92:	f000 fb9c 	bl	80012ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b96:	2017      	movs	r0, #23
 8000b98:	f000 fbb5 	bl	8001306 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2028      	movs	r0, #40	; 0x28
 8000ba2:	f000 fb94 	bl	80012ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ba6:	2028      	movs	r0, #40	; 0x28
 8000ba8:	f000 fbad 	bl	8001306 <HAL_NVIC_EnableIRQ>

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48001000 	.word	0x48001000
 8000bbc:	48000400 	.word	0x48000400
 8000bc0:	48000c00 	.word	0x48000c00
 8000bc4:	48000800 	.word	0x48000800
 8000bc8:	10110000 	.word	0x10110000
 8000bcc:	10210000 	.word	0x10210000

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <Error_Handler+0x8>
	...

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_MspInit+0x44>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6613      	str	r3, [r2, #96]	; 0x60
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <HAL_MspInit+0x44>)
 8000bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_MspInit+0x44>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6593      	str	r3, [r2, #88]	; 0x58
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_MspInit+0x44>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40021000 	.word	0x40021000

08000c24 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d12d      	bne.n	8000ca0 <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c48:	4a18      	ldr	r2, [pc, #96]	; (8000cac <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c4e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c50:	4b16      	ldr	r3, [pc, #88]	; (8000cac <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c58:	613b      	str	r3, [r7, #16]
 8000c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a12      	ldr	r2, [pc, #72]	; (8000cac <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c62:	f043 0310 	orr.w	r3, r3, #16
 8000c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_DFSDM_ChannelMspInit+0x88>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000c74:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000c86:	2306      	movs	r3, #6
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000c92:	f000 fc5f 	bl	8001554 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	4a02      	ldr	r2, [pc, #8]	; (8000ca8 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000c9e:	6013      	str	r3, [r2, #0]
  }

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000002c 	.word	0x2000002c
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48001000 	.word	0x48001000

08000cb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_I2C_MspInit+0x7c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d128      	bne.n	8000d28 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0302 	and.w	r3, r3, #2
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000cee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf4:	2312      	movs	r3, #18
 8000cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d00:	2304      	movs	r3, #4
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	; (8000d38 <HAL_I2C_MspInit+0x84>)
 8000d0c:	f000 fc22 	bl	8001554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_I2C_MspInit+0x80>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40005800 	.word	0x40005800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48000400 	.word	0x48000400

08000d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <HAL_TIM_Base_MspInit+0x5c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d10c      	bne.n	8000d68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <HAL_TIM_Base_MspInit+0x60>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <HAL_TIM_Base_MspInit+0x60>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_TIM_Base_MspInit+0x60>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000d66:	e010      	b.n	8000d8a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <HAL_TIM_Base_MspInit+0x64>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d10b      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_TIM_Base_MspInit+0x60>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <HAL_TIM_Base_MspInit+0x60>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <HAL_TIM_Base_MspInit+0x60>)
 8000d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
}
 8000d8a:	bf00      	nop
 8000d8c:	3714      	adds	r7, #20
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	40001000 	.word	0x40001000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	40001400 	.word	0x40001400

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08c      	sub	sp, #48	; 0x30
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a2e      	ldr	r2, [pc, #184]	; (8000e7c <HAL_UART_MspInit+0xd8>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d128      	bne.n	8000e18 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dc6:	4b2e      	ldr	r3, [pc, #184]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dca:	4a2d      	ldr	r2, [pc, #180]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000df6:	23c0      	movs	r3, #192	; 0xc0
 8000df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e02:	2303      	movs	r3, #3
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e06:	2307      	movs	r3, #7
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	481c      	ldr	r0, [pc, #112]	; (8000e84 <HAL_UART_MspInit+0xe0>)
 8000e12:	f000 fb9f 	bl	8001554 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e16:	e02d      	b.n	8000e74 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xe4>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d128      	bne.n	8000e74 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a16      	ldr	r2, [pc, #88]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <HAL_UART_MspInit+0xdc>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e64:	2307      	movs	r3, #7
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4807      	ldr	r0, [pc, #28]	; (8000e8c <HAL_UART_MspInit+0xe8>)
 8000e70:	f000 fb70 	bl	8001554 <HAL_GPIO_Init>
}
 8000e74:	bf00      	nop
 8000e76:	3730      	adds	r7, #48	; 0x30
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40013800 	.word	0x40013800
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	40004800 	.word	0x40004800
 8000e8c:	48000c00 	.word	0x48000c00

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b480      	push	{r7}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000edc:	f000 f8d8 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000ee8:	2020      	movs	r0, #32
 8000eea:	f000 fcf5 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000eee:	2040      	movs	r0, #64	; 0x40
 8000ef0:	f000 fcf2 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000ef4:	2080      	movs	r0, #128	; 0x80
 8000ef6:	f000 fcef 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000efa:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000efe:	f000 fceb 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f0a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f0e:	f000 fce3 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f16:	f000 fcdf 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f1a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f1e:	f000 fcdb 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f26:	f000 fcd7 	bl	80018d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <SystemInit+0x5c>)
 8000f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <SystemInit+0x5c>)
 8000f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <SystemInit+0x60>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a11      	ldr	r2, [pc, #68]	; (8000f90 <SystemInit+0x60>)
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	; (8000f90 <SystemInit+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <SystemInit+0x60>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <SystemInit+0x60>)
 8000f5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f66:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <SystemInit+0x60>)
 8000f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <SystemInit+0x60>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <SystemInit+0x60>)
 8000f74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SystemInit+0x60>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000ed00 	.word	0xe000ed00
 8000f90:	40021000 	.word	0x40021000

08000f94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f98:	f7ff ffca 	bl	8000f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f9c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f9e:	e003      	b.n	8000fa8 <LoopCopyDataInit>

08000fa0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000fa2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000fa4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000fa6:	3104      	adds	r1, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000fa8:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000fac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000fae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000fb0:	d3f6      	bcc.n	8000fa0 <CopyDataInit>
	ldr	r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8000fb4:	e002      	b.n	8000fbc <LoopFillZerobss>

08000fb6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000fb6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000fb8:	f842 3b04 	str.w	r3, [r2], #4

08000fbc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <LoopForever+0x16>)
	cmp	r2, r3
 8000fbe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000fc0:	d3f9      	bcc.n	8000fb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f003 fa91 	bl	80044e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fc6:	f7ff fa83 	bl	80004d0 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000fcc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000fd0:	08004614 	.word	0x08004614
	ldr	r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000fd8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000fdc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000fe0:	2000027c 	.word	0x2000027c

08000fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_2_IRQHandler>

08000fe6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f961 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f000 f80e 	bl	8001018 <HAL_InitTick>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e001      	b.n	800100c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001008:	f7ff fde8 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800100c:	79fb      	ldrb	r3, [r7, #7]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001024:	4b17      	ldr	r3, [pc, #92]	; (8001084 <HAL_InitTick+0x6c>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d023      	beq.n	8001074 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <HAL_InitTick+0x70>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_InitTick+0x6c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f96d 	bl	8001322 <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10f      	bne.n	800106e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b0f      	cmp	r3, #15
 8001052:	d809      	bhi.n	8001068 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001054:	2200      	movs	r2, #0
 8001056:	6879      	ldr	r1, [r7, #4]
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f000 f937 	bl	80012ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001060:	4a0a      	ldr	r2, [pc, #40]	; (800108c <HAL_InitTick+0x74>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e007      	b.n	8001078 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	73fb      	strb	r3, [r7, #15]
 800106c:	e004      	b.n	8001078 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e001      	b.n	8001078 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000004 	.word	0x20000004
 800108c:	20000008 	.word	0x20000008

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2000000c 	.word	0x2000000c
 80010b4:	20000278 	.word	0x20000278

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	20000278 	.word	0x20000278

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000000c 	.word	0x2000000c

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff3e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff31 	bl	800117c <__NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffa2 	bl	8001274 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e0ac      	b.n	80014a8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f8b2 	bl	80014bc <DFSDM_GetChannelFromInstance>
 8001358:	4603      	mov	r3, r0
 800135a:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <HAL_DFSDM_ChannelInit+0x174>)
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e09f      	b.n	80014a8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fc5b 	bl	8000c24 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800136e:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <HAL_DFSDM_ChannelInit+0x178>)
 8001376:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001378:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <HAL_DFSDM_ChannelInit+0x178>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d125      	bne.n	80013cc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001380:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001386:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800138a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800138c:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	4948      	ldr	r1, [pc, #288]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a46      	ldr	r2, [pc, #280]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80013a0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80013a4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	791b      	ldrb	r3, [r3, #4]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80013ae:	4b42      	ldr	r3, [pc, #264]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	041b      	lsls	r3, r3, #16
 80013ba:	493f      	ldr	r1, [pc, #252]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80013c0:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a3c      	ldr	r2, [pc, #240]	; (80014b8 <HAL_DFSDM_ChannelInit+0x17c>)
 80013c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013ca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80013da:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6819      	ldr	r1, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80013ea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80013f0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 020f 	bic.w	r2, r2, #15
 8001408:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6819      	ldr	r1, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001430:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6899      	ldr	r1, [r3, #8]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001440:	3b01      	subs	r3, #1
 8001442:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f002 0207 	and.w	r2, r2, #7
 800145c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001468:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001488:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f810 	bl	80014bc <DFSDM_GetChannelFromInstance>
 800149c:	4602      	mov	r2, r0
 800149e:	4904      	ldr	r1, [pc, #16]	; (80014b0 <HAL_DFSDM_ChannelInit+0x174>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000034 	.word	0x20000034
 80014b4:	20000030 	.word	0x20000030
 80014b8:	40016000 	.word	0x40016000

080014bc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <DFSDM_GetChannelFromInstance+0x7c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d102      	bne.n	80014d2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	e02b      	b.n	800152a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a19      	ldr	r2, [pc, #100]	; (800153c <DFSDM_GetChannelFromInstance+0x80>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d102      	bne.n	80014e0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80014da:	2301      	movs	r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	e024      	b.n	800152a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a17      	ldr	r2, [pc, #92]	; (8001540 <DFSDM_GetChannelFromInstance+0x84>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d102      	bne.n	80014ee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	e01d      	b.n	800152a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <DFSDM_GetChannelFromInstance+0x88>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d102      	bne.n	80014fc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80014f6:	2304      	movs	r3, #4
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e016      	b.n	800152a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <DFSDM_GetChannelFromInstance+0x8c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d102      	bne.n	800150a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001504:	2305      	movs	r3, #5
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	e00f      	b.n	800152a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <DFSDM_GetChannelFromInstance+0x90>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d102      	bne.n	8001518 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001512:	2306      	movs	r3, #6
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e008      	b.n	800152a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <DFSDM_GetChannelFromInstance+0x94>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d102      	bne.n	8001526 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001520:	2307      	movs	r3, #7
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	e001      	b.n	800152a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001526:	2303      	movs	r3, #3
 8001528:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40016000 	.word	0x40016000
 800153c:	40016020 	.word	0x40016020
 8001540:	40016040 	.word	0x40016040
 8001544:	40016080 	.word	0x40016080
 8001548:	400160a0 	.word	0x400160a0
 800154c:	400160c0 	.word	0x400160c0
 8001550:	400160e0 	.word	0x400160e0

08001554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e17f      	b.n	8001864 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2101      	movs	r1, #1
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	fa01 f303 	lsl.w	r3, r1, r3
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 8171 	beq.w	800185e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d00b      	beq.n	800159c <HAL_GPIO_Init+0x48>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b02      	cmp	r3, #2
 800158a:	d007      	beq.n	800159c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001590:	2b11      	cmp	r3, #17
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b12      	cmp	r3, #18
 800159a:	d130      	bne.n	80015fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2203      	movs	r2, #3
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68da      	ldr	r2, [r3, #12]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015d2:	2201      	movs	r2, #1
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	4013      	ands	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	091b      	lsrs	r3, r3, #4
 80015e8:	f003 0201 	and.w	r2, r3, #1
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 0303 	and.w	r3, r3, #3
 8001606:	2b03      	cmp	r3, #3
 8001608:	d118      	bne.n	800163c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001610:	2201      	movs	r2, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	f003 0201 	and.w	r2, r3, #1
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	2203      	movs	r2, #3
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d003      	beq.n	800167c <HAL_GPIO_Init+0x128>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b12      	cmp	r3, #18
 800167a:	d123      	bne.n	80016c4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	08da      	lsrs	r2, r3, #3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3208      	adds	r2, #8
 8001684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001688:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	220f      	movs	r2, #15
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	691a      	ldr	r2, [r3, #16]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	08da      	lsrs	r2, r3, #3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	3208      	adds	r2, #8
 80016be:	6939      	ldr	r1, [r7, #16]
 80016c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	2203      	movs	r2, #3
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0203 	and.w	r2, r3, #3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80ac 	beq.w	800185e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b5f      	ldr	r3, [pc, #380]	; (8001884 <HAL_GPIO_Init+0x330>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800170a:	4a5e      	ldr	r2, [pc, #376]	; (8001884 <HAL_GPIO_Init+0x330>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6613      	str	r3, [r2, #96]	; 0x60
 8001712:	4b5c      	ldr	r3, [pc, #368]	; (8001884 <HAL_GPIO_Init+0x330>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	60bb      	str	r3, [r7, #8]
 800171c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800171e:	4a5a      	ldr	r2, [pc, #360]	; (8001888 <HAL_GPIO_Init+0x334>)
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	089b      	lsrs	r3, r3, #2
 8001724:	3302      	adds	r3, #2
 8001726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	220f      	movs	r2, #15
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001748:	d025      	beq.n	8001796 <HAL_GPIO_Init+0x242>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4f      	ldr	r2, [pc, #316]	; (800188c <HAL_GPIO_Init+0x338>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d01f      	beq.n	8001792 <HAL_GPIO_Init+0x23e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4e      	ldr	r2, [pc, #312]	; (8001890 <HAL_GPIO_Init+0x33c>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d019      	beq.n	800178e <HAL_GPIO_Init+0x23a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4d      	ldr	r2, [pc, #308]	; (8001894 <HAL_GPIO_Init+0x340>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0x236>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4c      	ldr	r2, [pc, #304]	; (8001898 <HAL_GPIO_Init+0x344>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d00d      	beq.n	8001786 <HAL_GPIO_Init+0x232>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4b      	ldr	r2, [pc, #300]	; (800189c <HAL_GPIO_Init+0x348>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_GPIO_Init+0x22e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4a      	ldr	r2, [pc, #296]	; (80018a0 <HAL_GPIO_Init+0x34c>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d101      	bne.n	800177e <HAL_GPIO_Init+0x22a>
 800177a:	2306      	movs	r3, #6
 800177c:	e00c      	b.n	8001798 <HAL_GPIO_Init+0x244>
 800177e:	2307      	movs	r3, #7
 8001780:	e00a      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001782:	2305      	movs	r3, #5
 8001784:	e008      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001786:	2304      	movs	r3, #4
 8001788:	e006      	b.n	8001798 <HAL_GPIO_Init+0x244>
 800178a:	2303      	movs	r3, #3
 800178c:	e004      	b.n	8001798 <HAL_GPIO_Init+0x244>
 800178e:	2302      	movs	r3, #2
 8001790:	e002      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_GPIO_Init+0x244>
 8001796:	2300      	movs	r3, #0
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	f002 0203 	and.w	r2, r2, #3
 800179e:	0092      	lsls	r2, r2, #2
 80017a0:	4093      	lsls	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a8:	4937      	ldr	r1, [pc, #220]	; (8001888 <HAL_GPIO_Init+0x334>)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <HAL_GPIO_Init+0x350>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43db      	mvns	r3, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017da:	4a32      	ldr	r2, [pc, #200]	; (80018a4 <HAL_GPIO_Init+0x350>)
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80017e0:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_GPIO_Init+0x350>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <HAL_GPIO_Init+0x350>)
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800180a:	4b26      	ldr	r3, [pc, #152]	; (80018a4 <HAL_GPIO_Init+0x350>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d003      	beq.n	800182e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800182e:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <HAL_GPIO_Init+0x350>)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_GPIO_Init+0x350>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <HAL_GPIO_Init+0x350>)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa22 f303 	lsr.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	f47f ae78 	bne.w	8001564 <HAL_GPIO_Init+0x10>
  }
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	371c      	adds	r7, #28
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	40021000 	.word	0x40021000
 8001888:	40010000 	.word	0x40010000
 800188c:	48000400 	.word	0x48000400
 8001890:	48000800 	.word	0x48000800
 8001894:	48000c00 	.word	0x48000c00
 8001898:	48001000 	.word	0x48001000
 800189c:	48001400 	.word	0x48001400
 80018a0:	48001800 	.word	0x48001800
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]
 80018b4:	4613      	mov	r3, r2
 80018b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b8:	787b      	ldrb	r3, [r7, #1]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c6:	887a      	ldrh	r2, [r7, #2]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d006      	beq.n	80018fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018ee:	4a05      	ldr	r2, [pc, #20]	; (8001904 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f806 	bl	8001908 <HAL_GPIO_EXTI_Callback>
  }
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e081      	b.n	8001a34 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff f9b5 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2224      	movs	r2, #36	; 0x24
 800194e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0201 	bic.w	r2, r2, #1
 8001960:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800196e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689a      	ldr	r2, [r3, #8]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800197e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d107      	bne.n	8001998 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	e006      	b.n	80019a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d104      	bne.n	80019b8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80019c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	68da      	ldr	r2, [r3, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	ea42 0103 	orr.w	r1, r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	021a      	lsls	r2, r3, #8
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69d9      	ldr	r1, [r3, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1a      	ldr	r2, [r3, #32]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f042 0201 	orr.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	817b      	strh	r3, [r7, #10]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	813b      	strh	r3, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b20      	cmp	r3, #32
 8001a60:	f040 80f9 	bne.w	8001c56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <HAL_I2C_Mem_Write+0x34>
 8001a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0ed      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_I2C_Mem_Write+0x4e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e0e6      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a92:	f7ff fb11 	bl	80010b8 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2319      	movs	r3, #25
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f955 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0d1      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2221      	movs	r2, #33	; 0x21
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2240      	movs	r2, #64	; 0x40
 8001ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001adc:	88f8      	ldrh	r0, [r7, #6]
 8001ade:	893a      	ldrh	r2, [r7, #8]
 8001ae0:	8979      	ldrh	r1, [r7, #10]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4603      	mov	r3, r0
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 f8b9 	bl	8001c64 <I2C_RequestMemoryWrite>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0a9      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2bff      	cmp	r3, #255	; 0xff
 8001b0c:	d90e      	bls.n	8001b2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	22ff      	movs	r2, #255	; 0xff
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	8979      	ldrh	r1, [r7, #10]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f000 fa37 	bl	8001f98 <I2C_TransferConfig>
 8001b2a:	e00f      	b.n	8001b4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	8979      	ldrh	r1, [r7, #10]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 fa26 	bl	8001f98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b4c:	697a      	ldr	r2, [r7, #20]
 8001b4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b50:	68f8      	ldr	r0, [r7, #12]
 8001b52:	f000 f93f 	bl	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e07b      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	781a      	ldrb	r2, [r3, #0]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d034      	beq.n	8001c04 <HAL_I2C_Mem_Write+0x1c8>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d130      	bne.n	8001c04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2180      	movs	r1, #128	; 0x80
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f8d1 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e04d      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	2bff      	cmp	r3, #255	; 0xff
 8001bc4:	d90e      	bls.n	8001be4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	22ff      	movs	r2, #255	; 0xff
 8001bca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	8979      	ldrh	r1, [r7, #10]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f9db 	bl	8001f98 <I2C_TransferConfig>
 8001be2:	e00f      	b.n	8001c04 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	8979      	ldrh	r1, [r7, #10]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f000 f9ca 	bl	8001f98 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d19e      	bne.n	8001b4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f000 f91e 	bl	8001e54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e01a      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2220      	movs	r2, #32
 8001c28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_I2C_Mem_Write+0x224>)
 8001c36:	400b      	ands	r3, r1
 8001c38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
  }
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	fe00e800 	.word	0xfe00e800

08001c64 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	817b      	strh	r3, [r7, #10]
 8001c76:	460b      	mov	r3, r1
 8001c78:	813b      	strh	r3, [r7, #8]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c7e:	88fb      	ldrh	r3, [r7, #6]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	8979      	ldrh	r1, [r7, #10]
 8001c84:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <I2C_RequestMemoryWrite+0xa4>)
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f983 	bl	8001f98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	69b9      	ldr	r1, [r7, #24]
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f89c 	bl	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e02c      	b.n	8001d00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d105      	bne.n	8001cb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cac:	893b      	ldrh	r3, [r7, #8]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cb6:	e015      	b.n	8001ce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cb8:	893b      	ldrh	r3, [r7, #8]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	69b9      	ldr	r1, [r7, #24]
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f000 f882 	bl	8001dd4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e012      	b.n	8001d00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cda:	893b      	ldrh	r3, [r7, #8]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2200      	movs	r2, #0
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f830 	bl	8001d54 <I2C_WaitOnFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	80002000 	.word	0x80002000

08001d0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d103      	bne.n	8001d2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2200      	movs	r2, #0
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d007      	beq.n	8001d48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	619a      	str	r2, [r3, #24]
  }
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	603b      	str	r3, [r7, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d64:	e022      	b.n	8001dac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d6c:	d01e      	beq.n	8001dac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d6e:	f7ff f9a3 	bl	80010b8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d302      	bcc.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d113      	bne.n	8001dac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	f043 0220 	orr.w	r2, r3, #32
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2220      	movs	r2, #32
 8001d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e00f      	b.n	8001dcc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	4013      	ands	r3, r2
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	bf0c      	ite	eq
 8001dbc:	2301      	moveq	r3, #1
 8001dbe:	2300      	movne	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d0cd      	beq.n	8001d66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001de0:	e02c      	b.n	8001e3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f870 	bl	8001ecc <I2C_IsAcknowledgeFailed>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e02a      	b.n	8001e4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfc:	d01e      	beq.n	8001e3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfe:	f7ff f95b 	bl	80010b8 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d302      	bcc.n	8001e14 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d113      	bne.n	8001e3c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e18:	f043 0220 	orr.w	r2, r3, #32
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e007      	b.n	8001e4c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d1cb      	bne.n	8001de2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e60:	e028      	b.n	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f830 	bl	8001ecc <I2C_IsAcknowledgeFailed>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e026      	b.n	8001ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e76:	f7ff f91f 	bl	80010b8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d302      	bcc.n	8001e8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d113      	bne.n	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0220 	orr.w	r2, r3, #32
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e007      	b.n	8001ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	2b20      	cmp	r3, #32
 8001ec0:	d1cf      	bne.n	8001e62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699b      	ldr	r3, [r3, #24]
 8001ede:	f003 0310 	and.w	r3, r3, #16
 8001ee2:	2b10      	cmp	r3, #16
 8001ee4:	d151      	bne.n	8001f8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee6:	e022      	b.n	8001f2e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eee:	d01e      	beq.n	8001f2e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef0:	f7ff f8e2 	bl	80010b8 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d302      	bcc.n	8001f06 <I2C_IsAcknowledgeFailed+0x3a>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e02e      	b.n	8001f8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d1d5      	bne.n	8001ee8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2210      	movs	r2, #16
 8001f42:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff fedd 	bl	8001d0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <I2C_IsAcknowledgeFailed+0xc8>)
 8001f5e:	400b      	ands	r3, r1
 8001f60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f043 0204 	orr.w	r2, r3, #4
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2220      	movs	r2, #32
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	fe00e800 	.word	0xfe00e800

08001f98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	817b      	strh	r3, [r7, #10]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	0d5b      	lsrs	r3, r3, #21
 8001fb4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <I2C_TransferConfig+0x58>)
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	ea02 0103 	and.w	r1, r2, r3
 8001fc2:	897b      	ldrh	r3, [r7, #10]
 8001fc4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fc8:	7a7b      	ldrb	r3, [r7, #9]
 8001fca:	041b      	lsls	r3, r3, #16
 8001fcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	03ff63ff 	.word	0x03ff63ff

08001ff4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b20      	cmp	r3, #32
 8002008:	d138      	bne.n	800207c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002014:	2302      	movs	r3, #2
 8002016:	e032      	b.n	800207e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002046:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	6819      	ldr	r1, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0201 	orr.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002078:	2300      	movs	r3, #0
 800207a:	e000      	b.n	800207e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800207c:	2302      	movs	r3, #2
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800208a:	b480      	push	{r7}
 800208c:	b085      	sub	sp, #20
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b20      	cmp	r3, #32
 800209e:	d139      	bne.n	8002114 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e033      	b.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2224      	movs	r2, #36	; 0x24
 80020ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e000      	b.n	8002116 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002114:	2302      	movs	r3, #2
  }
}
 8002116:	4618      	mov	r0, r3
 8002118:	3714      	adds	r7, #20
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40007000 	.word	0x40007000

08002144 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002148:	4b04      	ldr	r3, [pc, #16]	; (800215c <HAL_PWREx_GetVoltageRange+0x18>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40007000 	.word	0x40007000

08002160 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216e:	d130      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	4b23      	ldr	r3, [pc, #140]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217c:	d038      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002186:	4a1e      	ldr	r2, [pc, #120]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800218e:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2232      	movs	r2, #50	; 0x32
 8002194:	fb02 f303 	mul.w	r3, r2, r3
 8002198:	4a1b      	ldr	r2, [pc, #108]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0c9b      	lsrs	r3, r3, #18
 80021a0:	3301      	adds	r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a4:	e002      	b.n	80021ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b8:	d102      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f2      	bne.n	80021a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021cc:	d110      	bne.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e00f      	b.n	80021f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021d2:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d007      	beq.n	80021f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000
 8002204:	20000004 	.word	0x20000004
 8002208:	431bde83 	.word	0x431bde83

0800220c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e3d4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800221e:	4ba1      	ldr	r3, [pc, #644]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002228:	4b9e      	ldr	r3, [pc, #632]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0310 	and.w	r3, r3, #16
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80e4 	beq.w	8002408 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d007      	beq.n	8002256 <HAL_RCC_OscConfig+0x4a>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b0c      	cmp	r3, #12
 800224a:	f040 808b 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b01      	cmp	r3, #1
 8002252:	f040 8087 	bne.w	8002364 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002256:	4b93      	ldr	r3, [pc, #588]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_RCC_OscConfig+0x62>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e3ac      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1a      	ldr	r2, [r3, #32]
 8002272:	4b8c      	ldr	r3, [pc, #560]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_RCC_OscConfig+0x7c>
 800227e:	4b89      	ldr	r3, [pc, #548]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002286:	e005      	b.n	8002294 <HAL_RCC_OscConfig+0x88>
 8002288:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002294:	4293      	cmp	r3, r2
 8002296:	d223      	bcs.n	80022e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4618      	mov	r0, r3
 800229e:	f000 fd41 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e38d      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022ac:	4b7d      	ldr	r3, [pc, #500]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a7c      	ldr	r2, [pc, #496]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022b2:	f043 0308 	orr.w	r3, r3, #8
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	4977      	ldr	r1, [pc, #476]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022ca:	4b76      	ldr	r3, [pc, #472]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	021b      	lsls	r3, r3, #8
 80022d8:	4972      	ldr	r1, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	604b      	str	r3, [r1, #4]
 80022de:	e025      	b.n	800232c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e0:	4b70      	ldr	r3, [pc, #448]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a6f      	ldr	r2, [pc, #444]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6013      	str	r3, [r2, #0]
 80022ec:	4b6d      	ldr	r3, [pc, #436]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	496a      	ldr	r1, [pc, #424]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022fe:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	021b      	lsls	r3, r3, #8
 800230c:	4965      	ldr	r1, [pc, #404]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	4618      	mov	r0, r3
 800231e:	f000 fd01 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e34d      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800232c:	f000 fc36 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b5c      	ldr	r3, [pc, #368]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	091b      	lsrs	r3, r3, #4
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	495a      	ldr	r1, [pc, #360]	; (80024a8 <HAL_RCC_OscConfig+0x29c>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	4a58      	ldr	r2, [pc, #352]	; (80024ac <HAL_RCC_OscConfig+0x2a0>)
 800234a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800234c:	4b58      	ldr	r3, [pc, #352]	; (80024b0 <HAL_RCC_OscConfig+0x2a4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fe61 	bl	8001018 <HAL_InitTick>
 8002356:	4603      	mov	r3, r0
 8002358:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d052      	beq.n	8002406 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	e331      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d032      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800236c:	4b4d      	ldr	r3, [pc, #308]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a4c      	ldr	r2, [pc, #304]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002378:	f7fe fe9e 	bl	80010b8 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002380:	f7fe fe9a 	bl	80010b8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e31a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002392:	4b44      	ldr	r3, [pc, #272]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	493b      	ldr	r1, [pc, #236]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023bc:	4b39      	ldr	r3, [pc, #228]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	021b      	lsls	r3, r3, #8
 80023ca:	4936      	ldr	r1, [pc, #216]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e01a      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023de:	f7fe fe6b 	bl	80010b8 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023e6:	f7fe fe67 	bl	80010b8 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e2e7      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x1da>
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002406:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d074      	beq.n	80024fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b08      	cmp	r3, #8
 8002418:	d005      	beq.n	8002426 <HAL_RCC_OscConfig+0x21a>
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d10e      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b03      	cmp	r3, #3
 8002424:	d10b      	bne.n	800243e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d064      	beq.n	80024fc <HAL_RCC_OscConfig+0x2f0>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d160      	bne.n	80024fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e2c4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x24a>
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a15      	ldr	r2, [pc, #84]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800244e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e01d      	b.n	8002492 <HAL_RCC_OscConfig+0x286>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800245e:	d10c      	bne.n	800247a <HAL_RCC_OscConfig+0x26e>
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002466:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	e00b      	b.n	8002492 <HAL_RCC_OscConfig+0x286>
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a09      	ldr	r2, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_RCC_OscConfig+0x298>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d01c      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fe0d 	bl	80010b8 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a0:	e011      	b.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
 80024a2:	bf00      	nop
 80024a4:	40021000 	.word	0x40021000
 80024a8:	080045bc 	.word	0x080045bc
 80024ac:	20000004 	.word	0x20000004
 80024b0:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fe00 	bl	80010b8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e280      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024c6:	4baf      	ldr	r3, [pc, #700]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x2a8>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d4:	f7fe fdf0 	bl	80010b8 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024dc:	f7fe fdec 	bl	80010b8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e26c      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ee:	4ba5      	ldr	r3, [pc, #660]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x2d0>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d060      	beq.n	80025cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	2b04      	cmp	r3, #4
 800250e:	d005      	beq.n	800251c <HAL_RCC_OscConfig+0x310>
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d119      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d116      	bne.n	800254a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800251c:	4b99      	ldr	r3, [pc, #612]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_OscConfig+0x328>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e249      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4b93      	ldr	r3, [pc, #588]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	061b      	lsls	r3, r3, #24
 8002542:	4990      	ldr	r1, [pc, #576]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002548:	e040      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d023      	beq.n	800259a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002552:	4b8c      	ldr	r3, [pc, #560]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a8b      	ldr	r2, [pc, #556]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7fe fdab 	bl	80010b8 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002566:	f7fe fda7 	bl	80010b8 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e227      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002578:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0f0      	beq.n	8002566 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	061b      	lsls	r3, r3, #24
 8002592:	497c      	ldr	r1, [pc, #496]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	e018      	b.n	80025cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259a:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a79      	ldr	r2, [pc, #484]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f7fe fd87 	bl	80010b8 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ae:	f7fe fd83 	bl	80010b8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e203      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c0:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0308 	and.w	r3, r3, #8
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d03c      	beq.n	8002652 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01c      	beq.n	800261a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e0:	4b68      	ldr	r3, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e6:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7fe fd62 	bl	80010b8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe fd5e 	bl	80010b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1de      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260a:	4b5e      	ldr	r3, [pc, #376]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d0ef      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3ec>
 8002618:	e01b      	b.n	8002652 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002622:	f023 0301 	bic.w	r3, r3, #1
 8002626:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe fd45 	bl	80010b8 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002632:	f7fe fd41 	bl	80010b8 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e1c1      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002644:	4b4f      	ldr	r3, [pc, #316]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002646:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1ef      	bne.n	8002632 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80a6 	beq.w	80027ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002660:	2300      	movs	r3, #0
 8002662:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002664:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10d      	bne.n	800268c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a43      	ldr	r2, [pc, #268]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002688:	2301      	movs	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800268c:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d118      	bne.n	80026ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002698:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a3a      	ldr	r2, [pc, #232]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 800269e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a4:	f7fe fd08 	bl	80010b8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ac:	f7fe fd04 	bl	80010b8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e184      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026be:	4b32      	ldr	r3, [pc, #200]	; (8002788 <HAL_RCC_OscConfig+0x57c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_RCC_OscConfig+0x4d8>
 80026d2:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e2:	e024      	b.n	800272e <HAL_RCC_OscConfig+0x522>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d110      	bne.n	800270e <HAL_RCC_OscConfig+0x502>
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 80026fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002702:	4a20      	ldr	r2, [pc, #128]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800270c:	e00f      	b.n	800272e <HAL_RCC_OscConfig+0x522>
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	4a1b      	ldr	r2, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800271e:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	4a17      	ldr	r2, [pc, #92]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002726:	f023 0304 	bic.w	r3, r3, #4
 800272a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002736:	f7fe fcbf 	bl	80010b8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fcbb 	bl	80010b8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e139      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x578>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0ed      	beq.n	800273e <HAL_RCC_OscConfig+0x532>
 8002762:	e01a      	b.n	800279a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fca8 	bl	80010b8 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276a:	e00f      	b.n	800278c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fca4 	bl	80010b8 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d906      	bls.n	800278c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e122      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800278c:	4b90      	ldr	r3, [pc, #576]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800278e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e8      	bne.n	800276c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7ffb      	ldrb	r3, [r7, #31]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	4a8a      	ldr	r2, [pc, #552]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8108 	beq.w	80029c6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	f040 80d0 	bne.w	8002960 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c0:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0203 	and.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d130      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	3b01      	subs	r3, #1
 80027e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d127      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d11f      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002800:	2a07      	cmp	r2, #7
 8002802:	bf14      	ite	ne
 8002804:	2201      	movne	r2, #1
 8002806:	2200      	moveq	r2, #0
 8002808:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	4293      	cmp	r3, r2
 800280c:	d113      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	085b      	lsrs	r3, r3, #1
 800281a:	3b01      	subs	r3, #1
 800281c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d109      	bne.n	8002836 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d06e      	beq.n	8002914 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d069      	beq.n	8002910 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800283c:	4b64      	ldr	r3, [pc, #400]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002848:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b7      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002858:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a5c      	ldr	r2, [pc, #368]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800285e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002862:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002864:	f7fe fc28 	bl	80010b8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fc24 	bl	80010b8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e0a4      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287e:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800288a:	4b51      	ldr	r3, [pc, #324]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	4b51      	ldr	r3, [pc, #324]	; (80029d4 <HAL_RCC_OscConfig+0x7c8>)
 8002890:	4013      	ands	r3, r2
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800289a:	3a01      	subs	r2, #1
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	4311      	orrs	r1, r2
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028a4:	0212      	lsls	r2, r2, #8
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	3a01      	subs	r2, #1
 80028b0:	0552      	lsls	r2, r2, #21
 80028b2:	4311      	orrs	r1, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028b8:	0852      	lsrs	r2, r2, #1
 80028ba:	3a01      	subs	r2, #1
 80028bc:	0652      	lsls	r2, r2, #25
 80028be:	4311      	orrs	r1, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028c4:	0912      	lsrs	r2, r2, #4
 80028c6:	0452      	lsls	r2, r2, #17
 80028c8:	430a      	orrs	r2, r1
 80028ca:	4941      	ldr	r1, [pc, #260]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d0:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3e      	ldr	r2, [pc, #248]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028dc:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e8:	f7fe fbe6 	bl	80010b8 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f0:	f7fe fbe2 	bl	80010b8 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e062      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002902:	4b33      	ldr	r3, [pc, #204]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f0      	beq.n	80028f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800290e:	e05a      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e059      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002914:	4b2e      	ldr	r3, [pc, #184]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d152      	bne.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002920:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800292c:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002938:	f7fe fbbe 	bl	80010b8 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002940:	f7fe fbba 	bl	80010b8 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e03a      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002952:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x734>
 800295e:	e032      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	2b0c      	cmp	r3, #12
 8002964:	d02d      	beq.n	80029c2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a19      	ldr	r2, [pc, #100]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800296c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002970:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	4a13      	ldr	r2, [pc, #76]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002984:	f023 0303 	bic.w	r3, r3, #3
 8002988:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800298a:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 8002990:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fb8d 	bl	80010b8 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fe fb89 	bl	80010b8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e009      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x7c4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x796>
 80029c0:	e001      	b.n	80029c6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	f99d808c 	.word	0xf99d808c

080029d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d101      	bne.n	80029ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0c8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	4b66      	ldr	r3, [pc, #408]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d910      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 0207 	bic.w	r2, r3, #7
 8002a02:	4961      	ldr	r1, [pc, #388]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d001      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0b0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d04c      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d107      	bne.n	8002a40 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d121      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09e      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d115      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e092      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a60:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e086      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a70:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e07e      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a80:	4b42      	ldr	r3, [pc, #264]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 0203 	bic.w	r2, r3, #3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	493f      	ldr	r1, [pc, #252]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a92:	f7fe fb11 	bl	80010b8 <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a98:	e00a      	b.n	8002ab0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a9a:	f7fe fb0d 	bl	80010b8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e066      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 020c 	and.w	r2, r3, #12
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d1eb      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ace:	4b2f      	ldr	r3, [pc, #188]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	492c      	ldr	r1, [pc, #176]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae0:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d210      	bcs.n	8002b10 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aee:	4b26      	ldr	r3, [pc, #152]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f023 0207 	bic.w	r2, r3, #7
 8002af6:	4924      	ldr	r1, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afe:	4b22      	ldr	r3, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1b0>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e036      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4918      	ldr	r1, [pc, #96]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d009      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3a:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	4910      	ldr	r1, [pc, #64]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b4e:	f000 f825 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b52:	4602      	mov	r2, r0
 8002b54:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_ClockConfig+0x1b4>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	490c      	ldr	r1, [pc, #48]	; (8002b90 <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	5ccb      	ldrb	r3, [r1, r3]
 8002b62:	f003 031f 	and.w	r3, r3, #31
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	; (8002b94 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fe fa50 	bl	8001018 <HAL_InitTick>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	080045bc 	.word	0x080045bc
 8002b94:	20000004 	.word	0x20000004
 8002b98:	20000008 	.word	0x20000008

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11e      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e004      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d134      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d003      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0xac>
 8002c40:	e005      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	617b      	str	r3, [r7, #20]
      break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	3301      	adds	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb02 f203 	mul.w	r2, r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	0e5b      	lsrs	r3, r3, #25
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	3301      	adds	r3, #1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c94:	69bb      	ldr	r3, [r7, #24]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	080045d4 	.word	0x080045d4
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000004 	.word	0x20000004

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	080045cc 	.word	0x080045cc

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cfc:	f7ff ffda 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0adb      	lsrs	r3, r3, #11
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4904      	ldr	r1, [pc, #16]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	080045cc 	.word	0x080045cc

08002d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d3c:	f7ff fa02 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002d40:	6178      	str	r0, [r7, #20]
 8002d42:	e014      	b.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d5c:	f7ff f9f2 	bl	8002144 <HAL_PWREx_GetVoltageRange>
 8002d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d10b      	bne.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d919      	bls.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d80:	d902      	bls.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d82:	2302      	movs	r3, #2
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	e013      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d88:	2301      	movs	r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e010      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d902      	bls.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d94:	2303      	movs	r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e00a      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d102      	bne.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da0:	2302      	movs	r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e004      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b70      	cmp	r3, #112	; 0x70
 8002daa:	d101      	bne.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dac:	2301      	movs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 0207 	bic.w	r2, r3, #7
 8002db8:	4909      	ldr	r1, [pc, #36]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d001      	beq.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40022000 	.word	0x40022000

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dec:	2300      	movs	r3, #0
 8002dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002df0:	2300      	movs	r3, #0
 8002df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d041      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e08:	d02a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e0e:	d824      	bhi.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e14:	d008      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e1a:	d81e      	bhi.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e24:	d010      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e26:	e018      	b.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e28:	4b86      	ldr	r3, [pc, #536]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a85      	ldr	r2, [pc, #532]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e32:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e34:	e015      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 facb 	bl	80033d8 <RCCEx_PLLSAI1_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e46:	e00c      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3320      	adds	r3, #32
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 fbb6 	bl	80035c0 <RCCEx_PLLSAI2_Config>
 8002e54:	4603      	mov	r3, r0
 8002e56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e58:	e003      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e5e:	e000      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e68:	4b76      	ldr	r3, [pc, #472]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e76:	4973      	ldr	r1, [pc, #460]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e7e:	e001      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e80:	7cfb      	ldrb	r3, [r7, #19]
 8002e82:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d041      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e98:	d02a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002e9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002e9e:	d824      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ea6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002eaa:	d81e      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb4:	d010      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002eb6:	e018      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eb8:	4b62      	ldr	r3, [pc, #392]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	4a61      	ldr	r2, [pc, #388]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ec4:	e015      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3304      	adds	r3, #4
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fa83 	bl	80033d8 <RCCEx_PLLSAI1_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ed6:	e00c      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3320      	adds	r3, #32
 8002edc:	2100      	movs	r1, #0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fb6e 	bl	80035c0 <RCCEx_PLLSAI2_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	74fb      	strb	r3, [r7, #19]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ef8:	4b52      	ldr	r3, [pc, #328]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f06:	494f      	ldr	r1, [pc, #316]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f0e:	e001      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80a0 	beq.w	8003062 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f26:	4b47      	ldr	r3, [pc, #284]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f40:	4a40      	ldr	r2, [pc, #256]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f46:	6593      	str	r3, [r2, #88]	; 0x58
 8002f48:	4b3e      	ldr	r3, [pc, #248]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f54:	2301      	movs	r3, #1
 8002f56:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3a      	ldr	r2, [pc, #232]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f64:	f7fe f8a8 	bl	80010b8 <HAL_GetTick>
 8002f68:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f6a:	e009      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f6c:	f7fe f8a4 	bl	80010b8 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d902      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	74fb      	strb	r3, [r7, #19]
        break;
 8002f7e:	e005      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f80:	4b31      	ldr	r3, [pc, #196]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002f8c:	7cfb      	ldrb	r3, [r7, #19]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d15c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f92:	4b2c      	ldr	r3, [pc, #176]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f9c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01f      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d019      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fb0:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fbc:	4b21      	ldr	r3, [pc, #132]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	4a20      	ldr	r2, [pc, #128]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fcc:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d016      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7fe f863 	bl	80010b8 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff4:	e00b      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff6:	f7fe f85f 	bl	80010b8 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d902      	bls.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	74fb      	strb	r3, [r7, #19]
            break;
 800300c:	e006      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800300e:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0ec      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800301c:	7cfb      	ldrb	r3, [r7, #19]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10c      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003022:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003032:	4904      	ldr	r1, [pc, #16]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003034:	4313      	orrs	r3, r2
 8003036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800303a:	e009      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	74bb      	strb	r3, [r7, #18]
 8003040:	e006      	b.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800304c:	7cfb      	ldrb	r3, [r7, #19]
 800304e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003050:	7c7b      	ldrb	r3, [r7, #17]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b9e      	ldr	r3, [pc, #632]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	4a9d      	ldr	r2, [pc, #628]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003060:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306e:	4b98      	ldr	r3, [pc, #608]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f023 0203 	bic.w	r2, r3, #3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800307c:	4994      	ldr	r1, [pc, #592]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003090:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f023 020c 	bic.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309e:	498c      	ldr	r1, [pc, #560]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030b2:	4b87      	ldr	r3, [pc, #540]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4983      	ldr	r1, [pc, #524]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030d4:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	497b      	ldr	r1, [pc, #492]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003104:	4972      	ldr	r1, [pc, #456]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003106:	4313      	orrs	r3, r2
 8003108:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003118:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	496a      	ldr	r1, [pc, #424]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	4961      	ldr	r1, [pc, #388]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00a      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800315c:	4b5c      	ldr	r3, [pc, #368]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003162:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	4959      	ldr	r1, [pc, #356]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00a      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800317e:	4b54      	ldr	r3, [pc, #336]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318c:	4950      	ldr	r1, [pc, #320]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031a0:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	4948      	ldr	r1, [pc, #288]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031c2:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	493f      	ldr	r1, [pc, #252]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d028      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031e4:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031f2:	4937      	ldr	r1, [pc, #220]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003202:	d106      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800320e:	60d3      	str	r3, [r2, #12]
 8003210:	e011      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800321a:	d10c      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	2101      	movs	r1, #1
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f8d8 	bl	80033d8 <RCCEx_PLLSAI1_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d028      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003242:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003248:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	491f      	ldr	r1, [pc, #124]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003252:	4313      	orrs	r3, r2
 8003254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003260:	d106      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	4a1a      	ldr	r2, [pc, #104]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326c:	60d3      	str	r3, [r2, #12]
 800326e:	e011      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	3304      	adds	r3, #4
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f000 f8a9 	bl	80033d8 <RCCEx_PLLSAI1_Config>
 8003286:	4603      	mov	r3, r0
 8003288:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800328a:	7cfb      	ldrb	r3, [r7, #19]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003290:	7cfb      	ldrb	r3, [r7, #19]
 8003292:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d02b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ae:	4908      	ldr	r1, [pc, #32]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032be:	d109      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	4a02      	ldr	r2, [pc, #8]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ca:	60d3      	str	r3, [r2, #12]
 80032cc:	e014      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032dc:	d10c      	bne.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2101      	movs	r1, #1
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f877 	bl	80033d8 <RCCEx_PLLSAI1_Config>
 80032ea:	4603      	mov	r3, r0
 80032ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032ee:	7cfb      	ldrb	r3, [r7, #19]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d02f      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003304:	4b2b      	ldr	r3, [pc, #172]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003312:	4928      	ldr	r1, [pc, #160]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800331e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003322:	d10d      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f854 	bl	80033d8 <RCCEx_PLLSAI1_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003334:	7cfb      	ldrb	r3, [r7, #19]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d014      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	74bb      	strb	r3, [r7, #18]
 800333e:	e011      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003348:	d10c      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3320      	adds	r3, #32
 800334e:	2102      	movs	r1, #2
 8003350:	4618      	mov	r0, r3
 8003352:	f000 f935 	bl	80035c0 <RCCEx_PLLSAI2_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003370:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003376:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337e:	490d      	ldr	r1, [pc, #52]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00b      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003392:	4b08      	ldr	r3, [pc, #32]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	4904      	ldr	r1, [pc, #16]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033aa:	7cbb      	ldrb	r3, [r7, #18]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80033bc:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000

080033d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80033e6:	4b75      	ldr	r3, [pc, #468]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d018      	beq.n	8003424 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80033f2:	4b72      	ldr	r3, [pc, #456]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f003 0203 	and.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d10d      	bne.n	800341e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
       ||
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800340a:	4b6c      	ldr	r3, [pc, #432]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
       ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d047      	beq.n	80034ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	73fb      	strb	r3, [r7, #15]
 8003422:	e044      	b.n	80034ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2b03      	cmp	r3, #3
 800342a:	d018      	beq.n	800345e <RCCEx_PLLSAI1_Config+0x86>
 800342c:	2b03      	cmp	r3, #3
 800342e:	d825      	bhi.n	800347c <RCCEx_PLLSAI1_Config+0xa4>
 8003430:	2b01      	cmp	r3, #1
 8003432:	d002      	beq.n	800343a <RCCEx_PLLSAI1_Config+0x62>
 8003434:	2b02      	cmp	r3, #2
 8003436:	d009      	beq.n	800344c <RCCEx_PLLSAI1_Config+0x74>
 8003438:	e020      	b.n	800347c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800343a:	4b60      	ldr	r3, [pc, #384]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d11d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800344a:	e01a      	b.n	8003482 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800344c:	4b5b      	ldr	r3, [pc, #364]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003454:	2b00      	cmp	r3, #0
 8003456:	d116      	bne.n	8003486 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345c:	e013      	b.n	8003486 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800345e:	4b57      	ldr	r3, [pc, #348]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800346a:	4b54      	ldr	r3, [pc, #336]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d109      	bne.n	800348a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800347a:	e006      	b.n	800348a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	73fb      	strb	r3, [r7, #15]
      break;
 8003480:	e004      	b.n	800348c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003482:	bf00      	nop
 8003484:	e002      	b.n	800348c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800348a:	bf00      	nop
    }

    if(status == HAL_OK)
 800348c:	7bfb      	ldrb	r3, [r7, #15]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	430b      	orrs	r3, r1
 80034a8:	4944      	ldr	r1, [pc, #272]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d17d      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80034b4:	4b41      	ldr	r3, [pc, #260]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a40      	ldr	r2, [pc, #256]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80034be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fd fdfa 	bl	80010b8 <HAL_GetTick>
 80034c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034c6:	e009      	b.n	80034dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034c8:	f7fd fdf6 	bl	80010b8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d902      	bls.n	80034dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	73fb      	strb	r3, [r7, #15]
        break;
 80034da:	e005      	b.n	80034e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80034dc:	4b37      	ldr	r3, [pc, #220]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ef      	bne.n	80034c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d160      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d111      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034f4:	4b31      	ldr	r3, [pc, #196]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80034fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6892      	ldr	r2, [r2, #8]
 8003504:	0211      	lsls	r1, r2, #8
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68d2      	ldr	r2, [r2, #12]
 800350a:	0912      	lsrs	r2, r2, #4
 800350c:	0452      	lsls	r2, r2, #17
 800350e:	430a      	orrs	r2, r1
 8003510:	492a      	ldr	r1, [pc, #168]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	610b      	str	r3, [r1, #16]
 8003516:	e027      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d112      	bne.n	8003544 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003526:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	6892      	ldr	r2, [r2, #8]
 800352e:	0211      	lsls	r1, r2, #8
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6912      	ldr	r2, [r2, #16]
 8003534:	0852      	lsrs	r2, r2, #1
 8003536:	3a01      	subs	r2, #1
 8003538:	0552      	lsls	r2, r2, #21
 800353a:	430a      	orrs	r2, r1
 800353c:	491f      	ldr	r1, [pc, #124]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	610b      	str	r3, [r1, #16]
 8003542:	e011      	b.n	8003568 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003544:	4b1d      	ldr	r3, [pc, #116]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800354c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	0211      	lsls	r1, r2, #8
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6952      	ldr	r2, [r2, #20]
 800355a:	0852      	lsrs	r2, r2, #1
 800355c:	3a01      	subs	r2, #1
 800355e:	0652      	lsls	r2, r2, #25
 8003560:	430a      	orrs	r2, r1
 8003562:	4916      	ldr	r1, [pc, #88]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003568:	4b14      	ldr	r3, [pc, #80]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800356e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003572:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd fda0 	bl	80010b8 <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800357a:	e009      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800357c:	f7fd fd9c 	bl	80010b8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d902      	bls.n	8003590 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	73fb      	strb	r3, [r7, #15]
          break;
 800358e:	e005      	b.n	800359c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003590:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d106      	bne.n	80035b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035a2:	4b06      	ldr	r3, [pc, #24]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	4904      	ldr	r1, [pc, #16]	; (80035bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40021000 	.word	0x40021000

080035c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035ce:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80035da:	4b67      	ldr	r3, [pc, #412]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0203 	and.w	r2, r3, #3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d10d      	bne.n	8003606 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
       ||
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80035f2:	4b61      	ldr	r3, [pc, #388]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
       ||
 8003602:	429a      	cmp	r2, r3
 8003604:	d047      	beq.n	8003696 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	73fb      	strb	r3, [r7, #15]
 800360a:	e044      	b.n	8003696 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b03      	cmp	r3, #3
 8003612:	d018      	beq.n	8003646 <RCCEx_PLLSAI2_Config+0x86>
 8003614:	2b03      	cmp	r3, #3
 8003616:	d825      	bhi.n	8003664 <RCCEx_PLLSAI2_Config+0xa4>
 8003618:	2b01      	cmp	r3, #1
 800361a:	d002      	beq.n	8003622 <RCCEx_PLLSAI2_Config+0x62>
 800361c:	2b02      	cmp	r3, #2
 800361e:	d009      	beq.n	8003634 <RCCEx_PLLSAI2_Config+0x74>
 8003620:	e020      	b.n	8003664 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003622:	4b55      	ldr	r3, [pc, #340]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d11d      	bne.n	800366a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003632:	e01a      	b.n	800366a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003644:	e013      	b.n	800366e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003646:	4b4c      	ldr	r3, [pc, #304]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10f      	bne.n	8003672 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003662:	e006      	b.n	8003672 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	73fb      	strb	r3, [r7, #15]
      break;
 8003668:	e004      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003672:	bf00      	nop
    }

    if(status == HAL_OK)
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10d      	bne.n	8003696 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800367a:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6819      	ldr	r1, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	430b      	orrs	r3, r1
 8003690:	4939      	ldr	r1, [pc, #228]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003692:	4313      	orrs	r3, r2
 8003694:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d167      	bne.n	800376c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800369c:	4b36      	ldr	r3, [pc, #216]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a35      	ldr	r2, [pc, #212]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036a8:	f7fd fd06 	bl	80010b8 <HAL_GetTick>
 80036ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036ae:	e009      	b.n	80036c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036b0:	f7fd fd02 	bl	80010b8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	73fb      	strb	r3, [r7, #15]
        break;
 80036c2:	e005      	b.n	80036d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036c4:	4b2c      	ldr	r3, [pc, #176]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1ef      	bne.n	80036b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d14a      	bne.n	800376c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d111      	bne.n	8003700 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80036dc:	4b26      	ldr	r3, [pc, #152]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6892      	ldr	r2, [r2, #8]
 80036ec:	0211      	lsls	r1, r2, #8
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68d2      	ldr	r2, [r2, #12]
 80036f2:	0912      	lsrs	r2, r2, #4
 80036f4:	0452      	lsls	r2, r2, #17
 80036f6:	430a      	orrs	r2, r1
 80036f8:	491f      	ldr	r1, [pc, #124]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	614b      	str	r3, [r1, #20]
 80036fe:	e011      	b.n	8003724 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003700:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003708:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6892      	ldr	r2, [r2, #8]
 8003710:	0211      	lsls	r1, r2, #8
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6912      	ldr	r2, [r2, #16]
 8003716:	0852      	lsrs	r2, r2, #1
 8003718:	3a01      	subs	r2, #1
 800371a:	0652      	lsls	r2, r2, #25
 800371c:	430a      	orrs	r2, r1
 800371e:	4916      	ldr	r1, [pc, #88]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003720:	4313      	orrs	r3, r2
 8003722:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003724:	4b14      	ldr	r3, [pc, #80]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a13      	ldr	r2, [pc, #76]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800372a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fd fcc2 	bl	80010b8 <HAL_GetTick>
 8003734:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003736:	e009      	b.n	800374c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003738:	f7fd fcbe 	bl	80010b8 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d902      	bls.n	800374c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	73fb      	strb	r3, [r7, #15]
          break;
 800374a:	e005      	b.n	8003758 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800374c:	4b0a      	ldr	r3, [pc, #40]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ef      	beq.n	8003738 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	4904      	ldr	r1, [pc, #16]	; (8003778 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003768:	4313      	orrs	r3, r2
 800376a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800376c:	7bfb      	ldrb	r3, [r7, #15]
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e049      	b.n	8003822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fd faca 	bl	8000d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f000 f89e 	bl	80038fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d001      	beq.n	8003844 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e047      	b.n	80038d4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a23      	ldr	r2, [pc, #140]	; (80038e0 <HAL_TIM_Base_Start+0xb4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01d      	beq.n	8003892 <HAL_TIM_Base_Start+0x66>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385e:	d018      	beq.n	8003892 <HAL_TIM_Base_Start+0x66>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a1f      	ldr	r2, [pc, #124]	; (80038e4 <HAL_TIM_Base_Start+0xb8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d013      	beq.n	8003892 <HAL_TIM_Base_Start+0x66>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_TIM_Base_Start+0xbc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d00e      	beq.n	8003892 <HAL_TIM_Base_Start+0x66>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1c      	ldr	r2, [pc, #112]	; (80038ec <HAL_TIM_Base_Start+0xc0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d009      	beq.n	8003892 <HAL_TIM_Base_Start+0x66>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1b      	ldr	r2, [pc, #108]	; (80038f0 <HAL_TIM_Base_Start+0xc4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d004      	beq.n	8003892 <HAL_TIM_Base_Start+0x66>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a19      	ldr	r2, [pc, #100]	; (80038f4 <HAL_TIM_Base_Start+0xc8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d115      	bne.n	80038be <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	4b17      	ldr	r3, [pc, #92]	; (80038f8 <HAL_TIM_Base_Start+0xcc>)
 800389a:	4013      	ands	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b06      	cmp	r3, #6
 80038a2:	d015      	beq.n	80038d0 <HAL_TIM_Base_Start+0xa4>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038aa:	d011      	beq.n	80038d0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038bc:	e008      	b.n	80038d0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f042 0201 	orr.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	e000      	b.n	80038d2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	40012c00 	.word	0x40012c00
 80038e4:	40000400 	.word	0x40000400
 80038e8:	40000800 	.word	0x40000800
 80038ec:	40000c00 	.word	0x40000c00
 80038f0:	40013400 	.word	0x40013400
 80038f4:	40014000 	.word	0x40014000
 80038f8:	00010007 	.word	0x00010007

080038fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a40      	ldr	r2, [pc, #256]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d013      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800391a:	d00f      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a3d      	ldr	r2, [pc, #244]	; (8003a14 <TIM_Base_SetConfig+0x118>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00b      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a3c      	ldr	r2, [pc, #240]	; (8003a18 <TIM_Base_SetConfig+0x11c>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d007      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a3b      	ldr	r2, [pc, #236]	; (8003a1c <TIM_Base_SetConfig+0x120>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d003      	beq.n	800393c <TIM_Base_SetConfig+0x40>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a3a      	ldr	r2, [pc, #232]	; (8003a20 <TIM_Base_SetConfig+0x124>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d108      	bne.n	800394e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a2f      	ldr	r2, [pc, #188]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01f      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d01b      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a2c      	ldr	r2, [pc, #176]	; (8003a14 <TIM_Base_SetConfig+0x118>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d017      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a2b      	ldr	r2, [pc, #172]	; (8003a18 <TIM_Base_SetConfig+0x11c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d013      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <TIM_Base_SetConfig+0x120>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00f      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a29      	ldr	r2, [pc, #164]	; (8003a20 <TIM_Base_SetConfig+0x124>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00b      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <TIM_Base_SetConfig+0x128>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a27      	ldr	r2, [pc, #156]	; (8003a28 <TIM_Base_SetConfig+0x12c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_Base_SetConfig+0x9a>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <TIM_Base_SetConfig+0x130>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d108      	bne.n	80039a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800399c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a10      	ldr	r2, [pc, #64]	; (8003a10 <TIM_Base_SetConfig+0x114>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00f      	beq.n	80039f4 <TIM_Base_SetConfig+0xf8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a12      	ldr	r2, [pc, #72]	; (8003a20 <TIM_Base_SetConfig+0x124>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00b      	beq.n	80039f4 <TIM_Base_SetConfig+0xf8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a11      	ldr	r2, [pc, #68]	; (8003a24 <TIM_Base_SetConfig+0x128>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d007      	beq.n	80039f4 <TIM_Base_SetConfig+0xf8>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a10      	ldr	r2, [pc, #64]	; (8003a28 <TIM_Base_SetConfig+0x12c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_Base_SetConfig+0xf8>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a0f      	ldr	r2, [pc, #60]	; (8003a2c <TIM_Base_SetConfig+0x130>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d103      	bne.n	80039fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	615a      	str	r2, [r3, #20]
}
 8003a02:	bf00      	nop
 8003a04:	3714      	adds	r7, #20
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40000400 	.word	0x40000400
 8003a18:	40000800 	.word	0x40000800
 8003a1c:	40000c00 	.word	0x40000c00
 8003a20:	40013400 	.word	0x40013400
 8003a24:	40014000 	.word	0x40014000
 8003a28:	40014400 	.word	0x40014400
 8003a2c:	40014800 	.word	0x40014800

08003a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e068      	b.n	8003b1a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a2e      	ldr	r2, [pc, #184]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2d      	ldr	r2, [pc, #180]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d108      	bne.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d01d      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d018      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d013      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1a      	ldr	r2, [pc, #104]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a13      	ldr	r2, [pc, #76]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	; (8003b3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10c      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40013400 	.word	0x40013400
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000

08003b40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e040      	b.n	8003bd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f7fd f91e 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2224      	movs	r2, #36	; 0x24
 8003b6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f8c0 	bl	8003d04 <UART_SetConfig>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e022      	b.n	8003bd4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 fb3e 	bl	8004218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 0201 	orr.w	r2, r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fbc5 	bl	800435c <UART_CheckIdleState>
 8003bd2:	4603      	mov	r3, r0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08a      	sub	sp, #40	; 0x28
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	4613      	mov	r3, r2
 8003bea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf0:	2b20      	cmp	r3, #32
 8003bf2:	f040 8082 	bne.w	8003cfa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_UART_Transmit+0x26>
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e07a      	b.n	8003cfc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_UART_Transmit+0x38>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e073      	b.n	8003cfc <HAL_UART_Transmit+0x120>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2221      	movs	r2, #33	; 0x21
 8003c28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c2a:	f7fd fa45 	bl	80010b8 <HAL_GetTick>
 8003c2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	88fa      	ldrh	r2, [r7, #6]
 8003c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d108      	bne.n	8003c5c <HAL_UART_Transmit+0x80>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d104      	bne.n	8003c5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	e003      	b.n	8003c64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c6c:	e02d      	b.n	8003cca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2200      	movs	r2, #0
 8003c76:	2180      	movs	r1, #128	; 0x80
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fbb8 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e039      	b.n	8003cfc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	3302      	adds	r3, #2
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	e008      	b.n	8003cb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1cb      	bne.n	8003c6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2140      	movs	r1, #64	; 0x40
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 fb84 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e005      	b.n	8003cfc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	e000      	b.n	8003cfc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
  }
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3720      	adds	r7, #32
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d04:	b5b0      	push	{r4, r5, r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	4bad      	ldr	r3, [pc, #692]	; (8003fe4 <UART_SetConfig+0x2e0>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6812      	ldr	r2, [r2, #0]
 8003d36:	69f9      	ldr	r1, [r7, #28]
 8003d38:	430b      	orrs	r3, r1
 8003d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4aa2      	ldr	r2, [pc, #648]	; (8003fe8 <UART_SetConfig+0x2e4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a99      	ldr	r2, [pc, #612]	; (8003fec <UART_SetConfig+0x2e8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d121      	bne.n	8003dce <UART_SetConfig+0xca>
 8003d8a:	4b99      	ldr	r3, [pc, #612]	; (8003ff0 <UART_SetConfig+0x2ec>)
 8003d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d817      	bhi.n	8003dc8 <UART_SetConfig+0xc4>
 8003d98:	a201      	add	r2, pc, #4	; (adr r2, 8003da0 <UART_SetConfig+0x9c>)
 8003d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9e:	bf00      	nop
 8003da0:	08003db1 	.word	0x08003db1
 8003da4:	08003dbd 	.word	0x08003dbd
 8003da8:	08003db7 	.word	0x08003db7
 8003dac:	08003dc3 	.word	0x08003dc3
 8003db0:	2301      	movs	r3, #1
 8003db2:	76fb      	strb	r3, [r7, #27]
 8003db4:	e0e7      	b.n	8003f86 <UART_SetConfig+0x282>
 8003db6:	2302      	movs	r3, #2
 8003db8:	76fb      	strb	r3, [r7, #27]
 8003dba:	e0e4      	b.n	8003f86 <UART_SetConfig+0x282>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	76fb      	strb	r3, [r7, #27]
 8003dc0:	e0e1      	b.n	8003f86 <UART_SetConfig+0x282>
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	76fb      	strb	r3, [r7, #27]
 8003dc6:	e0de      	b.n	8003f86 <UART_SetConfig+0x282>
 8003dc8:	2310      	movs	r3, #16
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	e0db      	b.n	8003f86 <UART_SetConfig+0x282>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a88      	ldr	r2, [pc, #544]	; (8003ff4 <UART_SetConfig+0x2f0>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d132      	bne.n	8003e3e <UART_SetConfig+0x13a>
 8003dd8:	4b85      	ldr	r3, [pc, #532]	; (8003ff0 <UART_SetConfig+0x2ec>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b0c      	cmp	r3, #12
 8003de4:	d828      	bhi.n	8003e38 <UART_SetConfig+0x134>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <UART_SetConfig+0xe8>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e21 	.word	0x08003e21
 8003df0:	08003e39 	.word	0x08003e39
 8003df4:	08003e39 	.word	0x08003e39
 8003df8:	08003e39 	.word	0x08003e39
 8003dfc:	08003e2d 	.word	0x08003e2d
 8003e00:	08003e39 	.word	0x08003e39
 8003e04:	08003e39 	.word	0x08003e39
 8003e08:	08003e39 	.word	0x08003e39
 8003e0c:	08003e27 	.word	0x08003e27
 8003e10:	08003e39 	.word	0x08003e39
 8003e14:	08003e39 	.word	0x08003e39
 8003e18:	08003e39 	.word	0x08003e39
 8003e1c:	08003e33 	.word	0x08003e33
 8003e20:	2300      	movs	r3, #0
 8003e22:	76fb      	strb	r3, [r7, #27]
 8003e24:	e0af      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e26:	2302      	movs	r3, #2
 8003e28:	76fb      	strb	r3, [r7, #27]
 8003e2a:	e0ac      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e0a9      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e32:	2308      	movs	r3, #8
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e0a6      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e38:	2310      	movs	r3, #16
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	e0a3      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6d      	ldr	r2, [pc, #436]	; (8003ff8 <UART_SetConfig+0x2f4>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d120      	bne.n	8003e8a <UART_SetConfig+0x186>
 8003e48:	4b69      	ldr	r3, [pc, #420]	; (8003ff0 <UART_SetConfig+0x2ec>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e52:	2b30      	cmp	r3, #48	; 0x30
 8003e54:	d013      	beq.n	8003e7e <UART_SetConfig+0x17a>
 8003e56:	2b30      	cmp	r3, #48	; 0x30
 8003e58:	d814      	bhi.n	8003e84 <UART_SetConfig+0x180>
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d009      	beq.n	8003e72 <UART_SetConfig+0x16e>
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d810      	bhi.n	8003e84 <UART_SetConfig+0x180>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <UART_SetConfig+0x168>
 8003e66:	2b10      	cmp	r3, #16
 8003e68:	d006      	beq.n	8003e78 <UART_SetConfig+0x174>
 8003e6a:	e00b      	b.n	8003e84 <UART_SetConfig+0x180>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	76fb      	strb	r3, [r7, #27]
 8003e70:	e089      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e72:	2302      	movs	r3, #2
 8003e74:	76fb      	strb	r3, [r7, #27]
 8003e76:	e086      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e083      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e080      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e84:	2310      	movs	r3, #16
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	e07d      	b.n	8003f86 <UART_SetConfig+0x282>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a5b      	ldr	r2, [pc, #364]	; (8003ffc <UART_SetConfig+0x2f8>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d120      	bne.n	8003ed6 <UART_SetConfig+0x1d2>
 8003e94:	4b56      	ldr	r3, [pc, #344]	; (8003ff0 <UART_SetConfig+0x2ec>)
 8003e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea0:	d013      	beq.n	8003eca <UART_SetConfig+0x1c6>
 8003ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea4:	d814      	bhi.n	8003ed0 <UART_SetConfig+0x1cc>
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d009      	beq.n	8003ebe <UART_SetConfig+0x1ba>
 8003eaa:	2b80      	cmp	r3, #128	; 0x80
 8003eac:	d810      	bhi.n	8003ed0 <UART_SetConfig+0x1cc>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <UART_SetConfig+0x1b4>
 8003eb2:	2b40      	cmp	r3, #64	; 0x40
 8003eb4:	d006      	beq.n	8003ec4 <UART_SetConfig+0x1c0>
 8003eb6:	e00b      	b.n	8003ed0 <UART_SetConfig+0x1cc>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	76fb      	strb	r3, [r7, #27]
 8003ebc:	e063      	b.n	8003f86 <UART_SetConfig+0x282>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	76fb      	strb	r3, [r7, #27]
 8003ec2:	e060      	b.n	8003f86 <UART_SetConfig+0x282>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	76fb      	strb	r3, [r7, #27]
 8003ec8:	e05d      	b.n	8003f86 <UART_SetConfig+0x282>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	76fb      	strb	r3, [r7, #27]
 8003ece:	e05a      	b.n	8003f86 <UART_SetConfig+0x282>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	76fb      	strb	r3, [r7, #27]
 8003ed4:	e057      	b.n	8003f86 <UART_SetConfig+0x282>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a49      	ldr	r2, [pc, #292]	; (8004000 <UART_SetConfig+0x2fc>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d125      	bne.n	8003f2c <UART_SetConfig+0x228>
 8003ee0:	4b43      	ldr	r3, [pc, #268]	; (8003ff0 <UART_SetConfig+0x2ec>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eee:	d017      	beq.n	8003f20 <UART_SetConfig+0x21c>
 8003ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef4:	d817      	bhi.n	8003f26 <UART_SetConfig+0x222>
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d00b      	beq.n	8003f14 <UART_SetConfig+0x210>
 8003efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f00:	d811      	bhi.n	8003f26 <UART_SetConfig+0x222>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <UART_SetConfig+0x20a>
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f0a:	d006      	beq.n	8003f1a <UART_SetConfig+0x216>
 8003f0c:	e00b      	b.n	8003f26 <UART_SetConfig+0x222>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	76fb      	strb	r3, [r7, #27]
 8003f12:	e038      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f14:	2302      	movs	r3, #2
 8003f16:	76fb      	strb	r3, [r7, #27]
 8003f18:	e035      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	76fb      	strb	r3, [r7, #27]
 8003f1e:	e032      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f20:	2308      	movs	r3, #8
 8003f22:	76fb      	strb	r3, [r7, #27]
 8003f24:	e02f      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f26:	2310      	movs	r3, #16
 8003f28:	76fb      	strb	r3, [r7, #27]
 8003f2a:	e02c      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <UART_SetConfig+0x2e4>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d125      	bne.n	8003f82 <UART_SetConfig+0x27e>
 8003f36:	4b2e      	ldr	r3, [pc, #184]	; (8003ff0 <UART_SetConfig+0x2ec>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f44:	d017      	beq.n	8003f76 <UART_SetConfig+0x272>
 8003f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f4a:	d817      	bhi.n	8003f7c <UART_SetConfig+0x278>
 8003f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f50:	d00b      	beq.n	8003f6a <UART_SetConfig+0x266>
 8003f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f56:	d811      	bhi.n	8003f7c <UART_SetConfig+0x278>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <UART_SetConfig+0x260>
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d006      	beq.n	8003f70 <UART_SetConfig+0x26c>
 8003f62:	e00b      	b.n	8003f7c <UART_SetConfig+0x278>
 8003f64:	2300      	movs	r3, #0
 8003f66:	76fb      	strb	r3, [r7, #27]
 8003f68:	e00d      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	76fb      	strb	r3, [r7, #27]
 8003f6e:	e00a      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f70:	2304      	movs	r3, #4
 8003f72:	76fb      	strb	r3, [r7, #27]
 8003f74:	e007      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f76:	2308      	movs	r3, #8
 8003f78:	76fb      	strb	r3, [r7, #27]
 8003f7a:	e004      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	76fb      	strb	r3, [r7, #27]
 8003f80:	e001      	b.n	8003f86 <UART_SetConfig+0x282>
 8003f82:	2310      	movs	r3, #16
 8003f84:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a17      	ldr	r2, [pc, #92]	; (8003fe8 <UART_SetConfig+0x2e4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	f040 8087 	bne.w	80040a0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f92:	7efb      	ldrb	r3, [r7, #27]
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d837      	bhi.n	8004008 <UART_SetConfig+0x304>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <UART_SetConfig+0x29c>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08004009 	.word	0x08004009
 8003fa8:	08003fcd 	.word	0x08003fcd
 8003fac:	08004009 	.word	0x08004009
 8003fb0:	08003fd3 	.word	0x08003fd3
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08004009 	.word	0x08004009
 8003fbc:	08004009 	.word	0x08004009
 8003fc0:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc4:	f7fe fe82 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8003fc8:	6178      	str	r0, [r7, #20]
        break;
 8003fca:	e022      	b.n	8004012 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <UART_SetConfig+0x300>)
 8003fce:	617b      	str	r3, [r7, #20]
        break;
 8003fd0:	e01f      	b.n	8004012 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe fde3 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003fd6:	6178      	str	r0, [r7, #20]
        break;
 8003fd8:	e01b      	b.n	8004012 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	617b      	str	r3, [r7, #20]
        break;
 8003fe0:	e017      	b.n	8004012 <UART_SetConfig+0x30e>
 8003fe2:	bf00      	nop
 8003fe4:	efff69f3 	.word	0xefff69f3
 8003fe8:	40008000 	.word	0x40008000
 8003fec:	40013800 	.word	0x40013800
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40004400 	.word	0x40004400
 8003ff8:	40004800 	.word	0x40004800
 8003ffc:	40004c00 	.word	0x40004c00
 8004000:	40005000 	.word	0x40005000
 8004004:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	76bb      	strb	r3, [r7, #26]
        break;
 8004010:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80f1 	beq.w	80041fc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	4413      	add	r3, r2
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	429a      	cmp	r2, r3
 8004028:	d305      	bcc.n	8004036 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	429a      	cmp	r2, r3
 8004034:	d902      	bls.n	800403c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	76bb      	strb	r3, [r7, #26]
 800403a:	e0df      	b.n	80041fc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4618      	mov	r0, r3
 8004040:	f04f 0100 	mov.w	r1, #0
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	020b      	lsls	r3, r1, #8
 800404e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004052:	0202      	lsls	r2, r0, #8
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	6849      	ldr	r1, [r1, #4]
 8004058:	0849      	lsrs	r1, r1, #1
 800405a:	4608      	mov	r0, r1
 800405c:	f04f 0100 	mov.w	r1, #0
 8004060:	1814      	adds	r4, r2, r0
 8004062:	eb43 0501 	adc.w	r5, r3, r1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	461a      	mov	r2, r3
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	4620      	mov	r0, r4
 8004072:	4629      	mov	r1, r5
 8004074:	f7fc f8b0 	bl	80001d8 <__aeabi_uldivmod>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4613      	mov	r3, r2
 800407e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004086:	d308      	bcc.n	800409a <UART_SetConfig+0x396>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800408e:	d204      	bcs.n	800409a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	e0b0      	b.n	80041fc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	76bb      	strb	r3, [r7, #26]
 800409e:	e0ad      	b.n	80041fc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040a8:	d15c      	bne.n	8004164 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80040aa:	7efb      	ldrb	r3, [r7, #27]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d828      	bhi.n	8004102 <UART_SetConfig+0x3fe>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <UART_SetConfig+0x3b4>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040dd 	.word	0x080040dd
 80040bc:	080040e5 	.word	0x080040e5
 80040c0:	080040ed 	.word	0x080040ed
 80040c4:	08004103 	.word	0x08004103
 80040c8:	080040f3 	.word	0x080040f3
 80040cc:	08004103 	.word	0x08004103
 80040d0:	08004103 	.word	0x08004103
 80040d4:	08004103 	.word	0x08004103
 80040d8:	080040fb 	.word	0x080040fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040dc:	f7fe fdf6 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80040e0:	6178      	str	r0, [r7, #20]
        break;
 80040e2:	e013      	b.n	800410c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e4:	f7fe fe08 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80040e8:	6178      	str	r0, [r7, #20]
        break;
 80040ea:	e00f      	b.n	800410c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ec:	4b49      	ldr	r3, [pc, #292]	; (8004214 <UART_SetConfig+0x510>)
 80040ee:	617b      	str	r3, [r7, #20]
        break;
 80040f0:	e00c      	b.n	800410c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f2:	f7fe fd53 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 80040f6:	6178      	str	r0, [r7, #20]
        break;
 80040f8:	e008      	b.n	800410c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040fe:	617b      	str	r3, [r7, #20]
        break;
 8004100:	e004      	b.n	800410c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	76bb      	strb	r3, [r7, #26]
        break;
 800410a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d074      	beq.n	80041fc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	005a      	lsls	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	441a      	add	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	b29b      	uxth	r3, r3
 8004128:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b0f      	cmp	r3, #15
 800412e:	d916      	bls.n	800415e <UART_SetConfig+0x45a>
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004136:	d212      	bcs.n	800415e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f023 030f 	bic.w	r3, r3, #15
 8004140:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	b29a      	uxth	r2, r3
 800414e:	89fb      	ldrh	r3, [r7, #14]
 8004150:	4313      	orrs	r3, r2
 8004152:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	89fa      	ldrh	r2, [r7, #14]
 800415a:	60da      	str	r2, [r3, #12]
 800415c:	e04e      	b.n	80041fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	76bb      	strb	r3, [r7, #26]
 8004162:	e04b      	b.n	80041fc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004164:	7efb      	ldrb	r3, [r7, #27]
 8004166:	2b08      	cmp	r3, #8
 8004168:	d827      	bhi.n	80041ba <UART_SetConfig+0x4b6>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <UART_SetConfig+0x46c>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	08004195 	.word	0x08004195
 8004174:	0800419d 	.word	0x0800419d
 8004178:	080041a5 	.word	0x080041a5
 800417c:	080041bb 	.word	0x080041bb
 8004180:	080041ab 	.word	0x080041ab
 8004184:	080041bb 	.word	0x080041bb
 8004188:	080041bb 	.word	0x080041bb
 800418c:	080041bb 	.word	0x080041bb
 8004190:	080041b3 	.word	0x080041b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004194:	f7fe fd9a 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004198:	6178      	str	r0, [r7, #20]
        break;
 800419a:	e013      	b.n	80041c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800419c:	f7fe fdac 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80041a0:	6178      	str	r0, [r7, #20]
        break;
 80041a2:	e00f      	b.n	80041c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a4:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <UART_SetConfig+0x510>)
 80041a6:	617b      	str	r3, [r7, #20]
        break;
 80041a8:	e00c      	b.n	80041c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041aa:	f7fe fcf7 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 80041ae:	6178      	str	r0, [r7, #20]
        break;
 80041b0:	e008      	b.n	80041c4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041b6:	617b      	str	r3, [r7, #20]
        break;
 80041b8:	e004      	b.n	80041c4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	76bb      	strb	r3, [r7, #26]
        break;
 80041c2:	bf00      	nop
    }

    if (pclk != 0U)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d018      	beq.n	80041fc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	085a      	lsrs	r2, r3, #1
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	441a      	add	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041dc:	b29b      	uxth	r3, r3
 80041de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b0f      	cmp	r3, #15
 80041e4:	d908      	bls.n	80041f8 <UART_SetConfig+0x4f4>
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ec:	d204      	bcs.n	80041f8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	e001      	b.n	80041fc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004208:	7ebb      	ldrb	r3, [r7, #26]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bdb0      	pop	{r4, r5, r7, pc}
 8004212:	bf00      	nop
 8004214:	00f42400 	.word	0x00f42400

08004218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00a      	beq.n	8004242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	430a      	orrs	r2, r1
 8004240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00a      	beq.n	8004264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d00a      	beq.n	8004286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	f003 0310 	and.w	r3, r3, #16
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01a      	beq.n	800432e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	430a      	orrs	r2, r1
 800430c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004316:	d10a      	bne.n	800432e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	430a      	orrs	r2, r1
 800434e:	605a      	str	r2, [r3, #4]
  }
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af02      	add	r7, sp, #8
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800436c:	f7fc fea4 	bl	80010b8 <HAL_GetTick>
 8004370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b08      	cmp	r3, #8
 800437e:	d10e      	bne.n	800439e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f82d 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e023      	b.n	80043e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d10e      	bne.n	80043ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 f817 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e00d      	b.n	80043e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	e05e      	b.n	80044be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d05a      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004408:	f7fc fe56 	bl	80010b8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <UART_WaitOnFlagUntilTimeout+0x30>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d11b      	bne.n	8004456 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800442c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2220      	movs	r2, #32
 8004448:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e043      	b.n	80044de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02c      	beq.n	80044be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004472:	d124      	bne.n	80044be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800447c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800448c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e00f      	b.n	80044de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	4013      	ands	r3, r2
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	bf0c      	ite	eq
 80044ce:	2301      	moveq	r3, #1
 80044d0:	2300      	movne	r3, #0
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	461a      	mov	r2, r3
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d091      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
	...

080044e8 <__libc_init_array>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4d0d      	ldr	r5, [pc, #52]	; (8004520 <__libc_init_array+0x38>)
 80044ec:	4c0d      	ldr	r4, [pc, #52]	; (8004524 <__libc_init_array+0x3c>)
 80044ee:	1b64      	subs	r4, r4, r5
 80044f0:	10a4      	asrs	r4, r4, #2
 80044f2:	2600      	movs	r6, #0
 80044f4:	42a6      	cmp	r6, r4
 80044f6:	d109      	bne.n	800450c <__libc_init_array+0x24>
 80044f8:	4d0b      	ldr	r5, [pc, #44]	; (8004528 <__libc_init_array+0x40>)
 80044fa:	4c0c      	ldr	r4, [pc, #48]	; (800452c <__libc_init_array+0x44>)
 80044fc:	f000 f820 	bl	8004540 <_init>
 8004500:	1b64      	subs	r4, r4, r5
 8004502:	10a4      	asrs	r4, r4, #2
 8004504:	2600      	movs	r6, #0
 8004506:	42a6      	cmp	r6, r4
 8004508:	d105      	bne.n	8004516 <__libc_init_array+0x2e>
 800450a:	bd70      	pop	{r4, r5, r6, pc}
 800450c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004510:	4798      	blx	r3
 8004512:	3601      	adds	r6, #1
 8004514:	e7ee      	b.n	80044f4 <__libc_init_array+0xc>
 8004516:	f855 3b04 	ldr.w	r3, [r5], #4
 800451a:	4798      	blx	r3
 800451c:	3601      	adds	r6, #1
 800451e:	e7f2      	b.n	8004506 <__libc_init_array+0x1e>
 8004520:	0800460c 	.word	0x0800460c
 8004524:	0800460c 	.word	0x0800460c
 8004528:	0800460c 	.word	0x0800460c
 800452c:	08004610 	.word	0x08004610

08004530 <memset>:
 8004530:	4402      	add	r2, r0
 8004532:	4603      	mov	r3, r0
 8004534:	4293      	cmp	r3, r2
 8004536:	d100      	bne.n	800453a <memset+0xa>
 8004538:	4770      	bx	lr
 800453a:	f803 1b01 	strb.w	r1, [r3], #1
 800453e:	e7f9      	b.n	8004534 <memset+0x4>

08004540 <_init>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr

0800454c <_fini>:
 800454c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454e:	bf00      	nop
 8004550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004552:	bc08      	pop	{r3}
 8004554:	469e      	mov	lr, r3
 8004556:	4770      	bx	lr
