
HAL_VALIDATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d44  08004d44  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004d44  08004d44  00014d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d4c  08004d4c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  08004dc8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  08004dc8  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec87  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f40  00000000  00000000  0002ed2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  00030c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002621d  00000000  00000000  00032448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f669  00000000  00000000  00058665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9d7f  00000000  00000000  00067cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151a4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003620  00000000  00000000  00151aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004bc0 	.word	0x08004bc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004bc0 	.word	0x08004bc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
		HAL_StatusTypeDef ret; // status of I2C commands
		uint8_t text[50] = "Hello!\r\n";  // text array for outputting in UART
 800057e:	4a35      	ldr	r2, [pc, #212]	; (8000654 <main+0xdc>)
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	ca07      	ldmia	r2, {r0, r1, r2}
 8000586:	c303      	stmia	r3!, {r0, r1}
 8000588:	701a      	strb	r2, [r3, #0]
 800058a:	f107 0315 	add.w	r3, r7, #21
 800058e:	2229      	movs	r2, #41	; 0x29
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fede 	bl	8004354 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fd7f 	bl	800109a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f864 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f95c 	bl	800085c <MX_GPIO_Init>
  MX_I2C2_Init();
 80005a4:	f000 f8ea 	bl	800077c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f928 	bl	80007fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start(&htim2);
//  HAL_TIM_Base_Start(&htim5);
  HAL_Delay(15);
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 fde9 	bl	8001184 <HAL_Delay>

  // print out start message for debugging
  HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fe0a 	bl	80001d0 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f107 010c 	add.w	r1, r7, #12
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	4823      	ldr	r0, [pc, #140]	; (8000658 <main+0xe0>)
 80005ca:	f003 fa13 	bl	80039f4 <HAL_UART_Transmit>

  //// configure the I2C register for IMU
  ret = HAL_I2C_Mem_Write(&hi2c2, LSM6_ADDR, 0x10, 1, &config, 1, 50);
 80005ce:	23d4      	movs	r3, #212	; 0xd4
 80005d0:	b299      	uxth	r1, r3
 80005d2:	2332      	movs	r3, #50	; 0x32
 80005d4:	9302      	str	r3, [sp, #8]
 80005d6:	2301      	movs	r3, #1
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	4b20      	ldr	r3, [pc, #128]	; (800065c <main+0xe4>)
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2301      	movs	r3, #1
 80005e0:	2210      	movs	r2, #16
 80005e2:	481f      	ldr	r0, [pc, #124]	; (8000660 <main+0xe8>)
 80005e4:	f001 f9aa 	bl	800193c <HAL_I2C_Mem_Write>
 80005e8:	4603      	mov	r3, r0
 80005ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if(ret != HAL_OK)
 80005ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d014      	beq.n	8000620 <main+0xa8>
  {
		//return ret;
		strcpy((char*)text,"I2C Error\r\n");
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	4a1a      	ldr	r2, [pc, #104]	; (8000664 <main+0xec>)
 80005fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		while (1){HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);}
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fde2 	bl	80001d0 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	f107 010c 	add.w	r1, r7, #12
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	480f      	ldr	r0, [pc, #60]	; (8000658 <main+0xe0>)
 800061a:	f003 f9eb 	bl	80039f4 <HAL_UART_Transmit>
 800061e:	e7f0      	b.n	8000602 <main+0x8a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LEDBlink();
 8000620:	f000 fa2c 	bl	8000a7c <LEDBlink>
	  HAL_Delay(100);
 8000624:	2064      	movs	r0, #100	; 0x64
 8000626:	f000 fdad 	bl	8001184 <HAL_Delay>
	  readAccel(AccelVal,acSign);
 800062a:	463a      	mov	r2, r7
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	4611      	mov	r1, r2
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fa4b 	bl	8000acc <readAccel>
	  HAL_Delay(100);
 8000636:	2064      	movs	r0, #100	; 0x64
 8000638:	f000 fda4 	bl	8001184 <HAL_Delay>
	  LEDfunc(AccelVal,acSign);
 800063c:	463a      	mov	r2, r7
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4611      	mov	r1, r2
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fb48 	bl	8000cd8 <LEDfunc>
	  HAL_Delay(500);
 8000648:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064c:	f000 fd9a 	bl	8001184 <HAL_Delay>
	  LEDBlink();
 8000650:	e7e6      	b.n	8000620 <main+0xa8>
 8000652:	bf00      	nop
 8000654:	08004be4 	.word	0x08004be4
 8000658:	200000e8 	.word	0x200000e8
 800065c:	20000000 	.word	0x20000000
 8000660:	2000009c 	.word	0x2000009c
 8000664:	08004bd8 	.word	0x08004bd8

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b0b8      	sub	sp, #224	; 0xe0
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000672:	2244      	movs	r2, #68	; 0x44
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f003 fe6c 	bl	8004354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2288      	movs	r2, #136	; 0x88
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f003 fe5e 	bl	8004354 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000698:	f001 fe32 	bl	8002300 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800069c:	4b36      	ldr	r3, [pc, #216]	; (8000778 <SystemClock_Config+0x110>)
 800069e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006a2:	4a35      	ldr	r2, [pc, #212]	; (8000778 <SystemClock_Config+0x110>)
 80006a4:	f023 0318 	bic.w	r3, r3, #24
 80006a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006ac:	2314      	movs	r3, #20
 80006ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c4:	2360      	movs	r3, #96	; 0x60
 80006c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006d0:	2301      	movs	r3, #1
 80006d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006dc:	2328      	movs	r3, #40	; 0x28
 80006de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006e2:	2307      	movs	r3, #7
 80006e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006f8:	4618      	mov	r0, r3
 80006fa:	f001 fe75 	bl	80023e8 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000704:	f000 fb3a 	bl	8000d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000726:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800072a:	2104      	movs	r1, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fa41 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000738:	f000 fb20 	bl	8000d7c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C2;
 800073c:	2381      	movs	r3, #129	; 0x81
 800073e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000744:	2300      	movs	r3, #0
 8000746:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000748:	463b      	mov	r3, r7
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fc38 	bl	8002fc0 <HAL_RCCEx_PeriphCLKConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000756:	f000 fb11 	bl	8000d7c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800075a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800075e:	f001 fded 	bl	800233c <HAL_PWREx_ControlVoltageScaling>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0x104>
  {
    Error_Handler();
 8000768:	f000 fb08 	bl	8000d7c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800076c:	f002 ff12 	bl	8003594 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000770:	bf00      	nop
 8000772:	37e0      	adds	r7, #224	; 0xe0
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40021000 	.word	0x40021000

0800077c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_I2C2_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_I2C2_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_I2C2_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <MX_I2C2_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_I2C2_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_I2C2_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007b8:	f001 f831 	bl	800181e <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 fadb 	bl	8000d7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007ca:	f001 fd01 	bl	80021d0 <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 fad2 	bl	8000d7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2C2_Init+0x74>)
 80007dc:	f001 fd43 	bl	8002266 <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 fac9 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000009c 	.word	0x2000009c
 80007f4:	40005800 	.word	0x40005800
 80007f8:	10909cec 	.word	0x10909cec

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART1_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000840:	f003 f88a 	bl	8003958 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 fa97 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	200000e8 	.word	0x200000e8
 8000858:	40013800 	.word	0x40013800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000872:	4b7b      	ldr	r3, [pc, #492]	; (8000a60 <MX_GPIO_Init+0x204>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a7a      	ldr	r2, [pc, #488]	; (8000a60 <MX_GPIO_Init+0x204>)
 8000878:	f043 0310 	orr.w	r3, r3, #16
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b78      	ldr	r3, [pc, #480]	; (8000a60 <MX_GPIO_Init+0x204>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0310 	and.w	r3, r3, #16
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	4b75      	ldr	r3, [pc, #468]	; (8000a60 <MX_GPIO_Init+0x204>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a74      	ldr	r2, [pc, #464]	; (8000a60 <MX_GPIO_Init+0x204>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b72      	ldr	r3, [pc, #456]	; (8000a60 <MX_GPIO_Init+0x204>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b6f      	ldr	r3, [pc, #444]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a6e      	ldr	r2, [pc, #440]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b6c      	ldr	r3, [pc, #432]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ba:	4b69      	ldr	r3, [pc, #420]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a68      	ldr	r2, [pc, #416]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b66      	ldr	r3, [pc, #408]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	4b63      	ldr	r3, [pc, #396]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a62      	ldr	r2, [pc, #392]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b60      	ldr	r3, [pc, #384]	; (8000a60 <MX_GPIO_Init+0x204>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 80008f0:	485c      	ldr	r0, [pc, #368]	; (8000a64 <MX_GPIO_Init+0x208>)
 80008f2:	f000 ff3f 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, X_LED_Pin|Y_LED_Pin|LED1_Pin|SPBTLE_RF_RST_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	f44f 719c 	mov.w	r1, #312	; 0x138
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 ff38 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Z_LED_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f24b 0104 	movw	r1, #45060	; 0xb004
 800090a:	4857      	ldr	r0, [pc, #348]	; (8000a68 <MX_GPIO_Init+0x20c>)
 800090c:	f000 ff32 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000916:	4854      	ldr	r0, [pc, #336]	; (8000a68 <MX_GPIO_Init+0x20c>)
 8000918:	f000 ff2c 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_WIFI__LED4_BLE_GPIO_Port, LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000922:	4852      	ldr	r0, [pc, #328]	; (8000a6c <MX_GPIO_Init+0x210>)
 8000924:	f000 ff26 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STSAFE_A100_RESET_GPIO_Port, STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	2180      	movs	r1, #128	; 0x80
 800092c:	4850      	ldr	r0, [pc, #320]	; (8000a70 <MX_GPIO_Init+0x214>)
 800092e:	f000 ff21 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000932:	2201      	movs	r2, #1
 8000934:	2101      	movs	r1, #1
 8000936:	484b      	ldr	r0, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x208>)
 8000938:	f000 ff1c 	bl	8001774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800093c:	f240 1315 	movw	r3, #277	; 0x115
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	4843      	ldr	r0, [pc, #268]	; (8000a64 <MX_GPIO_Init+0x208>)
 8000956:	f000 fd4b 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800095a:	2362      	movs	r3, #98	; 0x62
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	4b45      	ldr	r3, [pc, #276]	; (8000a74 <MX_GPIO_Init+0x218>)
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000966:	f107 0314 	add.w	r3, r7, #20
 800096a:	4619      	mov	r1, r3
 800096c:	483d      	ldr	r0, [pc, #244]	; (8000a64 <MX_GPIO_Init+0x208>)
 800096e:	f000 fd3f 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000978:	4b3f      	ldr	r3, [pc, #252]	; (8000a78 <MX_GPIO_Init+0x21c>)
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4839      	ldr	r0, [pc, #228]	; (8000a6c <MX_GPIO_Init+0x210>)
 8000988:	f000 fd32 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_LED_Pin Y_LED_Pin LED1_Pin SPBTLE_RF_RST_Pin */
  GPIO_InitStruct.Pin = X_LED_Pin|Y_LED_Pin|LED1_Pin|SPBTLE_RF_RST_Pin;
 800098c:	f44f 739c 	mov.w	r3, #312	; 0x138
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a8:	f000 fd22 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Z_LED_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin */
  GPIO_InitStruct.Pin = Z_LED_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80009ac:	f24f 0304 	movw	r3, #61444	; 0xf004
 80009b0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4828      	ldr	r0, [pc, #160]	; (8000a68 <MX_GPIO_Init+0x20c>)
 80009c6:	f000 fd13 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|HTS221_DRDY_EXTI15_Pin;
 80009ca:	f44f 430c 	mov.w	r3, #35840	; 0x8c00
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d0:	4b28      	ldr	r3, [pc, #160]	; (8000a74 <MX_GPIO_Init+0x218>)
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4824      	ldr	r0, [pc, #144]	; (8000a70 <MX_GPIO_Init+0x214>)
 80009e0:	f000 fd06 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = LSM3MDL_DRDY_EXTI8_Pin;
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ea:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MX_GPIO_Init+0x218>)
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LSM3MDL_DRDY_EXTI8_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	481c      	ldr	r0, [pc, #112]	; (8000a6c <MX_GPIO_Init+0x210>)
 80009fa:	f000 fcf9 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = LED3_WIFI__LED4_BLE_Pin;
 80009fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_WIFI__LED4_BLE_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <MX_GPIO_Init+0x210>)
 8000a18:	f000 fcea 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = STSAFE_A100_RESET_Pin;
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STSAFE_A100_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	480f      	ldr	r0, [pc, #60]	; (8000a70 <MX_GPIO_Init+0x214>)
 8000a34:	f000 fcdc 	bl	80013f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2017      	movs	r0, #23
 8000a3e:	f000 fca0 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a42:	2017      	movs	r0, #23
 8000a44:	f000 fcb9 	bl	80013ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2028      	movs	r0, #40	; 0x28
 8000a4e:	f000 fc98 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a52:	2028      	movs	r0, #40	; 0x28
 8000a54:	f000 fcb1 	bl	80013ba <HAL_NVIC_EnableIRQ>

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40021000 	.word	0x40021000
 8000a64:	48001000 	.word	0x48001000
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	48000800 	.word	0x48000800
 8000a70:	48000c00 	.word	0x48000c00
 8000a74:	10110000 	.word	0x10110000
 8000a78:	10210000 	.word	0x10210000

08000a7c <LEDBlink>:
//	}
//	if (htim == &htim5){
//		//readXval();
//	}
//}
void LEDBlink (){
 8000a7c:	b5b0      	push	{r4, r5, r7, lr}
 8000a7e:	b08a      	sub	sp, #40	; 0x28
 8000a80:	af00      	add	r7, sp, #0
	uint8_t buff[] = "\n\n\n\n\n\n\n\n\n\n\nNew Data Acquired: \r\n";
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <LEDBlink+0x44>)
 8000a84:	1d3c      	adds	r4, r7, #4
 8000a86:	461d      	mov	r5, r3
 8000a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, buff, sizeof(buff), 1000);
 8000a94:	1d39      	adds	r1, r7, #4
 8000a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9a:	2221      	movs	r2, #33	; 0x21
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <LEDBlink+0x48>)
 8000a9e:	f002 ffa9 	bl	80039f4 <HAL_UART_Transmit>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8000aa2:	2120      	movs	r1, #32
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f000 fe7c 	bl	80017a4 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000aac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <LEDBlink+0x4c>)
 8000ab2:	f000 fe77 	bl	80017a4 <HAL_GPIO_TogglePin>
}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bdb0      	pop	{r4, r5, r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	08004c18 	.word	0x08004c18
 8000ac4:	200000e8 	.word	0x200000e8
 8000ac8:	48000400 	.word	0x48000400

08000acc <readAccel>:
//void readAccel(uint16_t *retval){
void readAccel(uint16_t *retval, char *retSi){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b096      	sub	sp, #88	; 0x58
 8000ad0:	af04      	add	r7, sp, #16
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	uint8_t text[50];      // text array for outputting in UART
	uint8_t buf[6];        // takes in data from IMU
	uint16_t val;          // combined value
//	uint16_t retarr[3];
	// read values from I2C
	ret = HAL_I2C_Mem_Read(&hi2c2, LSM6_ADDR, XALL_ADDR, 1, &buf, 6, HAL_MAX_DELAY);
 8000ad6:	23d4      	movs	r3, #212	; 0xd4
 8000ad8:	b299      	uxth	r1, r3
 8000ada:	2328      	movs	r3, #40	; 0x28
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	9302      	str	r3, [sp, #8]
 8000ae4:	2306      	movs	r3, #6
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	f107 0308 	add.w	r3, r7, #8
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2301      	movs	r3, #1
 8000af0:	4870      	ldr	r0, [pc, #448]	; (8000cb4 <readAccel+0x1e8>)
 8000af2:	f001 f837 	bl	8001b64 <HAL_I2C_Mem_Read>
 8000af6:	4603      	mov	r3, r0
 8000af8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	if (ret != HAL_OK){  // if I2C fails
 8000afc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d013      	beq.n	8000b2c <readAccel+0x60>
	  strcpy((char*)text,"ERROR RX1\r\n");
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	4a6b      	ldr	r2, [pc, #428]	; (8000cb8 <readAccel+0x1ec>)
 8000b0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	  HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fb5b 	bl	80001d0 <strlen>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	f107 0110 	add.w	r1, r7, #16
 8000b22:	f04f 33ff 	mov.w	r3, #4294967295
 8000b26:	4865      	ldr	r0, [pc, #404]	; (8000cbc <readAccel+0x1f0>)
 8000b28:	f002 ff64 	bl	80039f4 <HAL_UART_Transmit>
	}

	//// combing upper and lower values /////
	val = (((uint16_t)buf[1] << 8) | buf[0]);                             // creates X values
 8000b2c:	7a7b      	ldrb	r3, [r7, #9]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	7a3b      	ldrb	r3, [r7, #8]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	/////////////////////////////////////////
	// dealing with the two's complement and making printable string
	if ( val > 0x7FFF ) {
 8000b3e:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	da13      	bge.n	8000b6e <readAccel+0xa2>
		val = ~val & 0x7FFF;
 8000b46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		sprintf((char*)text,"X value: -%u \r\n",((unsigned int)(val)));   // negative condition
 8000b56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000b5a:	f107 0310 	add.w	r3, r7, #16
 8000b5e:	4958      	ldr	r1, [pc, #352]	; (8000cc0 <readAccel+0x1f4>)
 8000b60:	4618      	mov	r0, r3
 8000b62:	f003 fbff 	bl	8004364 <siprintf>
		retSi[0] = '-';
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	222d      	movs	r2, #45	; 0x2d
 8000b6a:	701a      	strb	r2, [r3, #0]
 8000b6c:	e00a      	b.n	8000b84 <readAccel+0xb8>
	}
	else {
		sprintf((char*)text,"X value: %u \r\n",((unsigned int)(val)));    // not negative
 8000b6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4953      	ldr	r1, [pc, #332]	; (8000cc4 <readAccel+0x1f8>)
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f003 fbf3 	bl	8004364 <siprintf>
		retSi[0] = '+';
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	222b      	movs	r2, #43	; 0x2b
 8000b82:	701a      	strb	r2, [r3, #0]
	}
	retval[0] = val;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000b8a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY); // prints
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fb1d 	bl	80001d0 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f107 0110 	add.w	r1, r7, #16
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	4846      	ldr	r0, [pc, #280]	; (8000cbc <readAccel+0x1f0>)
 8000ba4:	f002 ff26 	bl	80039f4 <HAL_UART_Transmit>

	/////////////////////////////////////////
	val = (((uint16_t)buf[3] << 8) | buf[2]);                             // creates Y values
 8000ba8:	7afb      	ldrb	r3, [r7, #11]
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	7abb      	ldrb	r3, [r7, #10]
 8000bb0:	b21b      	sxth	r3, r3
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	/////////////////////////////////////////
	if ( val > 0x7FFF ) {
 8000bba:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	da14      	bge.n	8000bec <readAccel+0x120>
		val = ~val & 0x7FFF;
 8000bc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000bce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		sprintf((char*)text,"Y value: -%u \r\n",((unsigned int)(val)));
 8000bd2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000bd6:	f107 0310 	add.w	r3, r7, #16
 8000bda:	493b      	ldr	r1, [pc, #236]	; (8000cc8 <readAccel+0x1fc>)
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f003 fbc1 	bl	8004364 <siprintf>
		retSi[1] = '-';
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	222d      	movs	r2, #45	; 0x2d
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e00b      	b.n	8000c04 <readAccel+0x138>
	}
	else {
		sprintf((char*)text,"Y value: %u \r\n",((unsigned int)(val)));
 8000bec:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000bf0:	f107 0310 	add.w	r3, r7, #16
 8000bf4:	4935      	ldr	r1, [pc, #212]	; (8000ccc <readAccel+0x200>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fbb4 	bl	8004364 <siprintf>
		retSi[1] = '+';
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	222b      	movs	r2, #43	; 0x2b
 8000c02:	701a      	strb	r2, [r3, #0]
	}
	retval[1] = val;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3302      	adds	r3, #2
 8000c08:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000c0c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY);
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fadc 	bl	80001d0 <strlen>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	f107 0110 	add.w	r1, r7, #16
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	4825      	ldr	r0, [pc, #148]	; (8000cbc <readAccel+0x1f0>)
 8000c26:	f002 fee5 	bl	80039f4 <HAL_UART_Transmit>

	/////////////////////////////////////////
	val = (((uint16_t)buf[5] << 8) | buf[4]);                             // creates Z values
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	021b      	lsls	r3, r3, #8
 8000c2e:	b21a      	sxth	r2, r3
 8000c30:	7b3b      	ldrb	r3, [r7, #12]
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b21b      	sxth	r3, r3
 8000c38:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	/////////////////////////////////////////
	if ( val > 0x7FFF ) {
 8000c3c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	da14      	bge.n	8000c6e <readAccel+0x1a2>
		val = ~val & 0x7FFF;
 8000c44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c50:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		sprintf((char*)text,"Z value: -%u \r\n",((unsigned int)(val)));
 8000c54:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	491c      	ldr	r1, [pc, #112]	; (8000cd0 <readAccel+0x204>)
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 fb80 	bl	8004364 <siprintf>
		retSi[2] = '-';
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	3302      	adds	r3, #2
 8000c68:	222d      	movs	r2, #45	; 0x2d
 8000c6a:	701a      	strb	r2, [r3, #0]
 8000c6c:	e00b      	b.n	8000c86 <readAccel+0x1ba>
	}
	else {
//		sprintf((char*)text,"Z value: %u \r\n\n\n\n\n",((unsigned int)(val)));
		sprintf((char*)text,"Z value: %u \r\n",((unsigned int)(val)));
 8000c6e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000c72:	f107 0310 	add.w	r3, r7, #16
 8000c76:	4917      	ldr	r1, [pc, #92]	; (8000cd4 <readAccel+0x208>)
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fb73 	bl	8004364 <siprintf>
		retSi[2] = '+';
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	3302      	adds	r3, #2
 8000c82:	222b      	movs	r2, #43	; 0x2b
 8000c84:	701a      	strb	r2, [r3, #0]
	}
	retval[2] = val;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3304      	adds	r3, #4
 8000c8a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000c8e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, text, strlen((char*)text), HAL_MAX_DELAY); // prints
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fa9b 	bl	80001d0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f107 0110 	add.w	r1, r7, #16
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <readAccel+0x1f0>)
 8000ca8:	f002 fea4 	bl	80039f4 <HAL_UART_Transmit>
//	return &retarr;
}
 8000cac:	bf00      	nop
 8000cae:	3748      	adds	r7, #72	; 0x48
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000009c 	.word	0x2000009c
 8000cb8:	08004c3c 	.word	0x08004c3c
 8000cbc:	200000e8 	.word	0x200000e8
 8000cc0:	08004c48 	.word	0x08004c48
 8000cc4:	08004c58 	.word	0x08004c58
 8000cc8:	08004c68 	.word	0x08004c68
 8000ccc:	08004c78 	.word	0x08004c78
 8000cd0:	08004c88 	.word	0x08004c88
 8000cd4:	08004c98 	.word	0x08004c98

08000cd8 <LEDfunc>:
//void LEDfunc(uint16_t *accVal){
void LEDfunc(uint16_t *accVal, char *acSi){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
	uint8_t out[16];
	if (accVal[0] > 5000 ){//&& HAL_GPIO_ReadPin(X_LED_GPIO_Port, X_LED_Pin)){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d922      	bls.n	8000d34 <LEDfunc+0x5c>
		//HAL_GPIO(X_LED_GPIO_Port, X_LED_Pin);
		//HAL_GPIO_WritePin(GPIOx, GPIO_Pin, PinState)
		if (HAL_GPIO_ReadPin(X_LED_GPIO_Port, X_LED_Pin)){
 8000cee:	2108      	movs	r1, #8
 8000cf0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf4:	f000 fd26 	bl	8001744 <HAL_GPIO_ReadPin>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00d      	beq.n	8000d1a <LEDfunc+0x42>
			strcpy((char*)out,"X is on");
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	4a1a      	ldr	r2, [pc, #104]	; (8000d6c <LEDfunc+0x94>)
 8000d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d08:	e883 0003 	stmia.w	r3, {r0, r1}
			HAL_GPIO_WritePin(X_LED_GPIO_Port, X_LED_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2108      	movs	r1, #8
 8000d10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d14:	f000 fd2e 	bl	8001774 <HAL_GPIO_WritePin>
 8000d18:	e015      	b.n	8000d46 <LEDfunc+0x6e>
		}
		else{
			strcpy((char*)out,"X is off");
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <LEDfunc+0x98>)
 8000d20:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d22:	c303      	stmia	r3!, {r0, r1}
 8000d24:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(X_LED_GPIO_Port, X_LED_Pin, GPIO_PIN_SET);
 8000d26:	2201      	movs	r2, #1
 8000d28:	2108      	movs	r1, #8
 8000d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2e:	f000 fd21 	bl	8001774 <HAL_GPIO_WritePin>
 8000d32:	e008      	b.n	8000d46 <LEDfunc+0x6e>
		}
		//strcpy((char*)out,"X is pos");
//		sprintf((char*)out,"X is %c%d\r\n",acSi[0],accVal[0]);
	}
	else{
		strcpy((char*)out,"X is low\r\n");
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <LEDfunc+0x9c>)
 8000d3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d3c:	c303      	stmia	r3!, {r0, r1}
 8000d3e:	801a      	strh	r2, [r3, #0]
 8000d40:	3302      	adds	r3, #2
 8000d42:	0c12      	lsrs	r2, r2, #16
 8000d44:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(&huart1, out, strlen((char*)out), HAL_MAX_DELAY);
 8000d46:	f107 0308 	add.w	r3, r7, #8
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff fa40 	bl	80001d0 <strlen>
 8000d50:	4603      	mov	r3, r0
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	f107 0108 	add.w	r1, r7, #8
 8000d58:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5c:	4806      	ldr	r0, [pc, #24]	; (8000d78 <LEDfunc+0xa0>)
 8000d5e:	f002 fe49 	bl	80039f4 <HAL_UART_Transmit>
//		strcpy((char*)out,"Z is high (flat)\r\n");
	}
//	HAL_UART_Transmit(&huart1, out, strlen((char*)out), HAL_MAX_DELAY);


}
 8000d62:	bf00      	nop
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	08004ca8 	.word	0x08004ca8
 8000d70:	08004cb0 	.word	0x08004cb0
 8000d74:	08004cbc 	.word	0x08004cbc
 8000d78:	200000e8 	.word	0x200000e8

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x44>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6593      	str	r3, [r2, #88]	; 0x58
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <HAL_I2C_MspInit+0x7c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d128      	bne.n	8000e44 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e10:	2312      	movs	r3, #18
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e1c:	2304      	movs	r3, #4
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <HAL_I2C_MspInit+0x84>)
 8000e28:	f000 fae2 	bl	80013f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e30:	4a07      	ldr	r2, [pc, #28]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e36:	6593      	str	r3, [r2, #88]	; 0x58
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_I2C_MspInit+0x80>)
 8000e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40005800 	.word	0x40005800
 8000e50:	40021000 	.word	0x40021000
 8000e54:	48000400 	.word	0x48000400

08000e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_UART_MspInit+0x7c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d127      	bne.n	8000eca <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <HAL_UART_MspInit+0x80>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	4a16      	ldr	r2, [pc, #88]	; (8000ed8 <HAL_UART_MspInit+0x80>)
 8000e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e84:	6613      	str	r3, [r2, #96]	; 0x60
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <HAL_UART_MspInit+0x80>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <HAL_UART_MspInit+0x80>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <HAL_UART_MspInit+0x80>)
 8000e98:	f043 0302 	orr.w	r3, r3, #2
 8000e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_UART_MspInit+0x80>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000eaa:	23c0      	movs	r3, #192	; 0xc0
 8000eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eba:	2307      	movs	r3, #7
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_UART_MspInit+0x84>)
 8000ec6:	f000 fa93 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40013800 	.word	0x40013800
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	48000400 	.word	0x48000400

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f90a 	bl	8001144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000f38:	2020      	movs	r0, #32
 8000f3a:	f000 fc4d 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000f3e:	2040      	movs	r0, #64	; 0x40
 8000f40:	f000 fc4a 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000f44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000f48:	f000 fc46 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f58:	f000 fc3e 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000f5c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f60:	f000 fc3a 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f68:	f000 fc36 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000f6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f70:	f000 fc32 	bl	80017d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <_sbrk+0x5c>)
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <_sbrk+0x60>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x64>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <_sbrk+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d207      	bcs.n	8000fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa8:	f003 f9aa 	bl	8004300 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb6:	e009      	b.n	8000fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <_sbrk+0x64>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <_sbrk+0x64>)
 8000fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20018000 	.word	0x20018000
 8000fd8:	00000400 	.word	0x00000400
 8000fdc:	20000090 	.word	0x20000090
 8000fe0:	20000180 	.word	0x20000180

08000fe4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <SystemInit+0x5c>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a14      	ldr	r2, [pc, #80]	; (8001040 <SystemInit+0x5c>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <SystemInit+0x60>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <SystemInit+0x60>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <SystemInit+0x60>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <SystemInit+0x60>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <SystemInit+0x60>)
 8001010:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001014:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001018:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <SystemInit+0x60>)
 800101c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001020:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <SystemInit+0x60>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <SystemInit+0x60>)
 8001028:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SystemInit+0x60>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	40021000 	.word	0x40021000

08001048 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800104c:	f7ff ffca 	bl	8000fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001050:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001052:	e003      	b.n	800105c <LoopCopyDataInit>

08001054 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001056:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001058:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800105a:	3104      	adds	r1, #4

0800105c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800105c:	480a      	ldr	r0, [pc, #40]	; (8001088 <LoopForever+0xa>)
	ldr	r3, =_edata
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001060:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001062:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001064:	d3f6      	bcc.n	8001054 <CopyDataInit>
	ldr	r2, =_sbss
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001068:	e002      	b.n	8001070 <LoopFillZerobss>

0800106a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800106a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800106c:	f842 3b04 	str.w	r3, [r2], #4

08001070 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LoopForever+0x16>)
	cmp	r2, r3
 8001072:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001074:	d3f9      	bcc.n	800106a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001076:	f003 f949 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107a:	f7ff fa7d 	bl	8000578 <main>

0800107e <LoopForever>:

LoopForever:
    b LoopForever
 800107e:	e7fe      	b.n	800107e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001084:	08004d54 	.word	0x08004d54
	ldr	r0, =_sdata
 8001088:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800108c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001090:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001094:	20000180 	.word	0x20000180

08001098 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC1_2_IRQHandler>

0800109a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a4:	2003      	movs	r0, #3
 80010a6:	f000 f961 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 f80e 	bl	80010cc <HAL_InitTick>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d002      	beq.n	80010bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010bc:	f7ff fe64 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	79fb      	ldrb	r3, [r7, #7]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d4:	2300      	movs	r3, #0
 80010d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_InitTick+0x6c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d023      	beq.n	8001128 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_InitTick+0x70>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_InitTick+0x6c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4619      	mov	r1, r3
 80010ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f96d 	bl	80013d6 <HAL_SYSTICK_Config>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10f      	bne.n	8001122 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d809      	bhi.n	800111c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f937 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <HAL_InitTick+0x74>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e007      	b.n	800112c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e004      	b.n	800112c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	e001      	b.n	800112c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000000c 	.word	0x2000000c
 800113c:	20000004 	.word	0x20000004
 8001140:	20000008 	.word	0x20000008

08001144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x20>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	461a      	mov	r2, r3
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x24>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4413      	add	r3, r2
 8001154:	4a04      	ldr	r2, [pc, #16]	; (8001168 <HAL_IncTick+0x24>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	2000000c 	.word	0x2000000c
 8001168:	2000016c 	.word	0x2000016c

0800116c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTick;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTick+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000016c 	.word	0x2000016c

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffee 	bl	800116c <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffde 	bl	800116c <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000000c 	.word	0x2000000c

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001390:	2300      	movs	r3, #0
 8001392:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001394:	f7ff ff3e 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001398:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68b9      	ldr	r1, [r7, #8]
 800139e:	6978      	ldr	r0, [r7, #20]
 80013a0:	f7ff ff8e 	bl	80012c0 <NVIC_EncodePriority>
 80013a4:	4602      	mov	r2, r0
 80013a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff5d 	bl	800126c <__NVIC_SetPriority>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff31 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff ffa2 	bl	8001328 <SysTick_Config>
 80013e4:	4603      	mov	r3, r0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e17f      	b.n	8001700 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 8171 	beq.w	80016fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d00b      	beq.n	8001438 <HAL_GPIO_Init+0x48>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142c:	2b11      	cmp	r3, #17
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b12      	cmp	r3, #18
 8001436:	d130      	bne.n	800149a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146e:	2201      	movs	r2, #1
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	f003 0201 	and.w	r2, r3, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d118      	bne.n	80014d8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014ac:	2201      	movs	r2, #1
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	08db      	lsrs	r3, r3, #3
 80014c2:	f003 0201 	and.w	r2, r3, #1
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	2203      	movs	r2, #3
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b02      	cmp	r3, #2
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x128>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b12      	cmp	r3, #18
 8001516:	d123      	bne.n	8001560 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001524:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	220f      	movs	r2, #15
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	08da      	lsrs	r2, r3, #3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3208      	adds	r2, #8
 800155a:	6939      	ldr	r1, [r7, #16]
 800155c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	2203      	movs	r2, #3
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f003 0203 	and.w	r2, r3, #3
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80ac 	beq.w	80016fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a2:	4b5f      	ldr	r3, [pc, #380]	; (8001720 <HAL_GPIO_Init+0x330>)
 80015a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a6:	4a5e      	ldr	r2, [pc, #376]	; (8001720 <HAL_GPIO_Init+0x330>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	6613      	str	r3, [r2, #96]	; 0x60
 80015ae:	4b5c      	ldr	r3, [pc, #368]	; (8001720 <HAL_GPIO_Init+0x330>)
 80015b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015ba:	4a5a      	ldr	r2, [pc, #360]	; (8001724 <HAL_GPIO_Init+0x334>)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	3302      	adds	r3, #2
 80015c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	220f      	movs	r2, #15
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015e4:	d025      	beq.n	8001632 <HAL_GPIO_Init+0x242>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4f      	ldr	r2, [pc, #316]	; (8001728 <HAL_GPIO_Init+0x338>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d01f      	beq.n	800162e <HAL_GPIO_Init+0x23e>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4e      	ldr	r2, [pc, #312]	; (800172c <HAL_GPIO_Init+0x33c>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d019      	beq.n	800162a <HAL_GPIO_Init+0x23a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4d      	ldr	r2, [pc, #308]	; (8001730 <HAL_GPIO_Init+0x340>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d013      	beq.n	8001626 <HAL_GPIO_Init+0x236>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4c      	ldr	r2, [pc, #304]	; (8001734 <HAL_GPIO_Init+0x344>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d00d      	beq.n	8001622 <HAL_GPIO_Init+0x232>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4b      	ldr	r2, [pc, #300]	; (8001738 <HAL_GPIO_Init+0x348>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d007      	beq.n	800161e <HAL_GPIO_Init+0x22e>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4a      	ldr	r2, [pc, #296]	; (800173c <HAL_GPIO_Init+0x34c>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d101      	bne.n	800161a <HAL_GPIO_Init+0x22a>
 8001616:	2306      	movs	r3, #6
 8001618:	e00c      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800161a:	2307      	movs	r3, #7
 800161c:	e00a      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800161e:	2305      	movs	r3, #5
 8001620:	e008      	b.n	8001634 <HAL_GPIO_Init+0x244>
 8001622:	2304      	movs	r3, #4
 8001624:	e006      	b.n	8001634 <HAL_GPIO_Init+0x244>
 8001626:	2303      	movs	r3, #3
 8001628:	e004      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800162a:	2302      	movs	r3, #2
 800162c:	e002      	b.n	8001634 <HAL_GPIO_Init+0x244>
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <HAL_GPIO_Init+0x244>
 8001632:	2300      	movs	r3, #0
 8001634:	697a      	ldr	r2, [r7, #20]
 8001636:	f002 0203 	and.w	r2, r2, #3
 800163a:	0092      	lsls	r2, r2, #2
 800163c:	4093      	lsls	r3, r2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001644:	4937      	ldr	r1, [pc, #220]	; (8001724 <HAL_GPIO_Init+0x334>)
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	3302      	adds	r3, #2
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_GPIO_Init+0x350>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001676:	4a32      	ldr	r2, [pc, #200]	; (8001740 <HAL_GPIO_Init+0x350>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800167c:	4b30      	ldr	r3, [pc, #192]	; (8001740 <HAL_GPIO_Init+0x350>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016a0:	4a27      	ldr	r2, [pc, #156]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016ca:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43db      	mvns	r3, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016f4:	4a12      	ldr	r2, [pc, #72]	; (8001740 <HAL_GPIO_Init+0x350>)
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3301      	adds	r3, #1
 80016fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f ae78 	bne.w	8001400 <HAL_GPIO_Init+0x10>
  }
}
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	40010000 	.word	0x40010000
 8001728:	48000400 	.word	0x48000400
 800172c:	48000800 	.word	0x48000800
 8001730:	48000c00 	.word	0x48000c00
 8001734:	48001000 	.word	0x48001000
 8001738:	48001400 	.word	0x48001400
 800173c:	48001800 	.word	0x48001800
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691a      	ldr	r2, [r3, #16]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	4613      	mov	r3, r2
 8001782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001784:	787b      	ldrb	r3, [r7, #1]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001790:	e002      	b.n	8001798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001792:	887a      	ldrh	r2, [r7, #2]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4013      	ands	r3, r2
 80017bc:	041a      	lsls	r2, r3, #16
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	43d9      	mvns	r1, r3
 80017c2:	887b      	ldrh	r3, [r7, #2]
 80017c4:	400b      	ands	r3, r1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	619a      	str	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e4:	695a      	ldr	r2, [r3, #20]
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f000 f806 	bl	8001808 <HAL_GPIO_EXTI_Callback>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40010400 	.word	0x40010400

08001808 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e081      	b.n	8001934 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff fac3 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2224      	movs	r2, #36	; 0x24
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 0201 	bic.w	r2, r2, #1
 8001860:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800186e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800187e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	e006      	b.n	80018a6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018a4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d104      	bne.n	80018b8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6812      	ldr	r2, [r2, #0]
 80018c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	ea42 0103 	orr.w	r1, r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	021a      	lsls	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69d9      	ldr	r1, [r3, #28]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1a      	ldr	r2, [r3, #32]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 0201 	orr.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af02      	add	r7, sp, #8
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	4608      	mov	r0, r1
 8001946:	4611      	mov	r1, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4603      	mov	r3, r0
 800194c:	817b      	strh	r3, [r7, #10]
 800194e:	460b      	mov	r3, r1
 8001950:	813b      	strh	r3, [r7, #8]
 8001952:	4613      	mov	r3, r2
 8001954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b20      	cmp	r3, #32
 8001960:	f040 80f9 	bne.w	8001b56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d002      	beq.n	8001970 <HAL_I2C_Mem_Write+0x34>
 800196a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800196c:	2b00      	cmp	r3, #0
 800196e:	d105      	bne.n	800197c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001976:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e0ed      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_I2C_Mem_Write+0x4e>
 8001986:	2302      	movs	r3, #2
 8001988:	e0e6      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001992:	f7ff fbeb 	bl	800116c <HAL_GetTick>
 8001996:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fac3 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0d1      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2221      	movs	r2, #33	; 0x21
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a3a      	ldr	r2, [r7, #32]
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80019d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2200      	movs	r2, #0
 80019da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019dc:	88f8      	ldrh	r0, [r7, #6]
 80019de:	893a      	ldrh	r2, [r7, #8]
 80019e0:	8979      	ldrh	r1, [r7, #10]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	9301      	str	r3, [sp, #4]
 80019e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	4603      	mov	r3, r0
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 f9d3 	bl	8001d98 <I2C_RequestMemoryWrite>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0a9      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2bff      	cmp	r3, #255	; 0xff
 8001a0c:	d90e      	bls.n	8001a2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	22ff      	movs	r2, #255	; 0xff
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	8979      	ldrh	r1, [r7, #10]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fba5 	bl	8002174 <I2C_TransferConfig>
 8001a2a:	e00f      	b.n	8001a4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	8979      	ldrh	r1, [r7, #10]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 fb94 	bl	8002174 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a50:	68f8      	ldr	r0, [r7, #12]
 8001a52:	f000 faad 	bl	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e07b      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	781a      	ldrb	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d034      	beq.n	8001b04 <HAL_I2C_Mem_Write+0x1c8>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d130      	bne.n	8001b04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2180      	movs	r1, #128	; 0x80
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 fa3f 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e04d      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d90e      	bls.n	8001ae4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	22ff      	movs	r2, #255	; 0xff
 8001aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	8979      	ldrh	r1, [r7, #10]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 fb49 	bl	8002174 <I2C_TransferConfig>
 8001ae2:	e00f      	b.n	8001b04 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	8979      	ldrh	r1, [r7, #10]
 8001af6:	2300      	movs	r3, #0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fb38 	bl	8002174 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d19e      	bne.n	8001a4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fa8c 	bl	8002030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e01a      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2220      	movs	r2, #32
 8001b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6859      	ldr	r1, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_I2C_Mem_Write+0x224>)
 8001b36:	400b      	ands	r3, r1
 8001b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	fe00e800 	.word	0xfe00e800

08001b64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	4608      	mov	r0, r1
 8001b6e:	4611      	mov	r1, r2
 8001b70:	461a      	mov	r2, r3
 8001b72:	4603      	mov	r3, r0
 8001b74:	817b      	strh	r3, [r7, #10]
 8001b76:	460b      	mov	r3, r1
 8001b78:	813b      	strh	r3, [r7, #8]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	f040 80fd 	bne.w	8001d86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_I2C_Mem_Read+0x34>
 8001b92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0f1      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_I2C_Mem_Read+0x4e>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e0ea      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bba:	f7ff fad7 	bl	800116c <HAL_GetTick>
 8001bbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	9300      	str	r3, [sp, #0]
 8001bc4:	2319      	movs	r3, #25
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 f9af 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0d5      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2222      	movs	r2, #34	; 0x22
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	6a3a      	ldr	r2, [r7, #32]
 8001bf6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c04:	88f8      	ldrh	r0, [r7, #6]
 8001c06:	893a      	ldrh	r2, [r7, #8]
 8001c08:	8979      	ldrh	r1, [r7, #10]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	4603      	mov	r3, r0
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 f913 	bl	8001e40 <I2C_RequestMemoryRead>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e0ad      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	2bff      	cmp	r3, #255	; 0xff
 8001c34:	d90e      	bls.n	8001c54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	22ff      	movs	r2, #255	; 0xff
 8001c3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	8979      	ldrh	r1, [r7, #10]
 8001c44:	4b52      	ldr	r3, [pc, #328]	; (8001d90 <HAL_I2C_Mem_Read+0x22c>)
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 fa91 	bl	8002174 <I2C_TransferConfig>
 8001c52:	e00f      	b.n	8001c74 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	8979      	ldrh	r1, [r7, #10]
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_I2C_Mem_Read+0x22c>)
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fa80 	bl	8002174 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f956 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07c      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d034      	beq.n	8001d34 <HAL_I2C_Mem_Read+0x1d0>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d130      	bne.n	8001d34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f927 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04d      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2bff      	cmp	r3, #255	; 0xff
 8001cf4:	d90e      	bls.n	8001d14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	22ff      	movs	r2, #255	; 0xff
 8001cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	8979      	ldrh	r1, [r7, #10]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fa31 	bl	8002174 <I2C_TransferConfig>
 8001d12:	e00f      	b.n	8001d34 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	8979      	ldrh	r1, [r7, #10]
 8001d26:	2300      	movs	r3, #0
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fa20 	bl	8002174 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d19a      	bne.n	8001c74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f974 	bl	8002030 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e01a      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2220      	movs	r2, #32
 8001d58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_I2C_Mem_Read+0x230>)
 8001d66:	400b      	ands	r3, r1
 8001d68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2220      	movs	r2, #32
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	e000      	b.n	8001d88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001d86:	2302      	movs	r3, #2
  }
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	80002400 	.word	0x80002400
 8001d94:	fe00e800 	.word	0xfe00e800

08001d98 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4603      	mov	r3, r0
 8001da8:	817b      	strh	r3, [r7, #10]
 8001daa:	460b      	mov	r3, r1
 8001dac:	813b      	strh	r3, [r7, #8]
 8001dae:	4613      	mov	r3, r2
 8001db0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	8979      	ldrh	r1, [r7, #10]
 8001db8:	4b20      	ldr	r3, [pc, #128]	; (8001e3c <I2C_RequestMemoryWrite+0xa4>)
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f9d7 	bl	8002174 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	69b9      	ldr	r1, [r7, #24]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f8f0 	bl	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e02c      	b.n	8001e34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d105      	bne.n	8001dec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	629a      	str	r2, [r3, #40]	; 0x28
 8001dea:	e015      	b.n	8001e18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dec:	893b      	ldrh	r3, [r7, #8]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dfa:	69fa      	ldr	r2, [r7, #28]
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f8d6 	bl	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e012      	b.n	8001e34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e0e:	893b      	ldrh	r3, [r7, #8]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2180      	movs	r1, #128	; 0x80
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f884 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	80002000 	.word	0x80002000

08001e40 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af02      	add	r7, sp, #8
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	4608      	mov	r0, r1
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	817b      	strh	r3, [r7, #10]
 8001e52:	460b      	mov	r3, r1
 8001e54:	813b      	strh	r3, [r7, #8]
 8001e56:	4613      	mov	r3, r2
 8001e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e5a:	88fb      	ldrh	r3, [r7, #6]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	8979      	ldrh	r1, [r7, #10]
 8001e60:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <I2C_RequestMemoryRead+0xa4>)
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2300      	movs	r3, #0
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 f984 	bl	8002174 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f89d 	bl	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e02c      	b.n	8001eda <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d105      	bne.n	8001e92 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e86:	893b      	ldrh	r3, [r7, #8]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8001e90:	e015      	b.n	8001ebe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001e92:	893b      	ldrh	r3, [r7, #8]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ea0:	69fa      	ldr	r2, [r7, #28]
 8001ea2:	69b9      	ldr	r1, [r7, #24]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f883 	bl	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e012      	b.n	8001eda <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001eb4:	893b      	ldrh	r3, [r7, #8]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2140      	movs	r1, #64	; 0x40
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f831 	bl	8001f30 <I2C_WaitOnFlagUntilTimeout>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	80002000 	.word	0x80002000

08001ee8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d103      	bne.n	8001f06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d007      	beq.n	8001f24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	619a      	str	r2, [r3, #24]
  }
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f40:	e022      	b.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d01e      	beq.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f4a:	f7ff f90f 	bl	800116c <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d302      	bcc.n	8001f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d113      	bne.n	8001f88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f64:	f043 0220 	orr.w	r2, r3, #32
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e00f      	b.n	8001fa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	bf0c      	ite	eq
 8001f98:	2301      	moveq	r3, #1
 8001f9a:	2300      	movne	r3, #0
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d0cd      	beq.n	8001f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fbc:	e02c      	b.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 f870 	bl	80020a8 <I2C_IsAcknowledgeFailed>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e02a      	b.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd8:	d01e      	beq.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fda:	f7ff f8c7 	bl	800116c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d302      	bcc.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d113      	bne.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e007      	b.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b02      	cmp	r3, #2
 8002024:	d1cb      	bne.n	8001fbe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800203c:	e028      	b.n	8002090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68b9      	ldr	r1, [r7, #8]
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f830 	bl	80020a8 <I2C_IsAcknowledgeFailed>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e026      	b.n	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7ff f88b 	bl	800116c <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	68ba      	ldr	r2, [r7, #8]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d113      	bne.n	8002090 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e007      	b.n	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b20      	cmp	r3, #32
 800209c:	d1cf      	bne.n	800203e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0310 	and.w	r3, r3, #16
 80020be:	2b10      	cmp	r3, #16
 80020c0:	d151      	bne.n	8002166 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c2:	e022      	b.n	800210a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d01e      	beq.n	800210a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020cc:	f7ff f84e 	bl	800116c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d302      	bcc.n	80020e2 <I2C_IsAcknowledgeFailed+0x3a>
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d113      	bne.n	800210a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f043 0220 	orr.w	r2, r3, #32
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e02e      	b.n	8002168 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b20      	cmp	r3, #32
 8002116:	d1d5      	bne.n	80020c4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2210      	movs	r2, #16
 800211e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2220      	movs	r2, #32
 8002126:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f7ff fedd 	bl	8001ee8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6859      	ldr	r1, [r3, #4]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <I2C_IsAcknowledgeFailed+0xc8>)
 800213a:	400b      	ands	r3, r1
 800213c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f043 0204 	orr.w	r2, r3, #4
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2220      	movs	r2, #32
 800214e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	fe00e800 	.word	0xfe00e800

08002174 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	460b      	mov	r3, r1
 8002180:	817b      	strh	r3, [r7, #10]
 8002182:	4613      	mov	r3, r2
 8002184:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	0d5b      	lsrs	r3, r3, #21
 8002190:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002194:	4b0d      	ldr	r3, [pc, #52]	; (80021cc <I2C_TransferConfig+0x58>)
 8002196:	430b      	orrs	r3, r1
 8002198:	43db      	mvns	r3, r3
 800219a:	ea02 0103 	and.w	r1, r2, r3
 800219e:	897b      	ldrh	r3, [r7, #10]
 80021a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021a4:	7a7b      	ldrb	r3, [r7, #9]
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80021be:	bf00      	nop
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	03ff63ff 	.word	0x03ff63ff

080021d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b20      	cmp	r3, #32
 80021e4:	d138      	bne.n	8002258 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e032      	b.n	800225a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2224      	movs	r2, #36	; 0x24
 8002200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002222:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6819      	ldr	r1, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002266:	b480      	push	{r7}
 8002268:	b085      	sub	sp, #20
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002276:	b2db      	uxtb	r3, r3
 8002278:	2b20      	cmp	r3, #32
 800227a:	d139      	bne.n	80022f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002286:	2302      	movs	r3, #2
 8002288:	e033      	b.n	80022f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2224      	movs	r2, #36	; 0x24
 8002296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0201 	bic.w	r2, r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
 80022ee:	e000      	b.n	80022f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80022f0:	2302      	movs	r3, #2
  }
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40007000 	.word	0x40007000

08002320 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <HAL_PWREx_GetVoltageRange+0x18>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800232c:	4618      	mov	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40007000 	.word	0x40007000

0800233c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234a:	d130      	bne.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002358:	d038      	beq.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002364:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002368:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2232      	movs	r2, #50	; 0x32
 8002370:	fb02 f303 	mul.w	r3, r2, r3
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	0c9b      	lsrs	r3, r3, #18
 800237c:	3301      	adds	r3, #1
 800237e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002380:	e002      	b.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3b01      	subs	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002394:	d102      	bne.n	800239c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f2      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023a8:	d110      	bne.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e00f      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ba:	d007      	beq.n	80023cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023bc:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023c4:	4a05      	ldr	r2, [pc, #20]	; (80023dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40007000 	.word	0x40007000
 80023e0:	20000004 	.word	0x20000004
 80023e4:	431bde83 	.word	0x431bde83

080023e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e3d4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fa:	4ba1      	ldr	r3, [pc, #644]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002404:	4b9e      	ldr	r3, [pc, #632]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0310 	and.w	r3, r3, #16
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80e4 	beq.w	80025e4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_RCC_OscConfig+0x4a>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	f040 808b 	bne.w	8002540 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	2b01      	cmp	r3, #1
 800242e:	f040 8087 	bne.w	8002540 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002432:	4b93      	ldr	r3, [pc, #588]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e3ac      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1a      	ldr	r2, [r3, #32]
 800244e:	4b8c      	ldr	r3, [pc, #560]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0308 	and.w	r3, r3, #8
 8002456:	2b00      	cmp	r3, #0
 8002458:	d004      	beq.n	8002464 <HAL_RCC_OscConfig+0x7c>
 800245a:	4b89      	ldr	r3, [pc, #548]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002462:	e005      	b.n	8002470 <HAL_RCC_OscConfig+0x88>
 8002464:	4b86      	ldr	r3, [pc, #536]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	4293      	cmp	r3, r2
 8002472:	d223      	bcs.n	80024bc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fd41 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e38d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002488:	4b7d      	ldr	r3, [pc, #500]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a7c      	ldr	r2, [pc, #496]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800248e:	f043 0308 	orr.w	r3, r3, #8
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	4b7a      	ldr	r3, [pc, #488]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a1b      	ldr	r3, [r3, #32]
 80024a0:	4977      	ldr	r1, [pc, #476]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	021b      	lsls	r3, r3, #8
 80024b4:	4972      	ldr	r1, [pc, #456]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	604b      	str	r3, [r1, #4]
 80024ba:	e025      	b.n	8002508 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024bc:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a6f      	ldr	r2, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024c2:	f043 0308 	orr.w	r3, r3, #8
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	496a      	ldr	r1, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024da:	4b69      	ldr	r3, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	4965      	ldr	r1, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fd01 	bl	8002f00 <RCC_SetFlashLatencyFromMSIRange>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e34d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002508:	f000 fc36 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 800250c:	4602      	mov	r2, r0
 800250e:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	091b      	lsrs	r3, r3, #4
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	495a      	ldr	r1, [pc, #360]	; (8002684 <HAL_RCC_OscConfig+0x29c>)
 800251a:	5ccb      	ldrb	r3, [r1, r3]
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	4a58      	ldr	r2, [pc, #352]	; (8002688 <HAL_RCC_OscConfig+0x2a0>)
 8002526:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002528:	4b58      	ldr	r3, [pc, #352]	; (800268c <HAL_RCC_OscConfig+0x2a4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe fdcd 	bl	80010cc <HAL_InitTick>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d052      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	e331      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d032      	beq.n	80025ae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002548:	4b4d      	ldr	r3, [pc, #308]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a4c      	ldr	r2, [pc, #304]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002554:	f7fe fe0a 	bl	800116c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800255c:	f7fe fe06 	bl	800116c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e31a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800256e:	4b44      	ldr	r3, [pc, #272]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800257a:	4b41      	ldr	r3, [pc, #260]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a40      	ldr	r2, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	493b      	ldr	r1, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002594:	4313      	orrs	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
 80025a4:	021b      	lsls	r3, r3, #8
 80025a6:	4936      	ldr	r1, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
 80025ac:	e01a      	b.n	80025e4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025ae:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a33      	ldr	r2, [pc, #204]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025ba:	f7fe fdd7 	bl	800116c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025c2:	f7fe fdd3 	bl	800116c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e2e7      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d4:	4b2a      	ldr	r3, [pc, #168]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x1da>
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025e2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d074      	beq.n	80026da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x21a>
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	2b0c      	cmp	r3, #12
 80025fa:	d10e      	bne.n	800261a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d10b      	bne.n	800261a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d064      	beq.n	80026d8 <HAL_RCC_OscConfig+0x2f0>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d160      	bne.n	80026d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e2c4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002622:	d106      	bne.n	8002632 <HAL_RCC_OscConfig+0x24a>
 8002624:	4b16      	ldr	r3, [pc, #88]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800262a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	e01d      	b.n	800266e <HAL_RCC_OscConfig+0x286>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800263a:	d10c      	bne.n	8002656 <HAL_RCC_OscConfig+0x26e>
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002642:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800264e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	e00b      	b.n	800266e <HAL_RCC_OscConfig+0x286>
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a09      	ldr	r2, [pc, #36]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b07      	ldr	r3, [pc, #28]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a06      	ldr	r2, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x298>)
 8002668:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800266c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fd79 	bl	800116c <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800267c:	e011      	b.n	80026a2 <HAL_RCC_OscConfig+0x2ba>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	08004cc8 	.word	0x08004cc8
 8002688:	20000004 	.word	0x20000004
 800268c:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002690:	f7fe fd6c 	bl	800116c <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b64      	cmp	r3, #100	; 0x64
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e280      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a2:	4baf      	ldr	r3, [pc, #700]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x2a8>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fd5c 	bl	800116c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fd58 	bl	800116c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e26c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ca:	4ba5      	ldr	r3, [pc, #660]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2d0>
 80026d6:	e000      	b.n	80026da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d060      	beq.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d005      	beq.n	80026f8 <HAL_RCC_OscConfig+0x310>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b0c      	cmp	r3, #12
 80026f0:	d119      	bne.n	8002726 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d116      	bne.n	8002726 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f8:	4b99      	ldr	r3, [pc, #612]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x328>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e249      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b93      	ldr	r3, [pc, #588]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	061b      	lsls	r3, r3, #24
 800271e:	4990      	ldr	r1, [pc, #576]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002720:	4313      	orrs	r3, r2
 8002722:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	e040      	b.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d023      	beq.n	8002776 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800272e:	4b8c      	ldr	r3, [pc, #560]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a8b      	ldr	r2, [pc, #556]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fd17 	bl	800116c <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002742:	f7fe fd13 	bl	800116c <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e227      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002754:	4b82      	ldr	r3, [pc, #520]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	497c      	ldr	r1, [pc, #496]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
 8002774:	e018      	b.n	80027a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002776:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a79      	ldr	r2, [pc, #484]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 800277c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002782:	f7fe fcf3 	bl	800116c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800278a:	f7fe fcef 	bl	800116c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e203      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0308 	and.w	r3, r3, #8
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03c      	beq.n	800282e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01c      	beq.n	80027f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80027be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c2:	4a67      	ldr	r2, [pc, #412]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7fe fcce 	bl	800116c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe fcca 	bl	800116c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1de      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e6:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80027e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0ef      	beq.n	80027d4 <HAL_RCC_OscConfig+0x3ec>
 80027f4:	e01b      	b.n	800282e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f6:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80027f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fc:	4a58      	ldr	r2, [pc, #352]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80027fe:	f023 0301 	bic.w	r3, r3, #1
 8002802:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fcb1 	bl	800116c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280e:	f7fe fcad 	bl	800116c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e1c1      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002820:	4b4f      	ldr	r3, [pc, #316]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ef      	bne.n	800280e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 80a6 	beq.w	8002988 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800283c:	2300      	movs	r3, #0
 800283e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002840:	4b47      	ldr	r3, [pc, #284]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10d      	bne.n	8002868 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284c:	4b44      	ldr	r3, [pc, #272]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	4a43      	ldr	r2, [pc, #268]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002852:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002856:	6593      	str	r3, [r2, #88]	; 0x58
 8002858:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002864:	2301      	movs	r3, #1
 8002866:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002868:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <HAL_RCC_OscConfig+0x57c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d118      	bne.n	80028a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002874:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <HAL_RCC_OscConfig+0x57c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3a      	ldr	r2, [pc, #232]	; (8002964 <HAL_RCC_OscConfig+0x57c>)
 800287a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002880:	f7fe fc74 	bl	800116c <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002888:	f7fe fc70 	bl	800116c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e184      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <HAL_RCC_OscConfig+0x57c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d0f0      	beq.n	8002888 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0x4d8>
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	4a2a      	ldr	r2, [pc, #168]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028b6:	f043 0301 	orr.w	r3, r3, #1
 80028ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028be:	e024      	b.n	800290a <HAL_RCC_OscConfig+0x522>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d110      	bne.n	80028ea <HAL_RCC_OscConfig+0x502>
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028de:	4a20      	ldr	r2, [pc, #128]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028e8:	e00f      	b.n	800290a <HAL_RCC_OscConfig+0x522>
 80028ea:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	4a1b      	ldr	r2, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028f2:	f023 0301 	bic.w	r3, r3, #1
 80028f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028fa:	4b19      	ldr	r3, [pc, #100]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002902:	f023 0304 	bic.w	r3, r3, #4
 8002906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002912:	f7fe fc2b 	bl	800116c <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe fc27 	bl	800116c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e139      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002930:	4b0b      	ldr	r3, [pc, #44]	; (8002960 <HAL_RCC_OscConfig+0x578>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ed      	beq.n	800291a <HAL_RCC_OscConfig+0x532>
 800293e:	e01a      	b.n	8002976 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002940:	f7fe fc14 	bl	800116c <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002946:	e00f      	b.n	8002968 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002948:	f7fe fc10 	bl	800116c <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	f241 3288 	movw	r2, #5000	; 0x1388
 8002956:	4293      	cmp	r3, r2
 8002958:	d906      	bls.n	8002968 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e122      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002968:	4b90      	ldr	r3, [pc, #576]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e8      	bne.n	8002948 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002976:	7ffb      	ldrb	r3, [r7, #31]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d105      	bne.n	8002988 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297c:	4b8b      	ldr	r3, [pc, #556]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 800297e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002980:	4a8a      	ldr	r2, [pc, #552]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002986:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 8108 	beq.w	8002ba2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002996:	2b02      	cmp	r3, #2
 8002998:	f040 80d0 	bne.w	8002b3c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800299c:	4b83      	ldr	r3, [pc, #524]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d130      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	3b01      	subs	r3, #1
 80029bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029be:	429a      	cmp	r2, r3
 80029c0:	d127      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d11f      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029dc:	2a07      	cmp	r2, #7
 80029de:	bf14      	ite	ne
 80029e0:	2201      	movne	r2, #1
 80029e2:	2200      	moveq	r2, #0
 80029e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d113      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	085b      	lsrs	r3, r3, #1
 80029f6:	3b01      	subs	r3, #1
 80029f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d109      	bne.n	8002a12 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	085b      	lsrs	r3, r3, #1
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d06e      	beq.n	8002af0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d069      	beq.n	8002aec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a18:	4b64      	ldr	r3, [pc, #400]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a24:	4b61      	ldr	r3, [pc, #388]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0b7      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a34:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5c      	ldr	r2, [pc, #368]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a40:	f7fe fb94 	bl	800116c <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe fb90 	bl	800116c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0a4      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5a:	4b54      	ldr	r3, [pc, #336]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a66:	4b51      	ldr	r3, [pc, #324]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <HAL_RCC_OscConfig+0x7c8>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a76:	3a01      	subs	r2, #1
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	4311      	orrs	r1, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a80:	0212      	lsls	r2, r2, #8
 8002a82:	4311      	orrs	r1, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a88:	0852      	lsrs	r2, r2, #1
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	0552      	lsls	r2, r2, #21
 8002a8e:	4311      	orrs	r1, r2
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a94:	0852      	lsrs	r2, r2, #1
 8002a96:	3a01      	subs	r2, #1
 8002a98:	0652      	lsls	r2, r2, #25
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002aa0:	0912      	lsrs	r2, r2, #4
 8002aa2:	0452      	lsls	r2, r2, #17
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4941      	ldr	r1, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002aac:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a3e      	ldr	r2, [pc, #248]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab8:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	4a3b      	ldr	r2, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ac2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ac4:	f7fe fb52 	bl	800116c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fb4e 	bl	800116c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e062      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b33      	ldr	r3, [pc, #204]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aea:	e05a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e059      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af0:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d152      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b14:	f7fe fb2a 	bl	800116c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fb26 	bl	800116c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e03a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x734>
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d02d      	beq.n	8002b9e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a19      	ldr	r2, [pc, #100]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002b4e:	4b17      	ldr	r3, [pc, #92]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002b5a:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b60:	f023 0303 	bic.w	r3, r3, #3
 8002b64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b76:	f7fe faf9 	bl	800116c <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b7e:	f7fe faf5 	bl	800116c <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e009      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_OscConfig+0x7c4>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f0      	bne.n	8002b7e <HAL_RCC_OscConfig+0x796>
 8002b9c:	e001      	b.n	8002ba2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	f99d808c 	.word	0xf99d808c

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0c8      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d910      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 0207 	bic.w	r2, r3, #7
 8002bde:	4961      	ldr	r1, [pc, #388]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be6:	4b5f      	ldr	r3, [pc, #380]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e0b0      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d04c      	beq.n	8002c9e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0c:	4b56      	ldr	r3, [pc, #344]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d121      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e09e      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d115      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e092      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c3c:	4b4a      	ldr	r3, [pc, #296]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e086      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c4c:	4b46      	ldr	r3, [pc, #280]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e07e      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c5c:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f023 0203 	bic.w	r2, r3, #3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	493f      	ldr	r1, [pc, #252]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6e:	f7fe fa7d 	bl	800116c <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c74:	e00a      	b.n	8002c8c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c76:	f7fe fa79 	bl	800116c <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e066      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8c:	4b36      	ldr	r3, [pc, #216]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 020c 	and.w	r2, r3, #12
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d1eb      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d008      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002caa:	4b2f      	ldr	r3, [pc, #188]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	492c      	ldr	r1, [pc, #176]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d210      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0207 	bic.w	r2, r3, #7
 8002cd2:	4924      	ldr	r1, [pc, #144]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <HAL_RCC_ClockConfig+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e036      	b.n	8002d5a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4918      	ldr	r1, [pc, #96]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4910      	ldr	r1, [pc, #64]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d2a:	f000 f825 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0d      	ldr	r3, [pc, #52]	; (8002d68 <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490c      	ldr	r1, [pc, #48]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe f9bc 	bl	80010cc <HAL_InitTick>
 8002d54:	4603      	mov	r3, r0
 8002d56:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d58:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40022000 	.word	0x40022000
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	08004cc8 	.word	0x08004cc8
 8002d70:	20000004 	.word	0x20000004
 8002d74:	20000008 	.word	0x20000008

08002d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d86:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d90:	4b3b      	ldr	r3, [pc, #236]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0303 	and.w	r3, r3, #3
 8002d98:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0x34>
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d121      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d11e      	bne.n	8002dea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dac:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002db8:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	e005      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002dd4:	4a2b      	ldr	r2, [pc, #172]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002de8:	e00a      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002df2:	61bb      	str	r3, [r7, #24]
 8002df4:	e004      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dfc:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b0c      	cmp	r3, #12
 8002e04:	d134      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e06:	4b1e      	ldr	r3, [pc, #120]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d003      	beq.n	8002e1e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d003      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0xac>
 8002e1c:	e005      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e1e:	4b1a      	ldr	r3, [pc, #104]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e20:	617b      	str	r3, [r7, #20]
      break;
 8002e22:	e005      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e24:	4b19      	ldr	r3, [pc, #100]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002e26:	617b      	str	r3, [r7, #20]
      break;
 8002e28:	e002      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	617b      	str	r3, [r7, #20]
      break;
 8002e2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e30:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e3e:	4b10      	ldr	r3, [pc, #64]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	0a1b      	lsrs	r3, r3, #8
 8002e44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	fb02 f203 	mul.w	r2, r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	0e5b      	lsrs	r3, r3, #25
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	3301      	adds	r3, #1
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e70:	69bb      	ldr	r3, [r7, #24]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3724      	adds	r7, #36	; 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	08004ce0 	.word	0x08004ce0
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	007a1200 	.word	0x007a1200

08002e90 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000004 	.word	0x20000004

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08004cd8 	.word	0x08004cd8

08002ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ed8:	f7ff ffda 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002edc:	4602      	mov	r2, r0
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	0adb      	lsrs	r3, r3, #11
 8002ee4:	f003 0307 	and.w	r3, r3, #7
 8002ee8:	4904      	ldr	r1, [pc, #16]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x28>)
 8002eea:	5ccb      	ldrb	r3, [r1, r3]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08004cd8 	.word	0x08004cd8

08002f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f08:	2300      	movs	r3, #0
 8002f0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f18:	f7ff fa02 	bl	8002320 <HAL_PWREx_GetVoltageRange>
 8002f1c:	6178      	str	r0, [r7, #20]
 8002f1e:	e014      	b.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f20:	4b25      	ldr	r3, [pc, #148]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	4a24      	ldr	r2, [pc, #144]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f2c:	4b22      	ldr	r3, [pc, #136]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f38:	f7ff f9f2 	bl	8002320 <HAL_PWREx_GetVoltageRange>
 8002f3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b1e      	ldr	r3, [pc, #120]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f42:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f50:	d10b      	bne.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b80      	cmp	r3, #128	; 0x80
 8002f56:	d919      	bls.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f5c:	d902      	bls.n	8002f64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f5e:	2302      	movs	r3, #2
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	e013      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f64:	2301      	movs	r3, #1
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	e010      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b80      	cmp	r3, #128	; 0x80
 8002f6e:	d902      	bls.n	8002f76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f70:	2303      	movs	r3, #3
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	e00a      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b80      	cmp	r3, #128	; 0x80
 8002f7a:	d102      	bne.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	e004      	b.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b70      	cmp	r3, #112	; 0x70
 8002f86:	d101      	bne.n	8002f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f88:	2301      	movs	r3, #1
 8002f8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	4909      	ldr	r1, [pc, #36]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f9c:	4b07      	ldr	r3, [pc, #28]	; (8002fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d001      	beq.n	8002fae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40022000 	.word	0x40022000

08002fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fc8:	2300      	movs	r3, #0
 8002fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fcc:	2300      	movs	r3, #0
 8002fce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d041      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe4:	d02a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fea:	d824      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff0:	d008      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff6:	d81e      	bhi.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ffc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003000:	d010      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003002:	e018      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003004:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a85      	ldr	r2, [pc, #532]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003010:	e015      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2100      	movs	r1, #0
 8003018:	4618      	mov	r0, r3
 800301a:	f000 facb 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003022:	e00c      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3320      	adds	r3, #32
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fbb6 	bl	800379c <RCCEx_PLLSAI2_Config>
 8003030:	4603      	mov	r3, r0
 8003032:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003034:	e003      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	74fb      	strb	r3, [r7, #19]
      break;
 800303a:	e000      	b.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800303c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10b      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003044:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003052:	4973      	ldr	r1, [pc, #460]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800305a:	e001      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d041      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003070:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003074:	d02a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003076:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800307a:	d824      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800307c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003080:	d008      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003086:	d81e      	bhi.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d010      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003092:	e018      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003094:	4b62      	ldr	r3, [pc, #392]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a61      	ldr	r2, [pc, #388]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fa83 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030b2:	e00c      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3320      	adds	r3, #32
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fb6e 	bl	800379c <RCCEx_PLLSAI2_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030c4:	e003      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	74fb      	strb	r3, [r7, #19]
      break;
 80030ca:	e000      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030d4:	4b52      	ldr	r3, [pc, #328]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030da:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e2:	494f      	ldr	r1, [pc, #316]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030ea:	e001      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ec:	7cfb      	ldrb	r3, [r7, #19]
 80030ee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a0 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fe:	2300      	movs	r3, #0
 8003100:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003102:	4b47      	ldr	r3, [pc, #284]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	4a40      	ldr	r2, [pc, #256]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003122:	6593      	str	r3, [r2, #88]	; 0x58
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	60bb      	str	r3, [r7, #8]
 800312e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003130:	2301      	movs	r3, #1
 8003132:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003134:	4b3b      	ldr	r3, [pc, #236]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a3a      	ldr	r2, [pc, #232]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800313a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003140:	f7fe f814 	bl	800116c <HAL_GetTick>
 8003144:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003148:	f7fe f810 	bl	800116c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d902      	bls.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	74fb      	strb	r3, [r7, #19]
        break;
 800315a:	e005      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800315c:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ef      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d15c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800316e:	4b2c      	ldr	r3, [pc, #176]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003178:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01f      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d019      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003196:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	4a20      	ldr	r2, [pc, #128]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031a8:	4b1d      	ldr	r3, [pc, #116]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031b8:	4a19      	ldr	r2, [pc, #100]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d016      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fd ffcf 	bl	800116c <HAL_GetTick>
 80031ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d0:	e00b      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fd ffcb 	bl	800116c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d902      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	74fb      	strb	r3, [r7, #19]
            break;
 80031e8:	e006      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ec      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031f8:	7cfb      	ldrb	r3, [r7, #19]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10c      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031fe:	4b08      	ldr	r3, [pc, #32]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800320e:	4904      	ldr	r1, [pc, #16]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003216:	e009      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
 800321c:	e006      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000
 8003224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322c:	7c7b      	ldrb	r3, [r7, #17]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003232:	4b9e      	ldr	r3, [pc, #632]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	4a9d      	ldr	r2, [pc, #628]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800324a:	4b98      	ldr	r3, [pc, #608]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0203 	bic.w	r2, r3, #3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003258:	4994      	ldr	r1, [pc, #592]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800326c:	4b8f      	ldr	r3, [pc, #572]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 020c 	bic.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	498c      	ldr	r1, [pc, #560]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0304 	and.w	r3, r3, #4
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800328e:	4b87      	ldr	r3, [pc, #540]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	4983      	ldr	r1, [pc, #524]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032b0:	4b7e      	ldr	r3, [pc, #504]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	497b      	ldr	r1, [pc, #492]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0310 	and.w	r3, r3, #16
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032d2:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032e0:	4972      	ldr	r1, [pc, #456]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f4:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003302:	496a      	ldr	r1, [pc, #424]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003324:	4961      	ldr	r1, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003338:	4b5c      	ldr	r3, [pc, #368]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4959      	ldr	r1, [pc, #356]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335a:	4b54      	ldr	r3, [pc, #336]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003368:	4950      	ldr	r1, [pc, #320]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800337c:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800338a:	4948      	ldr	r1, [pc, #288]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ac:	493f      	ldr	r1, [pc, #252]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d028      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	4937      	ldr	r1, [pc, #220]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033de:	d106      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033e0:	4b32      	ldr	r3, [pc, #200]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	4a31      	ldr	r2, [pc, #196]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033ea:	60d3      	str	r3, [r2, #12]
 80033ec:	e011      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033f6:	d10c      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f8d8 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342c:	491f      	ldr	r1, [pc, #124]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800343c:	d106      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800343e:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003448:	60d3      	str	r3, [r2, #12]
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3304      	adds	r3, #4
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f8a9 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003466:	7cfb      	ldrb	r3, [r7, #19]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d001      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800346c:	7cfb      	ldrb	r3, [r7, #19]
 800346e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d02b      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800347c:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348a:	4908      	ldr	r1, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	4313      	orrs	r3, r2
 800348e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800349a:	d109      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800349c:	4b03      	ldr	r3, [pc, #12]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a02      	ldr	r2, [pc, #8]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034a6:	60d3      	str	r3, [r2, #12]
 80034a8:	e014      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2101      	movs	r1, #1
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f877 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02f      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034e0:	4b2b      	ldr	r3, [pc, #172]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ee:	4928      	ldr	r1, [pc, #160]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	2102      	movs	r1, #2
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f854 	bl	80035b4 <RCCEx_PLLSAI1_Config>
 800350c:	4603      	mov	r3, r0
 800350e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d014      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003516:	7cfb      	ldrb	r3, [r7, #19]
 8003518:	74bb      	strb	r3, [r7, #18]
 800351a:	e011      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003524:	d10c      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3320      	adds	r3, #32
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f935 	bl	800379c <RCCEx_PLLSAI2_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003536:	7cfb      	ldrb	r3, [r7, #19]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800353c:	7cfb      	ldrb	r3, [r7, #19]
 800353e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800355a:	490d      	ldr	r1, [pc, #52]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00b      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4904      	ldr	r1, [pc, #16]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003586:	7cbb      	ldrb	r3, [r7, #18]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40021000 	.word	0x40021000

08003594 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800359e:	f043 0304 	orr.w	r3, r3, #4
 80035a2:	6013      	str	r3, [r2, #0]
}
 80035a4:	bf00      	nop
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40021000 	.word	0x40021000

080035b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035c2:	4b75      	ldr	r3, [pc, #468]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0203 	and.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d10d      	bne.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
       ||
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035e6:	4b6c      	ldr	r3, [pc, #432]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 0307 	and.w	r3, r3, #7
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
       ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d047      	beq.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
 80035fe:	e044      	b.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d018      	beq.n	800363a <RCCEx_PLLSAI1_Config+0x86>
 8003608:	2b03      	cmp	r3, #3
 800360a:	d825      	bhi.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
 800360c:	2b01      	cmp	r3, #1
 800360e:	d002      	beq.n	8003616 <RCCEx_PLLSAI1_Config+0x62>
 8003610:	2b02      	cmp	r3, #2
 8003612:	d009      	beq.n	8003628 <RCCEx_PLLSAI1_Config+0x74>
 8003614:	e020      	b.n	8003658 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003616:	4b60      	ldr	r3, [pc, #384]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d11d      	bne.n	800365e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003626:	e01a      	b.n	800365e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003628:	4b5b      	ldr	r3, [pc, #364]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d116      	bne.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e013      	b.n	8003662 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800363a:	4b57      	ldr	r3, [pc, #348]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003646:	4b54      	ldr	r3, [pc, #336]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003656:	e006      	b.n	8003666 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	73fb      	strb	r3, [r7, #15]
      break;
 800365c:	e004      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800365e:	bf00      	nop
 8003660:	e002      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003666:	bf00      	nop
    }

    if(status == HAL_OK)
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10d      	bne.n	800368a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800366e:	4b4a      	ldr	r3, [pc, #296]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	430b      	orrs	r3, r1
 8003684:	4944      	ldr	r1, [pc, #272]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003686:	4313      	orrs	r3, r2
 8003688:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800368a:	7bfb      	ldrb	r3, [r7, #15]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d17d      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003690:	4b41      	ldr	r3, [pc, #260]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a40      	ldr	r2, [pc, #256]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003696:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800369a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800369c:	f7fd fd66 	bl	800116c <HAL_GetTick>
 80036a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036a2:	e009      	b.n	80036b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036a4:	f7fd fd62 	bl	800116c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d902      	bls.n	80036b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	73fb      	strb	r3, [r7, #15]
        break;
 80036b6:	e005      	b.n	80036c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ef      	bne.n	80036a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d160      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d111      	bne.n	80036f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036d0:	4b31      	ldr	r3, [pc, #196]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6892      	ldr	r2, [r2, #8]
 80036e0:	0211      	lsls	r1, r2, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	0912      	lsrs	r2, r2, #4
 80036e8:	0452      	lsls	r2, r2, #17
 80036ea:	430a      	orrs	r2, r1
 80036ec:	492a      	ldr	r1, [pc, #168]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	610b      	str	r3, [r1, #16]
 80036f2:	e027      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d112      	bne.n	8003720 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036fa:	4b27      	ldr	r3, [pc, #156]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003702:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6892      	ldr	r2, [r2, #8]
 800370a:	0211      	lsls	r1, r2, #8
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6912      	ldr	r2, [r2, #16]
 8003710:	0852      	lsrs	r2, r2, #1
 8003712:	3a01      	subs	r2, #1
 8003714:	0552      	lsls	r2, r2, #21
 8003716:	430a      	orrs	r2, r1
 8003718:	491f      	ldr	r1, [pc, #124]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	4313      	orrs	r3, r2
 800371c:	610b      	str	r3, [r1, #16]
 800371e:	e011      	b.n	8003744 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003728:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	6892      	ldr	r2, [r2, #8]
 8003730:	0211      	lsls	r1, r2, #8
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6952      	ldr	r2, [r2, #20]
 8003736:	0852      	lsrs	r2, r2, #1
 8003738:	3a01      	subs	r2, #1
 800373a:	0652      	lsls	r2, r2, #25
 800373c:	430a      	orrs	r2, r1
 800373e:	4916      	ldr	r1, [pc, #88]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003740:	4313      	orrs	r3, r2
 8003742:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003744:	4b14      	ldr	r3, [pc, #80]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a13      	ldr	r2, [pc, #76]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800374e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003750:	f7fd fd0c 	bl	800116c <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003756:	e009      	b.n	800376c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003758:	f7fd fd08 	bl	800116c <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d902      	bls.n	800376c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	73fb      	strb	r3, [r7, #15]
          break;
 800376a:	e005      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800376c:	4b0a      	ldr	r3, [pc, #40]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ef      	beq.n	8003758 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	699b      	ldr	r3, [r3, #24]
 8003786:	4904      	ldr	r1, [pc, #16]	; (8003798 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800378c:	7bfb      	ldrb	r3, [r7, #15]
}
 800378e:	4618      	mov	r0, r3
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000

0800379c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037aa:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d018      	beq.n	80037e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0203 	and.w	r2, r3, #3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d10d      	bne.n	80037e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
       ||
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d009      	beq.n	80037e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037ce:	4b61      	ldr	r3, [pc, #388]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	091b      	lsrs	r3, r3, #4
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	1c5a      	adds	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
       ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d047      	beq.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e044      	b.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d018      	beq.n	8003822 <RCCEx_PLLSAI2_Config+0x86>
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d825      	bhi.n	8003840 <RCCEx_PLLSAI2_Config+0xa4>
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d002      	beq.n	80037fe <RCCEx_PLLSAI2_Config+0x62>
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d009      	beq.n	8003810 <RCCEx_PLLSAI2_Config+0x74>
 80037fc:	e020      	b.n	8003840 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037fe:	4b55      	ldr	r3, [pc, #340]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d11d      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800380e:	e01a      	b.n	8003846 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003810:	4b50      	ldr	r3, [pc, #320]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	2b00      	cmp	r3, #0
 800381a:	d116      	bne.n	800384a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003820:	e013      	b.n	800384a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10f      	bne.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800382e:	4b49      	ldr	r3, [pc, #292]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800383e:	e006      	b.n	800384e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      break;
 8003844:	e004      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800384e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003850:	7bfb      	ldrb	r3, [r7, #15]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	3b01      	subs	r3, #1
 8003868:	011b      	lsls	r3, r3, #4
 800386a:	430b      	orrs	r3, r1
 800386c:	4939      	ldr	r1, [pc, #228]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d167      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003878:	4b36      	ldr	r3, [pc, #216]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a35      	ldr	r2, [pc, #212]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003884:	f7fd fc72 	bl	800116c <HAL_GetTick>
 8003888:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800388a:	e009      	b.n	80038a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800388c:	f7fd fc6e 	bl	800116c <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d902      	bls.n	80038a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	73fb      	strb	r3, [r7, #15]
        break;
 800389e:	e005      	b.n	80038ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1ef      	bne.n	800388c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d14a      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80038c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6892      	ldr	r2, [r2, #8]
 80038c8:	0211      	lsls	r1, r2, #8
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68d2      	ldr	r2, [r2, #12]
 80038ce:	0912      	lsrs	r2, r2, #4
 80038d0:	0452      	lsls	r2, r2, #17
 80038d2:	430a      	orrs	r2, r1
 80038d4:	491f      	ldr	r1, [pc, #124]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	614b      	str	r3, [r1, #20]
 80038da:	e011      	b.n	8003900 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6892      	ldr	r2, [r2, #8]
 80038ec:	0211      	lsls	r1, r2, #8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6912      	ldr	r2, [r2, #16]
 80038f2:	0852      	lsrs	r2, r2, #1
 80038f4:	3a01      	subs	r2, #1
 80038f6:	0652      	lsls	r2, r2, #25
 80038f8:	430a      	orrs	r2, r1
 80038fa:	4916      	ldr	r1, [pc, #88]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003900:	4b14      	ldr	r3, [pc, #80]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a13      	ldr	r2, [pc, #76]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fd fc2e 	bl	800116c <HAL_GetTick>
 8003910:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003912:	e009      	b.n	8003928 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003914:	f7fd fc2a 	bl	800116c <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d902      	bls.n	8003928 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	73fb      	strb	r3, [r7, #15]
          break;
 8003926:	e005      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003928:	4b0a      	ldr	r3, [pc, #40]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ef      	beq.n	8003914 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	4904      	ldr	r1, [pc, #16]	; (8003954 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003944:	4313      	orrs	r3, r2
 8003946:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000

08003958 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e040      	b.n	80039ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fd fa6c 	bl	8000e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2224      	movs	r2, #36	; 0x24
 8003984:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f8c0 	bl	8003b1c <UART_SetConfig>
 800399c:	4603      	mov	r3, r0
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e022      	b.n	80039ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fb3e 	bl	8004030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fbc5 	bl	8004174 <UART_CheckIdleState>
 80039ea:	4603      	mov	r3, r0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	; 0x28
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	4613      	mov	r3, r2
 8003a02:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	f040 8082 	bne.w	8003b12 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_UART_Transmit+0x26>
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e07a      	b.n	8003b14 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d101      	bne.n	8003a2c <HAL_UART_Transmit+0x38>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	e073      	b.n	8003b14 <HAL_UART_Transmit+0x120>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2221      	movs	r2, #33	; 0x21
 8003a40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a42:	f7fd fb93 	bl	800116c <HAL_GetTick>
 8003a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	88fa      	ldrh	r2, [r7, #6]
 8003a4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d108      	bne.n	8003a74 <HAL_UART_Transmit+0x80>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d104      	bne.n	8003a74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e003      	b.n	8003a7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003a84:	e02d      	b.n	8003ae2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2180      	movs	r1, #128	; 0x80
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 fbb8 	bl	8004206 <UART_WaitOnFlagUntilTimeout>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e039      	b.n	8003b14 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	881a      	ldrh	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab2:	b292      	uxth	r2, r2
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	3302      	adds	r3, #2
 8003aba:	61bb      	str	r3, [r7, #24]
 8003abc:	e008      	b.n	8003ad0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3301      	adds	r3, #1
 8003ace:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1cb      	bne.n	8003a86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2200      	movs	r2, #0
 8003af6:	2140      	movs	r1, #64	; 0x40
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fb84 	bl	8004206 <UART_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e005      	b.n	8003b14 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e000      	b.n	8003b14 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b12:	2302      	movs	r3, #2
  }
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3720      	adds	r7, #32
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4bad      	ldr	r3, [pc, #692]	; (8003dfc <UART_SetConfig+0x2e0>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	69f9      	ldr	r1, [r7, #28]
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4aa2      	ldr	r2, [pc, #648]	; (8003e00 <UART_SetConfig+0x2e4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	69fa      	ldr	r2, [r7, #28]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a99      	ldr	r2, [pc, #612]	; (8003e04 <UART_SetConfig+0x2e8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d121      	bne.n	8003be6 <UART_SetConfig+0xca>
 8003ba2:	4b99      	ldr	r3, [pc, #612]	; (8003e08 <UART_SetConfig+0x2ec>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d817      	bhi.n	8003be0 <UART_SetConfig+0xc4>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <UART_SetConfig+0x9c>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bd5 	.word	0x08003bd5
 8003bc0:	08003bcf 	.word	0x08003bcf
 8003bc4:	08003bdb 	.word	0x08003bdb
 8003bc8:	2301      	movs	r3, #1
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	e0e7      	b.n	8003d9e <UART_SetConfig+0x282>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	76fb      	strb	r3, [r7, #27]
 8003bd2:	e0e4      	b.n	8003d9e <UART_SetConfig+0x282>
 8003bd4:	2304      	movs	r3, #4
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	e0e1      	b.n	8003d9e <UART_SetConfig+0x282>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	76fb      	strb	r3, [r7, #27]
 8003bde:	e0de      	b.n	8003d9e <UART_SetConfig+0x282>
 8003be0:	2310      	movs	r3, #16
 8003be2:	76fb      	strb	r3, [r7, #27]
 8003be4:	e0db      	b.n	8003d9e <UART_SetConfig+0x282>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a88      	ldr	r2, [pc, #544]	; (8003e0c <UART_SetConfig+0x2f0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d132      	bne.n	8003c56 <UART_SetConfig+0x13a>
 8003bf0:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <UART_SetConfig+0x2ec>)
 8003bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b0c      	cmp	r3, #12
 8003bfc:	d828      	bhi.n	8003c50 <UART_SetConfig+0x134>
 8003bfe:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <UART_SetConfig+0xe8>)
 8003c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c04:	08003c39 	.word	0x08003c39
 8003c08:	08003c51 	.word	0x08003c51
 8003c0c:	08003c51 	.word	0x08003c51
 8003c10:	08003c51 	.word	0x08003c51
 8003c14:	08003c45 	.word	0x08003c45
 8003c18:	08003c51 	.word	0x08003c51
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c51 	.word	0x08003c51
 8003c24:	08003c3f 	.word	0x08003c3f
 8003c28:	08003c51 	.word	0x08003c51
 8003c2c:	08003c51 	.word	0x08003c51
 8003c30:	08003c51 	.word	0x08003c51
 8003c34:	08003c4b 	.word	0x08003c4b
 8003c38:	2300      	movs	r3, #0
 8003c3a:	76fb      	strb	r3, [r7, #27]
 8003c3c:	e0af      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	76fb      	strb	r3, [r7, #27]
 8003c42:	e0ac      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c44:	2304      	movs	r3, #4
 8003c46:	76fb      	strb	r3, [r7, #27]
 8003c48:	e0a9      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	76fb      	strb	r3, [r7, #27]
 8003c4e:	e0a6      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c50:	2310      	movs	r3, #16
 8003c52:	76fb      	strb	r3, [r7, #27]
 8003c54:	e0a3      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6d      	ldr	r2, [pc, #436]	; (8003e10 <UART_SetConfig+0x2f4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d120      	bne.n	8003ca2 <UART_SetConfig+0x186>
 8003c60:	4b69      	ldr	r3, [pc, #420]	; (8003e08 <UART_SetConfig+0x2ec>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c6a:	2b30      	cmp	r3, #48	; 0x30
 8003c6c:	d013      	beq.n	8003c96 <UART_SetConfig+0x17a>
 8003c6e:	2b30      	cmp	r3, #48	; 0x30
 8003c70:	d814      	bhi.n	8003c9c <UART_SetConfig+0x180>
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d009      	beq.n	8003c8a <UART_SetConfig+0x16e>
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d810      	bhi.n	8003c9c <UART_SetConfig+0x180>
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d002      	beq.n	8003c84 <UART_SetConfig+0x168>
 8003c7e:	2b10      	cmp	r3, #16
 8003c80:	d006      	beq.n	8003c90 <UART_SetConfig+0x174>
 8003c82:	e00b      	b.n	8003c9c <UART_SetConfig+0x180>
 8003c84:	2300      	movs	r3, #0
 8003c86:	76fb      	strb	r3, [r7, #27]
 8003c88:	e089      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	76fb      	strb	r3, [r7, #27]
 8003c8e:	e086      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c90:	2304      	movs	r3, #4
 8003c92:	76fb      	strb	r3, [r7, #27]
 8003c94:	e083      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c96:	2308      	movs	r3, #8
 8003c98:	76fb      	strb	r3, [r7, #27]
 8003c9a:	e080      	b.n	8003d9e <UART_SetConfig+0x282>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	76fb      	strb	r3, [r7, #27]
 8003ca0:	e07d      	b.n	8003d9e <UART_SetConfig+0x282>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a5b      	ldr	r2, [pc, #364]	; (8003e14 <UART_SetConfig+0x2f8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d120      	bne.n	8003cee <UART_SetConfig+0x1d2>
 8003cac:	4b56      	ldr	r3, [pc, #344]	; (8003e08 <UART_SetConfig+0x2ec>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb8:	d013      	beq.n	8003ce2 <UART_SetConfig+0x1c6>
 8003cba:	2bc0      	cmp	r3, #192	; 0xc0
 8003cbc:	d814      	bhi.n	8003ce8 <UART_SetConfig+0x1cc>
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d009      	beq.n	8003cd6 <UART_SetConfig+0x1ba>
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d810      	bhi.n	8003ce8 <UART_SetConfig+0x1cc>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <UART_SetConfig+0x1b4>
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d006      	beq.n	8003cdc <UART_SetConfig+0x1c0>
 8003cce:	e00b      	b.n	8003ce8 <UART_SetConfig+0x1cc>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	76fb      	strb	r3, [r7, #27]
 8003cd4:	e063      	b.n	8003d9e <UART_SetConfig+0x282>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	76fb      	strb	r3, [r7, #27]
 8003cda:	e060      	b.n	8003d9e <UART_SetConfig+0x282>
 8003cdc:	2304      	movs	r3, #4
 8003cde:	76fb      	strb	r3, [r7, #27]
 8003ce0:	e05d      	b.n	8003d9e <UART_SetConfig+0x282>
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	76fb      	strb	r3, [r7, #27]
 8003ce6:	e05a      	b.n	8003d9e <UART_SetConfig+0x282>
 8003ce8:	2310      	movs	r3, #16
 8003cea:	76fb      	strb	r3, [r7, #27]
 8003cec:	e057      	b.n	8003d9e <UART_SetConfig+0x282>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a49      	ldr	r2, [pc, #292]	; (8003e18 <UART_SetConfig+0x2fc>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d125      	bne.n	8003d44 <UART_SetConfig+0x228>
 8003cf8:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <UART_SetConfig+0x2ec>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d06:	d017      	beq.n	8003d38 <UART_SetConfig+0x21c>
 8003d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0c:	d817      	bhi.n	8003d3e <UART_SetConfig+0x222>
 8003d0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d12:	d00b      	beq.n	8003d2c <UART_SetConfig+0x210>
 8003d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d18:	d811      	bhi.n	8003d3e <UART_SetConfig+0x222>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <UART_SetConfig+0x20a>
 8003d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d22:	d006      	beq.n	8003d32 <UART_SetConfig+0x216>
 8003d24:	e00b      	b.n	8003d3e <UART_SetConfig+0x222>
 8003d26:	2300      	movs	r3, #0
 8003d28:	76fb      	strb	r3, [r7, #27]
 8003d2a:	e038      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	76fb      	strb	r3, [r7, #27]
 8003d30:	e035      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d32:	2304      	movs	r3, #4
 8003d34:	76fb      	strb	r3, [r7, #27]
 8003d36:	e032      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d38:	2308      	movs	r3, #8
 8003d3a:	76fb      	strb	r3, [r7, #27]
 8003d3c:	e02f      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d3e:	2310      	movs	r3, #16
 8003d40:	76fb      	strb	r3, [r7, #27]
 8003d42:	e02c      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2d      	ldr	r2, [pc, #180]	; (8003e00 <UART_SetConfig+0x2e4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d125      	bne.n	8003d9a <UART_SetConfig+0x27e>
 8003d4e:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <UART_SetConfig+0x2ec>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d5c:	d017      	beq.n	8003d8e <UART_SetConfig+0x272>
 8003d5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d62:	d817      	bhi.n	8003d94 <UART_SetConfig+0x278>
 8003d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d68:	d00b      	beq.n	8003d82 <UART_SetConfig+0x266>
 8003d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d6e:	d811      	bhi.n	8003d94 <UART_SetConfig+0x278>
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <UART_SetConfig+0x260>
 8003d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d78:	d006      	beq.n	8003d88 <UART_SetConfig+0x26c>
 8003d7a:	e00b      	b.n	8003d94 <UART_SetConfig+0x278>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	76fb      	strb	r3, [r7, #27]
 8003d80:	e00d      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d82:	2302      	movs	r3, #2
 8003d84:	76fb      	strb	r3, [r7, #27]
 8003d86:	e00a      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d88:	2304      	movs	r3, #4
 8003d8a:	76fb      	strb	r3, [r7, #27]
 8003d8c:	e007      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d8e:	2308      	movs	r3, #8
 8003d90:	76fb      	strb	r3, [r7, #27]
 8003d92:	e004      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d94:	2310      	movs	r3, #16
 8003d96:	76fb      	strb	r3, [r7, #27]
 8003d98:	e001      	b.n	8003d9e <UART_SetConfig+0x282>
 8003d9a:	2310      	movs	r3, #16
 8003d9c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <UART_SetConfig+0x2e4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	f040 8087 	bne.w	8003eb8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003daa:	7efb      	ldrb	r3, [r7, #27]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d837      	bhi.n	8003e20 <UART_SetConfig+0x304>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x29c>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003e21 	.word	0x08003e21
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003e21 	.word	0x08003e21
 8003dc8:	08003deb 	.word	0x08003deb
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003e21 	.word	0x08003e21
 8003dd4:	08003e21 	.word	0x08003e21
 8003dd8:	08003df3 	.word	0x08003df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7ff f864 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8003de0:	6178      	str	r0, [r7, #20]
        break;
 8003de2:	e022      	b.n	8003e2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <UART_SetConfig+0x300>)
 8003de6:	617b      	str	r3, [r7, #20]
        break;
 8003de8:	e01f      	b.n	8003e2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7fe ffc5 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8003dee:	6178      	str	r0, [r7, #20]
        break;
 8003df0:	e01b      	b.n	8003e2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df6:	617b      	str	r3, [r7, #20]
        break;
 8003df8:	e017      	b.n	8003e2a <UART_SetConfig+0x30e>
 8003dfa:	bf00      	nop
 8003dfc:	efff69f3 	.word	0xefff69f3
 8003e00:	40008000 	.word	0x40008000
 8003e04:	40013800 	.word	0x40013800
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40004400 	.word	0x40004400
 8003e10:	40004800 	.word	0x40004800
 8003e14:	40004c00 	.word	0x40004c00
 8003e18:	40005000 	.word	0x40005000
 8003e1c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	76bb      	strb	r3, [r7, #26]
        break;
 8003e28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80f1 	beq.w	8004014 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d305      	bcc.n	8003e4e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d902      	bls.n	8003e54 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	76bb      	strb	r3, [r7, #26]
 8003e52:	e0df      	b.n	8004014 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f04f 0100 	mov.w	r1, #0
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	020b      	lsls	r3, r1, #8
 8003e66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e6a:	0202      	lsls	r2, r0, #8
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	6849      	ldr	r1, [r1, #4]
 8003e70:	0849      	lsrs	r1, r1, #1
 8003e72:	4608      	mov	r0, r1
 8003e74:	f04f 0100 	mov.w	r1, #0
 8003e78:	1814      	adds	r4, r2, r0
 8003e7a:	eb43 0501 	adc.w	r5, r3, r1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	461a      	mov	r2, r3
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	4620      	mov	r0, r4
 8003e8a:	4629      	mov	r1, r5
 8003e8c:	f7fc f9f8 	bl	8000280 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4613      	mov	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e9e:	d308      	bcc.n	8003eb2 <UART_SetConfig+0x396>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea6:	d204      	bcs.n	8003eb2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	60da      	str	r2, [r3, #12]
 8003eb0:	e0b0      	b.n	8004014 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	76bb      	strb	r3, [r7, #26]
 8003eb6:	e0ad      	b.n	8004014 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec0:	d15c      	bne.n	8003f7c <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8003ec2:	7efb      	ldrb	r3, [r7, #27]
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d828      	bhi.n	8003f1a <UART_SetConfig+0x3fe>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <UART_SetConfig+0x3b4>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003ef5 	.word	0x08003ef5
 8003ed4:	08003efd 	.word	0x08003efd
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	08003f1b 	.word	0x08003f1b
 8003ee0:	08003f0b 	.word	0x08003f0b
 8003ee4:	08003f1b 	.word	0x08003f1b
 8003ee8:	08003f1b 	.word	0x08003f1b
 8003eec:	08003f1b 	.word	0x08003f1b
 8003ef0:	08003f13 	.word	0x08003f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef4:	f7fe ffd8 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8003ef8:	6178      	str	r0, [r7, #20]
        break;
 8003efa:	e013      	b.n	8003f24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003efc:	f7fe ffea 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 8003f00:	6178      	str	r0, [r7, #20]
        break;
 8003f02:	e00f      	b.n	8003f24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f04:	4b49      	ldr	r3, [pc, #292]	; (800402c <UART_SetConfig+0x510>)
 8003f06:	617b      	str	r3, [r7, #20]
        break;
 8003f08:	e00c      	b.n	8003f24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0a:	f7fe ff35 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8003f0e:	6178      	str	r0, [r7, #20]
        break;
 8003f10:	e008      	b.n	8003f24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f16:	617b      	str	r3, [r7, #20]
        break;
 8003f18:	e004      	b.n	8003f24 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	76bb      	strb	r3, [r7, #26]
        break;
 8003f22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d074      	beq.n	8004014 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	005a      	lsls	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	085b      	lsrs	r3, r3, #1
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	2b0f      	cmp	r3, #15
 8003f46:	d916      	bls.n	8003f76 <UART_SetConfig+0x45a>
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f4e:	d212      	bcs.n	8003f76 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f023 030f 	bic.w	r3, r3, #15
 8003f58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	89fb      	ldrh	r3, [r7, #14]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	89fa      	ldrh	r2, [r7, #14]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	e04e      	b.n	8004014 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	76bb      	strb	r3, [r7, #26]
 8003f7a:	e04b      	b.n	8004014 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f7c:	7efb      	ldrb	r3, [r7, #27]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d827      	bhi.n	8003fd2 <UART_SetConfig+0x4b6>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0x46c>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	08003fbd 	.word	0x08003fbd
 8003f94:	08003fd3 	.word	0x08003fd3
 8003f98:	08003fc3 	.word	0x08003fc3
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003fd3 	.word	0x08003fd3
 8003fa4:	08003fd3 	.word	0x08003fd3
 8003fa8:	08003fcb 	.word	0x08003fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7fe ff7c 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8003fb0:	6178      	str	r0, [r7, #20]
        break;
 8003fb2:	e013      	b.n	8003fdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb4:	f7fe ff8e 	bl	8002ed4 <HAL_RCC_GetPCLK2Freq>
 8003fb8:	6178      	str	r0, [r7, #20]
        break;
 8003fba:	e00f      	b.n	8003fdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <UART_SetConfig+0x510>)
 8003fbe:	617b      	str	r3, [r7, #20]
        break;
 8003fc0:	e00c      	b.n	8003fdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc2:	f7fe fed9 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8003fc6:	6178      	str	r0, [r7, #20]
        break;
 8003fc8:	e008      	b.n	8003fdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fce:	617b      	str	r3, [r7, #20]
        break;
 8003fd0:	e004      	b.n	8003fdc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	76bb      	strb	r3, [r7, #26]
        break;
 8003fda:	bf00      	nop
    }

    if (pclk != 0U)
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d018      	beq.n	8004014 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	085a      	lsrs	r2, r3, #1
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	441a      	add	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	d908      	bls.n	8004010 <UART_SetConfig+0x4f4>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004004:	d204      	bcs.n	8004010 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	60da      	str	r2, [r3, #12]
 800400e:	e001      	b.n	8004014 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004020:	7ebb      	ldrb	r3, [r7, #26]
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bdb0      	pop	{r4, r5, r7, pc}
 800402a:	bf00      	nop
 800402c:	00f42400 	.word	0x00f42400

08004030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f003 0304 	and.w	r3, r3, #4
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	f003 0320 	and.w	r3, r3, #32
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01a      	beq.n	8004146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800412e:	d10a      	bne.n	8004146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af02      	add	r7, sp, #8
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004184:	f7fc fff2 	bl	800116c <HAL_GetTick>
 8004188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b08      	cmp	r3, #8
 8004196:	d10e      	bne.n	80041b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f82d 	bl	8004206 <UART_WaitOnFlagUntilTimeout>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e023      	b.n	80041fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d10e      	bne.n	80041e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f817 	bl	8004206 <UART_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e00d      	b.n	80041fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}

08004206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004206:	b580      	push	{r7, lr}
 8004208:	b084      	sub	sp, #16
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	603b      	str	r3, [r7, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004216:	e05e      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d05a      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004220:	f7fc ffa4 	bl	800116c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <UART_WaitOnFlagUntilTimeout+0x30>
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11b      	bne.n	800426e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004244:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e043      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d02c      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d124      	bne.n	80042d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004294:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e00f      	b.n	80042f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69da      	ldr	r2, [r3, #28]
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4013      	ands	r3, r2
 80042e0:	68ba      	ldr	r2, [r7, #8]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	461a      	mov	r2, r3
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d091      	beq.n	8004218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <__errno>:
 8004300:	4b01      	ldr	r3, [pc, #4]	; (8004308 <__errno+0x8>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	20000010 	.word	0x20000010

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	4d0d      	ldr	r5, [pc, #52]	; (8004344 <__libc_init_array+0x38>)
 8004310:	4c0d      	ldr	r4, [pc, #52]	; (8004348 <__libc_init_array+0x3c>)
 8004312:	1b64      	subs	r4, r4, r5
 8004314:	10a4      	asrs	r4, r4, #2
 8004316:	2600      	movs	r6, #0
 8004318:	42a6      	cmp	r6, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	4d0b      	ldr	r5, [pc, #44]	; (800434c <__libc_init_array+0x40>)
 800431e:	4c0c      	ldr	r4, [pc, #48]	; (8004350 <__libc_init_array+0x44>)
 8004320:	f000 fc4e 	bl	8004bc0 <_init>
 8004324:	1b64      	subs	r4, r4, r5
 8004326:	10a4      	asrs	r4, r4, #2
 8004328:	2600      	movs	r6, #0
 800432a:	42a6      	cmp	r6, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	f855 3b04 	ldr.w	r3, [r5], #4
 8004334:	4798      	blx	r3
 8004336:	3601      	adds	r6, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	f855 3b04 	ldr.w	r3, [r5], #4
 800433e:	4798      	blx	r3
 8004340:	3601      	adds	r6, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	08004d4c 	.word	0x08004d4c
 8004348:	08004d4c 	.word	0x08004d4c
 800434c:	08004d4c 	.word	0x08004d4c
 8004350:	08004d50 	.word	0x08004d50

08004354 <memset>:
 8004354:	4402      	add	r2, r0
 8004356:	4603      	mov	r3, r0
 8004358:	4293      	cmp	r3, r2
 800435a:	d100      	bne.n	800435e <memset+0xa>
 800435c:	4770      	bx	lr
 800435e:	f803 1b01 	strb.w	r1, [r3], #1
 8004362:	e7f9      	b.n	8004358 <memset+0x4>

08004364 <siprintf>:
 8004364:	b40e      	push	{r1, r2, r3}
 8004366:	b500      	push	{lr}
 8004368:	b09c      	sub	sp, #112	; 0x70
 800436a:	ab1d      	add	r3, sp, #116	; 0x74
 800436c:	9002      	str	r0, [sp, #8]
 800436e:	9006      	str	r0, [sp, #24]
 8004370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004374:	4809      	ldr	r0, [pc, #36]	; (800439c <siprintf+0x38>)
 8004376:	9107      	str	r1, [sp, #28]
 8004378:	9104      	str	r1, [sp, #16]
 800437a:	4909      	ldr	r1, [pc, #36]	; (80043a0 <siprintf+0x3c>)
 800437c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004380:	9105      	str	r1, [sp, #20]
 8004382:	6800      	ldr	r0, [r0, #0]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	a902      	add	r1, sp, #8
 8004388:	f000 f868 	bl	800445c <_svfiprintf_r>
 800438c:	9b02      	ldr	r3, [sp, #8]
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	b01c      	add	sp, #112	; 0x70
 8004394:	f85d eb04 	ldr.w	lr, [sp], #4
 8004398:	b003      	add	sp, #12
 800439a:	4770      	bx	lr
 800439c:	20000010 	.word	0x20000010
 80043a0:	ffff0208 	.word	0xffff0208

080043a4 <__ssputs_r>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	688e      	ldr	r6, [r1, #8]
 80043aa:	429e      	cmp	r6, r3
 80043ac:	4682      	mov	sl, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	4690      	mov	r8, r2
 80043b2:	461f      	mov	r7, r3
 80043b4:	d838      	bhi.n	8004428 <__ssputs_r+0x84>
 80043b6:	898a      	ldrh	r2, [r1, #12]
 80043b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80043bc:	d032      	beq.n	8004424 <__ssputs_r+0x80>
 80043be:	6825      	ldr	r5, [r4, #0]
 80043c0:	6909      	ldr	r1, [r1, #16]
 80043c2:	eba5 0901 	sub.w	r9, r5, r1
 80043c6:	6965      	ldr	r5, [r4, #20]
 80043c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80043cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80043d0:	3301      	adds	r3, #1
 80043d2:	444b      	add	r3, r9
 80043d4:	106d      	asrs	r5, r5, #1
 80043d6:	429d      	cmp	r5, r3
 80043d8:	bf38      	it	cc
 80043da:	461d      	movcc	r5, r3
 80043dc:	0553      	lsls	r3, r2, #21
 80043de:	d531      	bpl.n	8004444 <__ssputs_r+0xa0>
 80043e0:	4629      	mov	r1, r5
 80043e2:	f000 fb47 	bl	8004a74 <_malloc_r>
 80043e6:	4606      	mov	r6, r0
 80043e8:	b950      	cbnz	r0, 8004400 <__ssputs_r+0x5c>
 80043ea:	230c      	movs	r3, #12
 80043ec:	f8ca 3000 	str.w	r3, [sl]
 80043f0:	89a3      	ldrh	r3, [r4, #12]
 80043f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	f04f 30ff 	mov.w	r0, #4294967295
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	6921      	ldr	r1, [r4, #16]
 8004402:	464a      	mov	r2, r9
 8004404:	f000 fabe 	bl	8004984 <memcpy>
 8004408:	89a3      	ldrh	r3, [r4, #12]
 800440a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800440e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004412:	81a3      	strh	r3, [r4, #12]
 8004414:	6126      	str	r6, [r4, #16]
 8004416:	6165      	str	r5, [r4, #20]
 8004418:	444e      	add	r6, r9
 800441a:	eba5 0509 	sub.w	r5, r5, r9
 800441e:	6026      	str	r6, [r4, #0]
 8004420:	60a5      	str	r5, [r4, #8]
 8004422:	463e      	mov	r6, r7
 8004424:	42be      	cmp	r6, r7
 8004426:	d900      	bls.n	800442a <__ssputs_r+0x86>
 8004428:	463e      	mov	r6, r7
 800442a:	4632      	mov	r2, r6
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	4641      	mov	r1, r8
 8004430:	f000 fab6 	bl	80049a0 <memmove>
 8004434:	68a3      	ldr	r3, [r4, #8]
 8004436:	6822      	ldr	r2, [r4, #0]
 8004438:	1b9b      	subs	r3, r3, r6
 800443a:	4432      	add	r2, r6
 800443c:	60a3      	str	r3, [r4, #8]
 800443e:	6022      	str	r2, [r4, #0]
 8004440:	2000      	movs	r0, #0
 8004442:	e7db      	b.n	80043fc <__ssputs_r+0x58>
 8004444:	462a      	mov	r2, r5
 8004446:	f000 fb6f 	bl	8004b28 <_realloc_r>
 800444a:	4606      	mov	r6, r0
 800444c:	2800      	cmp	r0, #0
 800444e:	d1e1      	bne.n	8004414 <__ssputs_r+0x70>
 8004450:	6921      	ldr	r1, [r4, #16]
 8004452:	4650      	mov	r0, sl
 8004454:	f000 fabe 	bl	80049d4 <_free_r>
 8004458:	e7c7      	b.n	80043ea <__ssputs_r+0x46>
	...

0800445c <_svfiprintf_r>:
 800445c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004460:	4698      	mov	r8, r3
 8004462:	898b      	ldrh	r3, [r1, #12]
 8004464:	061b      	lsls	r3, r3, #24
 8004466:	b09d      	sub	sp, #116	; 0x74
 8004468:	4607      	mov	r7, r0
 800446a:	460d      	mov	r5, r1
 800446c:	4614      	mov	r4, r2
 800446e:	d50e      	bpl.n	800448e <_svfiprintf_r+0x32>
 8004470:	690b      	ldr	r3, [r1, #16]
 8004472:	b963      	cbnz	r3, 800448e <_svfiprintf_r+0x32>
 8004474:	2140      	movs	r1, #64	; 0x40
 8004476:	f000 fafd 	bl	8004a74 <_malloc_r>
 800447a:	6028      	str	r0, [r5, #0]
 800447c:	6128      	str	r0, [r5, #16]
 800447e:	b920      	cbnz	r0, 800448a <_svfiprintf_r+0x2e>
 8004480:	230c      	movs	r3, #12
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	f04f 30ff 	mov.w	r0, #4294967295
 8004488:	e0d1      	b.n	800462e <_svfiprintf_r+0x1d2>
 800448a:	2340      	movs	r3, #64	; 0x40
 800448c:	616b      	str	r3, [r5, #20]
 800448e:	2300      	movs	r3, #0
 8004490:	9309      	str	r3, [sp, #36]	; 0x24
 8004492:	2320      	movs	r3, #32
 8004494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004498:	f8cd 800c 	str.w	r8, [sp, #12]
 800449c:	2330      	movs	r3, #48	; 0x30
 800449e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004648 <_svfiprintf_r+0x1ec>
 80044a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044a6:	f04f 0901 	mov.w	r9, #1
 80044aa:	4623      	mov	r3, r4
 80044ac:	469a      	mov	sl, r3
 80044ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b2:	b10a      	cbz	r2, 80044b8 <_svfiprintf_r+0x5c>
 80044b4:	2a25      	cmp	r2, #37	; 0x25
 80044b6:	d1f9      	bne.n	80044ac <_svfiprintf_r+0x50>
 80044b8:	ebba 0b04 	subs.w	fp, sl, r4
 80044bc:	d00b      	beq.n	80044d6 <_svfiprintf_r+0x7a>
 80044be:	465b      	mov	r3, fp
 80044c0:	4622      	mov	r2, r4
 80044c2:	4629      	mov	r1, r5
 80044c4:	4638      	mov	r0, r7
 80044c6:	f7ff ff6d 	bl	80043a4 <__ssputs_r>
 80044ca:	3001      	adds	r0, #1
 80044cc:	f000 80aa 	beq.w	8004624 <_svfiprintf_r+0x1c8>
 80044d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044d2:	445a      	add	r2, fp
 80044d4:	9209      	str	r2, [sp, #36]	; 0x24
 80044d6:	f89a 3000 	ldrb.w	r3, [sl]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 80a2 	beq.w	8004624 <_svfiprintf_r+0x1c8>
 80044e0:	2300      	movs	r3, #0
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295
 80044e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044ea:	f10a 0a01 	add.w	sl, sl, #1
 80044ee:	9304      	str	r3, [sp, #16]
 80044f0:	9307      	str	r3, [sp, #28]
 80044f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044f6:	931a      	str	r3, [sp, #104]	; 0x68
 80044f8:	4654      	mov	r4, sl
 80044fa:	2205      	movs	r2, #5
 80044fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004500:	4851      	ldr	r0, [pc, #324]	; (8004648 <_svfiprintf_r+0x1ec>)
 8004502:	f7fb fe6d 	bl	80001e0 <memchr>
 8004506:	9a04      	ldr	r2, [sp, #16]
 8004508:	b9d8      	cbnz	r0, 8004542 <_svfiprintf_r+0xe6>
 800450a:	06d0      	lsls	r0, r2, #27
 800450c:	bf44      	itt	mi
 800450e:	2320      	movmi	r3, #32
 8004510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004514:	0711      	lsls	r1, r2, #28
 8004516:	bf44      	itt	mi
 8004518:	232b      	movmi	r3, #43	; 0x2b
 800451a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800451e:	f89a 3000 	ldrb.w	r3, [sl]
 8004522:	2b2a      	cmp	r3, #42	; 0x2a
 8004524:	d015      	beq.n	8004552 <_svfiprintf_r+0xf6>
 8004526:	9a07      	ldr	r2, [sp, #28]
 8004528:	4654      	mov	r4, sl
 800452a:	2000      	movs	r0, #0
 800452c:	f04f 0c0a 	mov.w	ip, #10
 8004530:	4621      	mov	r1, r4
 8004532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004536:	3b30      	subs	r3, #48	; 0x30
 8004538:	2b09      	cmp	r3, #9
 800453a:	d94e      	bls.n	80045da <_svfiprintf_r+0x17e>
 800453c:	b1b0      	cbz	r0, 800456c <_svfiprintf_r+0x110>
 800453e:	9207      	str	r2, [sp, #28]
 8004540:	e014      	b.n	800456c <_svfiprintf_r+0x110>
 8004542:	eba0 0308 	sub.w	r3, r0, r8
 8004546:	fa09 f303 	lsl.w	r3, r9, r3
 800454a:	4313      	orrs	r3, r2
 800454c:	9304      	str	r3, [sp, #16]
 800454e:	46a2      	mov	sl, r4
 8004550:	e7d2      	b.n	80044f8 <_svfiprintf_r+0x9c>
 8004552:	9b03      	ldr	r3, [sp, #12]
 8004554:	1d19      	adds	r1, r3, #4
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	9103      	str	r1, [sp, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfbb      	ittet	lt
 800455e:	425b      	neglt	r3, r3
 8004560:	f042 0202 	orrlt.w	r2, r2, #2
 8004564:	9307      	strge	r3, [sp, #28]
 8004566:	9307      	strlt	r3, [sp, #28]
 8004568:	bfb8      	it	lt
 800456a:	9204      	strlt	r2, [sp, #16]
 800456c:	7823      	ldrb	r3, [r4, #0]
 800456e:	2b2e      	cmp	r3, #46	; 0x2e
 8004570:	d10c      	bne.n	800458c <_svfiprintf_r+0x130>
 8004572:	7863      	ldrb	r3, [r4, #1]
 8004574:	2b2a      	cmp	r3, #42	; 0x2a
 8004576:	d135      	bne.n	80045e4 <_svfiprintf_r+0x188>
 8004578:	9b03      	ldr	r3, [sp, #12]
 800457a:	1d1a      	adds	r2, r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	9203      	str	r2, [sp, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	bfb8      	it	lt
 8004584:	f04f 33ff 	movlt.w	r3, #4294967295
 8004588:	3402      	adds	r4, #2
 800458a:	9305      	str	r3, [sp, #20]
 800458c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004658 <_svfiprintf_r+0x1fc>
 8004590:	7821      	ldrb	r1, [r4, #0]
 8004592:	2203      	movs	r2, #3
 8004594:	4650      	mov	r0, sl
 8004596:	f7fb fe23 	bl	80001e0 <memchr>
 800459a:	b140      	cbz	r0, 80045ae <_svfiprintf_r+0x152>
 800459c:	2340      	movs	r3, #64	; 0x40
 800459e:	eba0 000a 	sub.w	r0, r0, sl
 80045a2:	fa03 f000 	lsl.w	r0, r3, r0
 80045a6:	9b04      	ldr	r3, [sp, #16]
 80045a8:	4303      	orrs	r3, r0
 80045aa:	3401      	adds	r4, #1
 80045ac:	9304      	str	r3, [sp, #16]
 80045ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045b2:	4826      	ldr	r0, [pc, #152]	; (800464c <_svfiprintf_r+0x1f0>)
 80045b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045b8:	2206      	movs	r2, #6
 80045ba:	f7fb fe11 	bl	80001e0 <memchr>
 80045be:	2800      	cmp	r0, #0
 80045c0:	d038      	beq.n	8004634 <_svfiprintf_r+0x1d8>
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <_svfiprintf_r+0x1f4>)
 80045c4:	bb1b      	cbnz	r3, 800460e <_svfiprintf_r+0x1b2>
 80045c6:	9b03      	ldr	r3, [sp, #12]
 80045c8:	3307      	adds	r3, #7
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	3308      	adds	r3, #8
 80045d0:	9303      	str	r3, [sp, #12]
 80045d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d4:	4433      	add	r3, r6
 80045d6:	9309      	str	r3, [sp, #36]	; 0x24
 80045d8:	e767      	b.n	80044aa <_svfiprintf_r+0x4e>
 80045da:	fb0c 3202 	mla	r2, ip, r2, r3
 80045de:	460c      	mov	r4, r1
 80045e0:	2001      	movs	r0, #1
 80045e2:	e7a5      	b.n	8004530 <_svfiprintf_r+0xd4>
 80045e4:	2300      	movs	r3, #0
 80045e6:	3401      	adds	r4, #1
 80045e8:	9305      	str	r3, [sp, #20]
 80045ea:	4619      	mov	r1, r3
 80045ec:	f04f 0c0a 	mov.w	ip, #10
 80045f0:	4620      	mov	r0, r4
 80045f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f6:	3a30      	subs	r2, #48	; 0x30
 80045f8:	2a09      	cmp	r2, #9
 80045fa:	d903      	bls.n	8004604 <_svfiprintf_r+0x1a8>
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0c5      	beq.n	800458c <_svfiprintf_r+0x130>
 8004600:	9105      	str	r1, [sp, #20]
 8004602:	e7c3      	b.n	800458c <_svfiprintf_r+0x130>
 8004604:	fb0c 2101 	mla	r1, ip, r1, r2
 8004608:	4604      	mov	r4, r0
 800460a:	2301      	movs	r3, #1
 800460c:	e7f0      	b.n	80045f0 <_svfiprintf_r+0x194>
 800460e:	ab03      	add	r3, sp, #12
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	462a      	mov	r2, r5
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <_svfiprintf_r+0x1f8>)
 8004616:	a904      	add	r1, sp, #16
 8004618:	4638      	mov	r0, r7
 800461a:	f3af 8000 	nop.w
 800461e:	1c42      	adds	r2, r0, #1
 8004620:	4606      	mov	r6, r0
 8004622:	d1d6      	bne.n	80045d2 <_svfiprintf_r+0x176>
 8004624:	89ab      	ldrh	r3, [r5, #12]
 8004626:	065b      	lsls	r3, r3, #25
 8004628:	f53f af2c 	bmi.w	8004484 <_svfiprintf_r+0x28>
 800462c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800462e:	b01d      	add	sp, #116	; 0x74
 8004630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004634:	ab03      	add	r3, sp, #12
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	462a      	mov	r2, r5
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <_svfiprintf_r+0x1f8>)
 800463c:	a904      	add	r1, sp, #16
 800463e:	4638      	mov	r0, r7
 8004640:	f000 f87a 	bl	8004738 <_printf_i>
 8004644:	e7eb      	b.n	800461e <_svfiprintf_r+0x1c2>
 8004646:	bf00      	nop
 8004648:	08004d10 	.word	0x08004d10
 800464c:	08004d1a 	.word	0x08004d1a
 8004650:	00000000 	.word	0x00000000
 8004654:	080043a5 	.word	0x080043a5
 8004658:	08004d16 	.word	0x08004d16

0800465c <_printf_common>:
 800465c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004660:	4616      	mov	r6, r2
 8004662:	4699      	mov	r9, r3
 8004664:	688a      	ldr	r2, [r1, #8]
 8004666:	690b      	ldr	r3, [r1, #16]
 8004668:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800466c:	4293      	cmp	r3, r2
 800466e:	bfb8      	it	lt
 8004670:	4613      	movlt	r3, r2
 8004672:	6033      	str	r3, [r6, #0]
 8004674:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004678:	4607      	mov	r7, r0
 800467a:	460c      	mov	r4, r1
 800467c:	b10a      	cbz	r2, 8004682 <_printf_common+0x26>
 800467e:	3301      	adds	r3, #1
 8004680:	6033      	str	r3, [r6, #0]
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	0699      	lsls	r1, r3, #26
 8004686:	bf42      	ittt	mi
 8004688:	6833      	ldrmi	r3, [r6, #0]
 800468a:	3302      	addmi	r3, #2
 800468c:	6033      	strmi	r3, [r6, #0]
 800468e:	6825      	ldr	r5, [r4, #0]
 8004690:	f015 0506 	ands.w	r5, r5, #6
 8004694:	d106      	bne.n	80046a4 <_printf_common+0x48>
 8004696:	f104 0a19 	add.w	sl, r4, #25
 800469a:	68e3      	ldr	r3, [r4, #12]
 800469c:	6832      	ldr	r2, [r6, #0]
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	42ab      	cmp	r3, r5
 80046a2:	dc26      	bgt.n	80046f2 <_printf_common+0x96>
 80046a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046a8:	1e13      	subs	r3, r2, #0
 80046aa:	6822      	ldr	r2, [r4, #0]
 80046ac:	bf18      	it	ne
 80046ae:	2301      	movne	r3, #1
 80046b0:	0692      	lsls	r2, r2, #26
 80046b2:	d42b      	bmi.n	800470c <_printf_common+0xb0>
 80046b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046b8:	4649      	mov	r1, r9
 80046ba:	4638      	mov	r0, r7
 80046bc:	47c0      	blx	r8
 80046be:	3001      	adds	r0, #1
 80046c0:	d01e      	beq.n	8004700 <_printf_common+0xa4>
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	68e5      	ldr	r5, [r4, #12]
 80046c6:	6832      	ldr	r2, [r6, #0]
 80046c8:	f003 0306 	and.w	r3, r3, #6
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	bf08      	it	eq
 80046d0:	1aad      	subeq	r5, r5, r2
 80046d2:	68a3      	ldr	r3, [r4, #8]
 80046d4:	6922      	ldr	r2, [r4, #16]
 80046d6:	bf0c      	ite	eq
 80046d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046dc:	2500      	movne	r5, #0
 80046de:	4293      	cmp	r3, r2
 80046e0:	bfc4      	itt	gt
 80046e2:	1a9b      	subgt	r3, r3, r2
 80046e4:	18ed      	addgt	r5, r5, r3
 80046e6:	2600      	movs	r6, #0
 80046e8:	341a      	adds	r4, #26
 80046ea:	42b5      	cmp	r5, r6
 80046ec:	d11a      	bne.n	8004724 <_printf_common+0xc8>
 80046ee:	2000      	movs	r0, #0
 80046f0:	e008      	b.n	8004704 <_printf_common+0xa8>
 80046f2:	2301      	movs	r3, #1
 80046f4:	4652      	mov	r2, sl
 80046f6:	4649      	mov	r1, r9
 80046f8:	4638      	mov	r0, r7
 80046fa:	47c0      	blx	r8
 80046fc:	3001      	adds	r0, #1
 80046fe:	d103      	bne.n	8004708 <_printf_common+0xac>
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004708:	3501      	adds	r5, #1
 800470a:	e7c6      	b.n	800469a <_printf_common+0x3e>
 800470c:	18e1      	adds	r1, r4, r3
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	2030      	movs	r0, #48	; 0x30
 8004712:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004716:	4422      	add	r2, r4
 8004718:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800471c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004720:	3302      	adds	r3, #2
 8004722:	e7c7      	b.n	80046b4 <_printf_common+0x58>
 8004724:	2301      	movs	r3, #1
 8004726:	4622      	mov	r2, r4
 8004728:	4649      	mov	r1, r9
 800472a:	4638      	mov	r0, r7
 800472c:	47c0      	blx	r8
 800472e:	3001      	adds	r0, #1
 8004730:	d0e6      	beq.n	8004700 <_printf_common+0xa4>
 8004732:	3601      	adds	r6, #1
 8004734:	e7d9      	b.n	80046ea <_printf_common+0x8e>
	...

08004738 <_printf_i>:
 8004738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800473c:	460c      	mov	r4, r1
 800473e:	4691      	mov	r9, r2
 8004740:	7e27      	ldrb	r7, [r4, #24]
 8004742:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004744:	2f78      	cmp	r7, #120	; 0x78
 8004746:	4680      	mov	r8, r0
 8004748:	469a      	mov	sl, r3
 800474a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800474e:	d807      	bhi.n	8004760 <_printf_i+0x28>
 8004750:	2f62      	cmp	r7, #98	; 0x62
 8004752:	d80a      	bhi.n	800476a <_printf_i+0x32>
 8004754:	2f00      	cmp	r7, #0
 8004756:	f000 80d8 	beq.w	800490a <_printf_i+0x1d2>
 800475a:	2f58      	cmp	r7, #88	; 0x58
 800475c:	f000 80a3 	beq.w	80048a6 <_printf_i+0x16e>
 8004760:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004764:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004768:	e03a      	b.n	80047e0 <_printf_i+0xa8>
 800476a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800476e:	2b15      	cmp	r3, #21
 8004770:	d8f6      	bhi.n	8004760 <_printf_i+0x28>
 8004772:	a001      	add	r0, pc, #4	; (adr r0, 8004778 <_printf_i+0x40>)
 8004774:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004778:	080047d1 	.word	0x080047d1
 800477c:	080047e5 	.word	0x080047e5
 8004780:	08004761 	.word	0x08004761
 8004784:	08004761 	.word	0x08004761
 8004788:	08004761 	.word	0x08004761
 800478c:	08004761 	.word	0x08004761
 8004790:	080047e5 	.word	0x080047e5
 8004794:	08004761 	.word	0x08004761
 8004798:	08004761 	.word	0x08004761
 800479c:	08004761 	.word	0x08004761
 80047a0:	08004761 	.word	0x08004761
 80047a4:	080048f1 	.word	0x080048f1
 80047a8:	08004815 	.word	0x08004815
 80047ac:	080048d3 	.word	0x080048d3
 80047b0:	08004761 	.word	0x08004761
 80047b4:	08004761 	.word	0x08004761
 80047b8:	08004913 	.word	0x08004913
 80047bc:	08004761 	.word	0x08004761
 80047c0:	08004815 	.word	0x08004815
 80047c4:	08004761 	.word	0x08004761
 80047c8:	08004761 	.word	0x08004761
 80047cc:	080048db 	.word	0x080048db
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	1d1a      	adds	r2, r3, #4
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	600a      	str	r2, [r1, #0]
 80047d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0a3      	b.n	800492c <_printf_i+0x1f4>
 80047e4:	6825      	ldr	r5, [r4, #0]
 80047e6:	6808      	ldr	r0, [r1, #0]
 80047e8:	062e      	lsls	r6, r5, #24
 80047ea:	f100 0304 	add.w	r3, r0, #4
 80047ee:	d50a      	bpl.n	8004806 <_printf_i+0xce>
 80047f0:	6805      	ldr	r5, [r0, #0]
 80047f2:	600b      	str	r3, [r1, #0]
 80047f4:	2d00      	cmp	r5, #0
 80047f6:	da03      	bge.n	8004800 <_printf_i+0xc8>
 80047f8:	232d      	movs	r3, #45	; 0x2d
 80047fa:	426d      	negs	r5, r5
 80047fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004800:	485e      	ldr	r0, [pc, #376]	; (800497c <_printf_i+0x244>)
 8004802:	230a      	movs	r3, #10
 8004804:	e019      	b.n	800483a <_printf_i+0x102>
 8004806:	f015 0f40 	tst.w	r5, #64	; 0x40
 800480a:	6805      	ldr	r5, [r0, #0]
 800480c:	600b      	str	r3, [r1, #0]
 800480e:	bf18      	it	ne
 8004810:	b22d      	sxthne	r5, r5
 8004812:	e7ef      	b.n	80047f4 <_printf_i+0xbc>
 8004814:	680b      	ldr	r3, [r1, #0]
 8004816:	6825      	ldr	r5, [r4, #0]
 8004818:	1d18      	adds	r0, r3, #4
 800481a:	6008      	str	r0, [r1, #0]
 800481c:	0628      	lsls	r0, r5, #24
 800481e:	d501      	bpl.n	8004824 <_printf_i+0xec>
 8004820:	681d      	ldr	r5, [r3, #0]
 8004822:	e002      	b.n	800482a <_printf_i+0xf2>
 8004824:	0669      	lsls	r1, r5, #25
 8004826:	d5fb      	bpl.n	8004820 <_printf_i+0xe8>
 8004828:	881d      	ldrh	r5, [r3, #0]
 800482a:	4854      	ldr	r0, [pc, #336]	; (800497c <_printf_i+0x244>)
 800482c:	2f6f      	cmp	r7, #111	; 0x6f
 800482e:	bf0c      	ite	eq
 8004830:	2308      	moveq	r3, #8
 8004832:	230a      	movne	r3, #10
 8004834:	2100      	movs	r1, #0
 8004836:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800483a:	6866      	ldr	r6, [r4, #4]
 800483c:	60a6      	str	r6, [r4, #8]
 800483e:	2e00      	cmp	r6, #0
 8004840:	bfa2      	ittt	ge
 8004842:	6821      	ldrge	r1, [r4, #0]
 8004844:	f021 0104 	bicge.w	r1, r1, #4
 8004848:	6021      	strge	r1, [r4, #0]
 800484a:	b90d      	cbnz	r5, 8004850 <_printf_i+0x118>
 800484c:	2e00      	cmp	r6, #0
 800484e:	d04d      	beq.n	80048ec <_printf_i+0x1b4>
 8004850:	4616      	mov	r6, r2
 8004852:	fbb5 f1f3 	udiv	r1, r5, r3
 8004856:	fb03 5711 	mls	r7, r3, r1, r5
 800485a:	5dc7      	ldrb	r7, [r0, r7]
 800485c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004860:	462f      	mov	r7, r5
 8004862:	42bb      	cmp	r3, r7
 8004864:	460d      	mov	r5, r1
 8004866:	d9f4      	bls.n	8004852 <_printf_i+0x11a>
 8004868:	2b08      	cmp	r3, #8
 800486a:	d10b      	bne.n	8004884 <_printf_i+0x14c>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	07df      	lsls	r7, r3, #31
 8004870:	d508      	bpl.n	8004884 <_printf_i+0x14c>
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	6861      	ldr	r1, [r4, #4]
 8004876:	4299      	cmp	r1, r3
 8004878:	bfde      	ittt	le
 800487a:	2330      	movle	r3, #48	; 0x30
 800487c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004880:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004884:	1b92      	subs	r2, r2, r6
 8004886:	6122      	str	r2, [r4, #16]
 8004888:	f8cd a000 	str.w	sl, [sp]
 800488c:	464b      	mov	r3, r9
 800488e:	aa03      	add	r2, sp, #12
 8004890:	4621      	mov	r1, r4
 8004892:	4640      	mov	r0, r8
 8004894:	f7ff fee2 	bl	800465c <_printf_common>
 8004898:	3001      	adds	r0, #1
 800489a:	d14c      	bne.n	8004936 <_printf_i+0x1fe>
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	b004      	add	sp, #16
 80048a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a6:	4835      	ldr	r0, [pc, #212]	; (800497c <_printf_i+0x244>)
 80048a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	680e      	ldr	r6, [r1, #0]
 80048b0:	061f      	lsls	r7, r3, #24
 80048b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80048b6:	600e      	str	r6, [r1, #0]
 80048b8:	d514      	bpl.n	80048e4 <_printf_i+0x1ac>
 80048ba:	07d9      	lsls	r1, r3, #31
 80048bc:	bf44      	itt	mi
 80048be:	f043 0320 	orrmi.w	r3, r3, #32
 80048c2:	6023      	strmi	r3, [r4, #0]
 80048c4:	b91d      	cbnz	r5, 80048ce <_printf_i+0x196>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	f023 0320 	bic.w	r3, r3, #32
 80048cc:	6023      	str	r3, [r4, #0]
 80048ce:	2310      	movs	r3, #16
 80048d0:	e7b0      	b.n	8004834 <_printf_i+0xfc>
 80048d2:	6823      	ldr	r3, [r4, #0]
 80048d4:	f043 0320 	orr.w	r3, r3, #32
 80048d8:	6023      	str	r3, [r4, #0]
 80048da:	2378      	movs	r3, #120	; 0x78
 80048dc:	4828      	ldr	r0, [pc, #160]	; (8004980 <_printf_i+0x248>)
 80048de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e2:	e7e3      	b.n	80048ac <_printf_i+0x174>
 80048e4:	065e      	lsls	r6, r3, #25
 80048e6:	bf48      	it	mi
 80048e8:	b2ad      	uxthmi	r5, r5
 80048ea:	e7e6      	b.n	80048ba <_printf_i+0x182>
 80048ec:	4616      	mov	r6, r2
 80048ee:	e7bb      	b.n	8004868 <_printf_i+0x130>
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	6826      	ldr	r6, [r4, #0]
 80048f4:	6960      	ldr	r0, [r4, #20]
 80048f6:	1d1d      	adds	r5, r3, #4
 80048f8:	600d      	str	r5, [r1, #0]
 80048fa:	0635      	lsls	r5, r6, #24
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	d501      	bpl.n	8004904 <_printf_i+0x1cc>
 8004900:	6018      	str	r0, [r3, #0]
 8004902:	e002      	b.n	800490a <_printf_i+0x1d2>
 8004904:	0671      	lsls	r1, r6, #25
 8004906:	d5fb      	bpl.n	8004900 <_printf_i+0x1c8>
 8004908:	8018      	strh	r0, [r3, #0]
 800490a:	2300      	movs	r3, #0
 800490c:	6123      	str	r3, [r4, #16]
 800490e:	4616      	mov	r6, r2
 8004910:	e7ba      	b.n	8004888 <_printf_i+0x150>
 8004912:	680b      	ldr	r3, [r1, #0]
 8004914:	1d1a      	adds	r2, r3, #4
 8004916:	600a      	str	r2, [r1, #0]
 8004918:	681e      	ldr	r6, [r3, #0]
 800491a:	6862      	ldr	r2, [r4, #4]
 800491c:	2100      	movs	r1, #0
 800491e:	4630      	mov	r0, r6
 8004920:	f7fb fc5e 	bl	80001e0 <memchr>
 8004924:	b108      	cbz	r0, 800492a <_printf_i+0x1f2>
 8004926:	1b80      	subs	r0, r0, r6
 8004928:	6060      	str	r0, [r4, #4]
 800492a:	6863      	ldr	r3, [r4, #4]
 800492c:	6123      	str	r3, [r4, #16]
 800492e:	2300      	movs	r3, #0
 8004930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004934:	e7a8      	b.n	8004888 <_printf_i+0x150>
 8004936:	6923      	ldr	r3, [r4, #16]
 8004938:	4632      	mov	r2, r6
 800493a:	4649      	mov	r1, r9
 800493c:	4640      	mov	r0, r8
 800493e:	47d0      	blx	sl
 8004940:	3001      	adds	r0, #1
 8004942:	d0ab      	beq.n	800489c <_printf_i+0x164>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	079b      	lsls	r3, r3, #30
 8004948:	d413      	bmi.n	8004972 <_printf_i+0x23a>
 800494a:	68e0      	ldr	r0, [r4, #12]
 800494c:	9b03      	ldr	r3, [sp, #12]
 800494e:	4298      	cmp	r0, r3
 8004950:	bfb8      	it	lt
 8004952:	4618      	movlt	r0, r3
 8004954:	e7a4      	b.n	80048a0 <_printf_i+0x168>
 8004956:	2301      	movs	r3, #1
 8004958:	4632      	mov	r2, r6
 800495a:	4649      	mov	r1, r9
 800495c:	4640      	mov	r0, r8
 800495e:	47d0      	blx	sl
 8004960:	3001      	adds	r0, #1
 8004962:	d09b      	beq.n	800489c <_printf_i+0x164>
 8004964:	3501      	adds	r5, #1
 8004966:	68e3      	ldr	r3, [r4, #12]
 8004968:	9903      	ldr	r1, [sp, #12]
 800496a:	1a5b      	subs	r3, r3, r1
 800496c:	42ab      	cmp	r3, r5
 800496e:	dcf2      	bgt.n	8004956 <_printf_i+0x21e>
 8004970:	e7eb      	b.n	800494a <_printf_i+0x212>
 8004972:	2500      	movs	r5, #0
 8004974:	f104 0619 	add.w	r6, r4, #25
 8004978:	e7f5      	b.n	8004966 <_printf_i+0x22e>
 800497a:	bf00      	nop
 800497c:	08004d21 	.word	0x08004d21
 8004980:	08004d32 	.word	0x08004d32

08004984 <memcpy>:
 8004984:	440a      	add	r2, r1
 8004986:	4291      	cmp	r1, r2
 8004988:	f100 33ff 	add.w	r3, r0, #4294967295
 800498c:	d100      	bne.n	8004990 <memcpy+0xc>
 800498e:	4770      	bx	lr
 8004990:	b510      	push	{r4, lr}
 8004992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800499a:	4291      	cmp	r1, r2
 800499c:	d1f9      	bne.n	8004992 <memcpy+0xe>
 800499e:	bd10      	pop	{r4, pc}

080049a0 <memmove>:
 80049a0:	4288      	cmp	r0, r1
 80049a2:	b510      	push	{r4, lr}
 80049a4:	eb01 0402 	add.w	r4, r1, r2
 80049a8:	d902      	bls.n	80049b0 <memmove+0x10>
 80049aa:	4284      	cmp	r4, r0
 80049ac:	4623      	mov	r3, r4
 80049ae:	d807      	bhi.n	80049c0 <memmove+0x20>
 80049b0:	1e43      	subs	r3, r0, #1
 80049b2:	42a1      	cmp	r1, r4
 80049b4:	d008      	beq.n	80049c8 <memmove+0x28>
 80049b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049be:	e7f8      	b.n	80049b2 <memmove+0x12>
 80049c0:	4402      	add	r2, r0
 80049c2:	4601      	mov	r1, r0
 80049c4:	428a      	cmp	r2, r1
 80049c6:	d100      	bne.n	80049ca <memmove+0x2a>
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049d2:	e7f7      	b.n	80049c4 <memmove+0x24>

080049d4 <_free_r>:
 80049d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049d6:	2900      	cmp	r1, #0
 80049d8:	d048      	beq.n	8004a6c <_free_r+0x98>
 80049da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049de:	9001      	str	r0, [sp, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f1a1 0404 	sub.w	r4, r1, #4
 80049e6:	bfb8      	it	lt
 80049e8:	18e4      	addlt	r4, r4, r3
 80049ea:	f000 f8d3 	bl	8004b94 <__malloc_lock>
 80049ee:	4a20      	ldr	r2, [pc, #128]	; (8004a70 <_free_r+0x9c>)
 80049f0:	9801      	ldr	r0, [sp, #4]
 80049f2:	6813      	ldr	r3, [r2, #0]
 80049f4:	4615      	mov	r5, r2
 80049f6:	b933      	cbnz	r3, 8004a06 <_free_r+0x32>
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	6014      	str	r4, [r2, #0]
 80049fc:	b003      	add	sp, #12
 80049fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a02:	f000 b8cd 	b.w	8004ba0 <__malloc_unlock>
 8004a06:	42a3      	cmp	r3, r4
 8004a08:	d90b      	bls.n	8004a22 <_free_r+0x4e>
 8004a0a:	6821      	ldr	r1, [r4, #0]
 8004a0c:	1862      	adds	r2, r4, r1
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	bf04      	itt	eq
 8004a12:	681a      	ldreq	r2, [r3, #0]
 8004a14:	685b      	ldreq	r3, [r3, #4]
 8004a16:	6063      	str	r3, [r4, #4]
 8004a18:	bf04      	itt	eq
 8004a1a:	1852      	addeq	r2, r2, r1
 8004a1c:	6022      	streq	r2, [r4, #0]
 8004a1e:	602c      	str	r4, [r5, #0]
 8004a20:	e7ec      	b.n	80049fc <_free_r+0x28>
 8004a22:	461a      	mov	r2, r3
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	b10b      	cbz	r3, 8004a2c <_free_r+0x58>
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	d9fa      	bls.n	8004a22 <_free_r+0x4e>
 8004a2c:	6811      	ldr	r1, [r2, #0]
 8004a2e:	1855      	adds	r5, r2, r1
 8004a30:	42a5      	cmp	r5, r4
 8004a32:	d10b      	bne.n	8004a4c <_free_r+0x78>
 8004a34:	6824      	ldr	r4, [r4, #0]
 8004a36:	4421      	add	r1, r4
 8004a38:	1854      	adds	r4, r2, r1
 8004a3a:	42a3      	cmp	r3, r4
 8004a3c:	6011      	str	r1, [r2, #0]
 8004a3e:	d1dd      	bne.n	80049fc <_free_r+0x28>
 8004a40:	681c      	ldr	r4, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6053      	str	r3, [r2, #4]
 8004a46:	4421      	add	r1, r4
 8004a48:	6011      	str	r1, [r2, #0]
 8004a4a:	e7d7      	b.n	80049fc <_free_r+0x28>
 8004a4c:	d902      	bls.n	8004a54 <_free_r+0x80>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	6003      	str	r3, [r0, #0]
 8004a52:	e7d3      	b.n	80049fc <_free_r+0x28>
 8004a54:	6825      	ldr	r5, [r4, #0]
 8004a56:	1961      	adds	r1, r4, r5
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	bf04      	itt	eq
 8004a5c:	6819      	ldreq	r1, [r3, #0]
 8004a5e:	685b      	ldreq	r3, [r3, #4]
 8004a60:	6063      	str	r3, [r4, #4]
 8004a62:	bf04      	itt	eq
 8004a64:	1949      	addeq	r1, r1, r5
 8004a66:	6021      	streq	r1, [r4, #0]
 8004a68:	6054      	str	r4, [r2, #4]
 8004a6a:	e7c7      	b.n	80049fc <_free_r+0x28>
 8004a6c:	b003      	add	sp, #12
 8004a6e:	bd30      	pop	{r4, r5, pc}
 8004a70:	20000094 	.word	0x20000094

08004a74 <_malloc_r>:
 8004a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a76:	1ccd      	adds	r5, r1, #3
 8004a78:	f025 0503 	bic.w	r5, r5, #3
 8004a7c:	3508      	adds	r5, #8
 8004a7e:	2d0c      	cmp	r5, #12
 8004a80:	bf38      	it	cc
 8004a82:	250c      	movcc	r5, #12
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	4606      	mov	r6, r0
 8004a88:	db01      	blt.n	8004a8e <_malloc_r+0x1a>
 8004a8a:	42a9      	cmp	r1, r5
 8004a8c:	d903      	bls.n	8004a96 <_malloc_r+0x22>
 8004a8e:	230c      	movs	r3, #12
 8004a90:	6033      	str	r3, [r6, #0]
 8004a92:	2000      	movs	r0, #0
 8004a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a96:	f000 f87d 	bl	8004b94 <__malloc_lock>
 8004a9a:	4921      	ldr	r1, [pc, #132]	; (8004b20 <_malloc_r+0xac>)
 8004a9c:	680a      	ldr	r2, [r1, #0]
 8004a9e:	4614      	mov	r4, r2
 8004aa0:	b99c      	cbnz	r4, 8004aca <_malloc_r+0x56>
 8004aa2:	4f20      	ldr	r7, [pc, #128]	; (8004b24 <_malloc_r+0xb0>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b923      	cbnz	r3, 8004ab2 <_malloc_r+0x3e>
 8004aa8:	4621      	mov	r1, r4
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f000 f862 	bl	8004b74 <_sbrk_r>
 8004ab0:	6038      	str	r0, [r7, #0]
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4630      	mov	r0, r6
 8004ab6:	f000 f85d 	bl	8004b74 <_sbrk_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d123      	bne.n	8004b06 <_malloc_r+0x92>
 8004abe:	230c      	movs	r3, #12
 8004ac0:	6033      	str	r3, [r6, #0]
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f000 f86c 	bl	8004ba0 <__malloc_unlock>
 8004ac8:	e7e3      	b.n	8004a92 <_malloc_r+0x1e>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	1b5b      	subs	r3, r3, r5
 8004ace:	d417      	bmi.n	8004b00 <_malloc_r+0x8c>
 8004ad0:	2b0b      	cmp	r3, #11
 8004ad2:	d903      	bls.n	8004adc <_malloc_r+0x68>
 8004ad4:	6023      	str	r3, [r4, #0]
 8004ad6:	441c      	add	r4, r3
 8004ad8:	6025      	str	r5, [r4, #0]
 8004ada:	e004      	b.n	8004ae6 <_malloc_r+0x72>
 8004adc:	6863      	ldr	r3, [r4, #4]
 8004ade:	42a2      	cmp	r2, r4
 8004ae0:	bf0c      	ite	eq
 8004ae2:	600b      	streq	r3, [r1, #0]
 8004ae4:	6053      	strne	r3, [r2, #4]
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f000 f85a 	bl	8004ba0 <__malloc_unlock>
 8004aec:	f104 000b 	add.w	r0, r4, #11
 8004af0:	1d23      	adds	r3, r4, #4
 8004af2:	f020 0007 	bic.w	r0, r0, #7
 8004af6:	1ac2      	subs	r2, r0, r3
 8004af8:	d0cc      	beq.n	8004a94 <_malloc_r+0x20>
 8004afa:	1a1b      	subs	r3, r3, r0
 8004afc:	50a3      	str	r3, [r4, r2]
 8004afe:	e7c9      	b.n	8004a94 <_malloc_r+0x20>
 8004b00:	4622      	mov	r2, r4
 8004b02:	6864      	ldr	r4, [r4, #4]
 8004b04:	e7cc      	b.n	8004aa0 <_malloc_r+0x2c>
 8004b06:	1cc4      	adds	r4, r0, #3
 8004b08:	f024 0403 	bic.w	r4, r4, #3
 8004b0c:	42a0      	cmp	r0, r4
 8004b0e:	d0e3      	beq.n	8004ad8 <_malloc_r+0x64>
 8004b10:	1a21      	subs	r1, r4, r0
 8004b12:	4630      	mov	r0, r6
 8004b14:	f000 f82e 	bl	8004b74 <_sbrk_r>
 8004b18:	3001      	adds	r0, #1
 8004b1a:	d1dd      	bne.n	8004ad8 <_malloc_r+0x64>
 8004b1c:	e7cf      	b.n	8004abe <_malloc_r+0x4a>
 8004b1e:	bf00      	nop
 8004b20:	20000094 	.word	0x20000094
 8004b24:	20000098 	.word	0x20000098

08004b28 <_realloc_r>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	4614      	mov	r4, r2
 8004b2e:	460e      	mov	r6, r1
 8004b30:	b921      	cbnz	r1, 8004b3c <_realloc_r+0x14>
 8004b32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b36:	4611      	mov	r1, r2
 8004b38:	f7ff bf9c 	b.w	8004a74 <_malloc_r>
 8004b3c:	b922      	cbnz	r2, 8004b48 <_realloc_r+0x20>
 8004b3e:	f7ff ff49 	bl	80049d4 <_free_r>
 8004b42:	4625      	mov	r5, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b48:	f000 f830 	bl	8004bac <_malloc_usable_size_r>
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d20f      	bcs.n	8004b70 <_realloc_r+0x48>
 8004b50:	4621      	mov	r1, r4
 8004b52:	4638      	mov	r0, r7
 8004b54:	f7ff ff8e 	bl	8004a74 <_malloc_r>
 8004b58:	4605      	mov	r5, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d0f2      	beq.n	8004b44 <_realloc_r+0x1c>
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4622      	mov	r2, r4
 8004b62:	f7ff ff0f 	bl	8004984 <memcpy>
 8004b66:	4631      	mov	r1, r6
 8004b68:	4638      	mov	r0, r7
 8004b6a:	f7ff ff33 	bl	80049d4 <_free_r>
 8004b6e:	e7e9      	b.n	8004b44 <_realloc_r+0x1c>
 8004b70:	4635      	mov	r5, r6
 8004b72:	e7e7      	b.n	8004b44 <_realloc_r+0x1c>

08004b74 <_sbrk_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d06      	ldr	r5, [pc, #24]	; (8004b90 <_sbrk_r+0x1c>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fc f9fa 	bl	8000f78 <_sbrk>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_sbrk_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_sbrk_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	20000170 	.word	0x20000170

08004b94 <__malloc_lock>:
 8004b94:	4801      	ldr	r0, [pc, #4]	; (8004b9c <__malloc_lock+0x8>)
 8004b96:	f000 b811 	b.w	8004bbc <__retarget_lock_acquire_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	20000178 	.word	0x20000178

08004ba0 <__malloc_unlock>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__malloc_unlock+0x8>)
 8004ba2:	f000 b80c 	b.w	8004bbe <__retarget_lock_release_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20000178 	.word	0x20000178

08004bac <_malloc_usable_size_r>:
 8004bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb0:	1f18      	subs	r0, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfbc      	itt	lt
 8004bb6:	580b      	ldrlt	r3, [r1, r0]
 8004bb8:	18c0      	addlt	r0, r0, r3
 8004bba:	4770      	bx	lr

08004bbc <__retarget_lock_acquire_recursive>:
 8004bbc:	4770      	bx	lr

08004bbe <__retarget_lock_release_recursive>:
 8004bbe:	4770      	bx	lr

08004bc0 <_init>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr

08004bcc <_fini>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr
